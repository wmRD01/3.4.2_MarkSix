{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/Hmac.ts"],"names":["Hmac","Utf8","constructor","hasher","key","_hasher","parse","hasherBlockSize","blockSize","hasherBlockSizeBytes","nSigBytes","finalize","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","words","iKeyWords","i","reset","update","messageUpdate","innerHash","concat"],"mappings":";;;oCAIaA,I;;;;;;;;;;;;;;;;;;;;;;;;AAJLC,MAAAA,I,iBAAAA,I;;;;;;;sBAIKD,I,GAAN,MAAMA,IAAN,CAAW;AAKTE,QAAAA,WAAW,CAACC,MAAD,EAAiBC,GAAjB,EAA0C;AAAA;;AAAA;;AAAA;;AAC1D,eAAKC,OAAL,GAAeF,MAAf,CAD0D,CAG1D;;AACA,cAAI,OAAOC,GAAP,IAAc,QAAlB,EAA4B;AAC1BA,YAAAA,GAAG,GAAG;AAAA;AAAA,8BAAKE,KAAL,CAAWF,GAAX,CAAN;AACD;;AAED,gBAAMG,eAAe,GAAGJ,MAAM,CAACK,SAA/B;AACA,gBAAMC,oBAAoB,GAAGF,eAAe,GAAG,CAA/C,CAT0D,CAW1D;;AACA,cAAGH,GAAG,CAACM,SAAJ,GAAgBD,oBAAnB,EAAwC;AACtCL,YAAAA,GAAG,GAAGD,MAAM,CAACQ,QAAP,CAAgBP,GAAhB,CAAN;AACD,WAdyD,CAgB1D;;;AACAA,UAAAA,GAAG,CAACQ,KAAJ;AAEA,gBAAMC,IAAI,GAAG,KAAKC,KAAL,GAAaV,GAAG,CAACW,KAAJ,EAA1B;AACA,gBAAMC,IAAI,GAAG,KAAKC,KAAL,GAAab,GAAG,CAACW,KAAJ,EAA1B;AAEA,gBAAMG,SAAS,GAAGL,IAAI,CAACM,KAAvB;AACA,gBAAMC,SAAS,GAAGJ,IAAI,CAACG,KAAvB;;AAEA,eAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACd,eAAd,EAA8Bc,CAAC,EAA/B,EAAkC;AAChCH,YAAAA,SAAS,CAACG,CAAD,CAAT,IAAgB,UAAhB;AACAD,YAAAA,SAAS,CAACC,CAAD,CAAT,IAAgB,UAAhB;AACD;;AACDL,UAAAA,IAAI,CAACN,SAAL,GAAiBD,oBAAjB;AACAI,UAAAA,IAAI,CAACH,SAAL,GAAiBD,oBAAjB,CA9B0D,CAgC1D;;AACA,eAAKa,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACSA,QAAAA,KAAK,GAAE;AACZ,eAAKjB,OAAL,CAAaiB,KAAb;;AACA,eAAKjB,OAAL,CAAakB,MAAb,CAAoB,KAAKN,KAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSM,QAAAA,MAAM,CAACC,aAAD,EAAmC;AAC9C,eAAKnB,OAAL,CAAakB,MAAb,CAAoBC,aAApB;;AACA,iBAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSb,QAAAA,QAAQ,CAACa,aAAD,EAAmC;AAChD,gBAAMC,SAAS,GAAG,KAAKpB,OAAL,CAAaM,QAAb,CAAsBa,aAAtB,CAAlB;;AACA,eAAKnB,OAAL,CAAaiB,KAAb;;AACA,iBAAO,KAAKjB,OAAL,CAAaM,QAAb,CAAsB,KAAKG,KAAL,CAAWC,KAAX,GAAmBW,MAAnB,CAA0BD,SAA1B,CAAtB,CAAP;AACD;;AAjFe,O","sourcesContent":["import {Utf8} from \"./lib/encoder/Utf8\";\nimport type {Hasher} from \"./lib/algorithm/Hasher\";\nimport type {Word32Array} from \"./lib/Word32Array\";\n\nexport class Hmac {\n  private _hasher: Hasher;\n  private _oKey: Word32Array;\n  private _iKey: Word32Array;\n  \n  public constructor(hasher: Hasher, key: Word32Array|string) {\n    this._hasher = hasher;\n  \n    // Convert string to WordArray, else assume WordArray already\n    if (typeof key == \"string\") {\n      key = Utf8.parse(key);\n    }\n    \n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n    \n    // Allow arbitrary length keys\n    if(key.nSigBytes > hasherBlockSizeBytes){\n      key = hasher.finalize(key);\n    }\n  \n    // Clamp excess bits\n    key.clamp();\n    \n    const oKey = this._oKey = key.clone();\n    const iKey = this._iKey = key.clone();\n    \n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n    \n    for(let i=0;i<hasherBlockSize;i++){\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    iKey.nSigBytes = hasherBlockSizeBytes;\n    oKey.nSigBytes = hasherBlockSizeBytes;\n    \n    // Set initial values\n    this.reset();\n  }\n  \n  /**\n   * Resets this Hmac to its initial state.\n   *\n   * @example\n   *   hmacHasher.reset();\n   */\n  public reset(){\n    this._hasher.reset();\n    this._hasher.update(this._iKey);\n  }\n  \n  /**\n   * Updates this Hmac with a message.\n   *\n   * @param {Word32Array|string} messageUpdate The message to append.\n   * @return {Hmac} This Hmac instance.\n   * @example\n   *   hmacHasher.update('message');\n   *   hmacHasher.update(wordArray);\n   */\n  public update(messageUpdate: Word32Array|string){\n    this._hasher.update(messageUpdate);\n    return this;\n  }\n  \n  /**\n   * Finalizes the Hmac computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {Word32Array|string} messageUpdate (Optional) A final message update.\n   * @return {Word32Array} The Hmac.\n   * @example\n   *   var hmac = hmacHasher.finalize();\n   *   var hmac = hmacHasher.finalize('message');\n   *   var hmac = hmacHasher.finalize(wordArray);\n   */\n  public finalize(messageUpdate: Word32Array|string){\n    const innerHash = this._hasher.finalize(messageUpdate);\n    this._hasher.reset();\n    return this._hasher.finalize(this._oKey.clone().concat(innerHash));\n  }\n}\n"]}
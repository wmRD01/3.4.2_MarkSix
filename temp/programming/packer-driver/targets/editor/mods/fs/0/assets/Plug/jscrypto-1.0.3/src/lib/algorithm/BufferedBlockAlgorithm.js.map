{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/BufferedBlockAlgorithm.ts"],"names":["BufferedBlockAlgorithm","Word32Array","Utf8","constructor","props","_props","_data","data","clone","_nBytes","nBytes","blockSize","_blockSize","reset","_append","d","parse","concat","nSigBytes","_process","doFlush","processedWords","words","blockSizeByte","nBlocksReady","Math","ceil","max","_minBufferSize","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","Error"],"mappings":"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","sourcesContent":["import {Word32Array} from \"../Word32Array\";\nimport {Utf8} from \"../encoder/Utf8\";\n\nexport interface BufferedBlockAlgorithmProps {\n  data: Word32Array;\n  nBytes: number;\n}\n\nexport class BufferedBlockAlgorithm {\n  protected _props?: Partial<BufferedBlockAlgorithmProps>;\n  protected _data: Word32Array;\n  protected _nBytes: number;\n  protected _minBufferSize: number = 0;\n  protected _blockSize: number = 0;\n  \n  public constructor(props?: Partial<BufferedBlockAlgorithmProps>) {\n    this._props = props;\n    this._data = props && typeof props.data !== \"undefined\" ? props.data.clone() : new Word32Array();\n    this._nBytes = props && typeof props.nBytes === \"number\" ? props.nBytes : 0;\n  }\n  \n  public get blockSize(){\n    return this._blockSize;\n  }\n  \n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *   bufferedBlockAlgorithm.reset();\n   */\n  public reset(data?: Word32Array, nBytes?: number){\n    this._data = typeof data !== \"undefined\" ? data.clone() : new Word32Array();\n    this._nBytes = typeof nBytes === \"number\" ? nBytes : 0;\n  }\n  \n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {Word32Array|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n   * @example\n   *   bufferedBlockAlgorithm.append('data');\n   *   bufferedBlockAlgorithm.append(wordArray);\n   */\n  protected _append(data: Word32Array|string){\n    const d = typeof data === \"string\" ? Utf8.parse(data) : data;\n    this._data.concat(d);\n    this._nBytes += d.nSigBytes;\n  }\n  \n  /**\n   * Processes available data blocks.\n   * This method invokes doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean?} doFlush Whether all blocks and partial blocks should be processed.\n   * @return {Word32Array} The processed data.\n   * @example\n   *   var processedData = bufferedBlockAlgorithm.process();\n   *   var processedData = bufferedBlockAlgorithm.process(!!'flush');\n   */\n  protected _process(doFlush?: boolean){\n    let processedWords: number[]|undefined;\n    const words = this._data.words;\n    const nSigBytes = this._data.nSigBytes;\n    const blockSize = this._blockSize;\n    const blockSizeByte = this._blockSize * 4;\n    \n    let nBlocksReady = nSigBytes / blockSizeByte;\n    if(doFlush){\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    }\n    else{\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n    \n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n    \n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, nSigBytes);\n    \n    // Process blocks\n    if(nWordsReady){\n      for(let offset=0;offset<nWordsReady;offset+=blockSize){\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(words, offset);\n      }\n      \n      // Remove processed words\n      processedWords = words.splice(0, nWordsReady);\n      this._data.nSigBytes -= nBytesReady;\n    }\n    \n    // Return processed words\n    return new Word32Array(processedWords, nBytesReady);\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doProcessBlock(words: number[], offset: number): void {\n    throw new Error(\"Not implemented\")\n  }\n}\n"]}
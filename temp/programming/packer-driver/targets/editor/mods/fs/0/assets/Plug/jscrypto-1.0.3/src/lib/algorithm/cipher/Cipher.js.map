{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/Cipher.ts"],"names":["Cipher","BufferedBlockAlgorithm","constructor","props","_props","_key","key","_iv","iv","_transformMode","transformMode","reset","data","nBytes","_doReset","process","dataUpdate","_append","_process","finalize","_doFinalize","Error","_doProcessBlock","words","offset","createEncryptor","ENC_TRANSFORM_MODE","createDecryptor","DEC_TRANSFORM_MODE"],"mappings":";;;sDAWaA,M;;;;;;;;;;;;;;;;;;;;;;;;AAXLC,MAAAA,sB,iBAAAA,sB;;;;;;;wBAWKD,M,GAAN,MAAMA,MAAN;AAAA;AAAA,4DAA4C;AAW1CE,QAAAA,WAAW,CAACC,KAAD,EAAmC;AACnD,gBAAMA,KAAN;;AADmD;;AAAA,kDAJlB,CAIkB;;AAAA;;AAAA;;AAEnD,eAAKC,MAAL,GAAcD,KAAd;AAEA,eAAKE,IAAL,GAAYF,KAAK,CAACG,GAAlB;AACA,eAAKC,GAAL,GAAW,OAAOJ,KAAK,CAACK,EAAb,KAAoB,WAApB,GAAkCL,KAAK,CAACK,EAAxC,GAA6C,KAAKD,GAA7D;AACA,eAAKE,cAAL,GAAsB,OAAON,KAAK,CAACO,aAAb,KAA+B,WAA/B,GAA6CP,KAAK,CAACO,aAAnD,GAAmE,KAAKD,cAA9F;AACD;;AAEY,YAAFD,EAAE,GAAE;AACb,iBAAO,KAAKD,GAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACSI,QAAAA,KAAK,CAACC,IAAD,EAAqBC,MAArB,EAAsC;AAChD,gBAAMF,KAAN,CAAYC,IAAZ,EAAkBC,MAAlB;;AACA,eAAKC,QAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSC,QAAAA,OAAO,CAACC,UAAD,EAAgC;AAC5C,eAAKC,OAAL,CAAaD,UAAb;;AACA,iBAAO,KAAKE,QAAL,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSC,QAAAA,QAAQ,CAACH,UAAD,EAAiC;AAC9C;AACA,cAAIA,UAAJ,EAAgB;AACd,iBAAKC,OAAL,CAAaD,UAAb;AACD,WAJ6C,CAM9C;;;AACA,iBAAO,KAAKI,WAAL,EAAP;AACD;AAED;AACF;AACA;;;AACYN,QAAAA,QAAQ,GAAS;AACzB,gBAAM,IAAIO,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;AACF;AACA;;;AACYC,QAAAA,eAAe,CAACC,KAAD,EAAkBC,MAAlB,EAAwC;AAC/D,gBAAM,IAAIH,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;AACF;AACA;;;AACYD,QAAAA,WAAW,GAAgB;AACnC,gBAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,eAAfI,eAAe,CAACnB,GAAD,EAAmBH,KAAnB,EAAgD;AAC3EA,UAAAA,KAAK,GAAG,OAAOA,KAAP,KAAiB,WAAjB,GAA+B,EAA/B,GAAoCA,KAA5C;AACA,iBAAO,IAAIH,MAAJ,CAAW,EAAC,GAAGG,KAAJ;AAAWG,YAAAA,GAAX;AAAgBI,YAAAA,aAAa,EAAEV,MAAM,CAAC0B;AAAtC,WAAX,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,eAAfC,eAAe,CAACrB,GAAD,EAAmBH,KAAnB,EAAgD;AAC3EA,UAAAA,KAAK,GAAG,OAAOA,KAAP,KAAiB,WAAjB,GAA+B,EAA/B,GAAoCA,KAA5C;AACA,iBAAO,IAAIH,MAAJ,CAAW,EAAC,GAAGG,KAAJ;AAAWG,YAAAA,GAAX;AAAgBI,YAAAA,aAAa,EAAEV,MAAM,CAAC4B;AAAtC,WAAX,CAAP;AACD;;AAjHgD,O;;sBAAtC5B,M,wBACiC,C;;sBADjCA,M,wBAEiC,C;;sBAFjCA,M,aAGsB,MAAI,E;;sBAH1BA,M,YAIqB,MAAI,E","sourcesContent":["import {BufferedBlockAlgorithm, BufferedBlockAlgorithmProps} from \"../BufferedBlockAlgorithm\";\nimport type {Word32Array} from \"../../Word32Array\";\n\nexport interface CipherProps extends BufferedBlockAlgorithmProps {\n  key: Word32Array;\n  iv: Word32Array;\n  transformMode: number;\n}\n\nexport type PropsWithKey<T extends CipherProps> = Partial<T> & Pick<T, \"key\">;\n\nexport class Cipher extends BufferedBlockAlgorithm {\n  public static readonly ENC_TRANSFORM_MODE = 1;\n  public static readonly DEC_TRANSFORM_MODE = 2;\n  public static readonly keySize = 128/32;\n  public static readonly ivSize = 128/32;\n  \n  protected _props: PropsWithKey<CipherProps>;\n  protected _transformMode: number = 1;\n  protected _key: Word32Array;\n  protected _iv?: Word32Array;\n  \n  public constructor(props: PropsWithKey<CipherProps>) {\n    super(props);\n    this._props = props;\n  \n    this._key = props.key;\n    this._iv = typeof props.iv !== \"undefined\" ? props.iv : this._iv;\n    this._transformMode = typeof props.transformMode !== \"undefined\" ? props.transformMode : this._transformMode;\n  }\n  \n  public get iv(){\n    return this._iv;\n  }\n  \n  /**\n   * Resets this cipher to its initial state.\n   * @example\n   *   cipher.reset();\n   */\n  public reset(data?: Word32Array, nBytes?: number) {\n    super.reset(data, nBytes);\n    this._doReset();\n  }\n  \n  /**\n   * Adds data to be encrypted or decrypted.\n   * @param {Word32Array|string} dataUpdate The data to encrypt or decrypt.\n   * @return {Word32Array} The data after processing.\n   * @example\n   *   var encrypted = cipher.process('data');\n   *   var encrypted = cipher.process(wordArray);\n   */\n  public process(dataUpdate: Word32Array|string){\n    this._append(dataUpdate);\n    return this._process();\n  }\n  \n  /**\n   * Finalizes the encryption or decryption process.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   * @param {Word32Array|string?} dataUpdate The final data to encrypt or decrypt.\n   * @return {Word32Array} The data after final processing.\n   * @example\n   *   var encrypted = cipher.finalize();\n   *   var encrypted = cipher.finalize('data');\n   *   var encrypted = cipher.finalize(wordArray);\n   */\n  public finalize(dataUpdate?: Word32Array|string){\n    // Final data update\n    if (dataUpdate) {\n      this._append(dataUpdate);\n    }\n  \n    // Perform concrete-cipher logic\n    return this._doFinalize();\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doReset(): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doProcessBlock(words: number[], offset: number): void {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * @abstract\n   */\n  protected _doFinalize(): Word32Array {\n    throw new Error(\"Not implemented\");\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *     var cipher = AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new Cipher({...props, key, transformMode: Cipher.ENC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new Cipher({...props, key, transformMode: Cipher.DEC_TRANSFORM_MODE});\n  }\n}\n"]}
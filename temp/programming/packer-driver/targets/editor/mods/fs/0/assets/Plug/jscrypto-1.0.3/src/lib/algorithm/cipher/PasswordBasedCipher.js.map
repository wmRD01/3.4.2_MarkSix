{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/PasswordBasedCipher.ts"],"names":["parseCipherText","SerializableCipher","OpenSSLKDF","CipherParams","OpenSSLFormatter","PasswordBasedCipher","encrypt","Cipher","message","password","props","cipherProps","KDF","kdfProps","kdfHasher","kdfIterations","kdfModule","derivedParams","execute","keySize","ivSize","kdfSalt","iv","cipherParams","key","salt","decrypt","p","formatter","cipherParamsObj"],"mappings":"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","sourcesContent":["import {\n  ISerializableCipher,\n  parseCipherText,\n  SerializableCipher,\n  SerializableCipherProps,\n} from \"./SerializableCipher\";\nimport type {KDF as KDFType, KDFProps, BaseKDFModule} from \"./kdf/type\";\nimport {OpenSSLKDF} from \"./kdf/OpenSSLKDF\";\nimport type {Word32Array} from \"../../Word32Array\";\nimport {CipherParams} from \"./CipherParams\";\nimport {OpenSSLFormatter} from \"./formatter/OpenSSLFormatter\";\nimport type {Cipher as BaseCipher} from \"./Cipher\";\nimport type {Hasher} from \"../Hasher\";\n\nexport interface PasswordBasedCipherProps extends SerializableCipherProps {\n  KDF: KDFType;\n  kdfSalt: Word32Array; // 64bit. word32Array. 8words.\n  kdfModule: typeof BaseKDFModule;\n  kdfHasher: typeof Hasher;\n  kdfIterations: number;\n}\n\nexport const PasswordBasedCipher: ISerializableCipher<string> = {\n  /**\n   * Encrypts a message using a password.\n   *\n   * @param {typeof Cipher} Cipher The cipher algorithm to use.\n   * @param {Word32Array|string} message The message to encrypt.\n   * @param {string} password The password.\n   * @param {Partial<PasswordBasedCipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {CipherParams} A cipher params object.\n   * @example\n   *   var params = PasswordBasedCipher.encrypt(AES, message, 'password');\n   *   var params = PasswordBasedCipher.encrypt(AES, message, 'password', { format: OpenSSLFormatter });\n   */\n  encrypt(\n    Cipher: typeof BaseCipher,\n    message: Word32Array|string,\n    password: string,\n    props?: Partial<PasswordBasedCipherProps>,\n  ){\n    const cipherProps = props ? {...props} : {};\n    const KDF = props && props.KDF ? props.KDF : OpenSSLKDF;\n    const kdfProps: Partial<KDFProps> = {};\n    if(props && props.kdfHasher){\n      kdfProps.kdfHasher = props.kdfHasher;\n    }\n    if(props && props.kdfIterations){\n      kdfProps.kdfIterations = props.kdfIterations;\n    }\n    if(props && props.kdfModule){\n      kdfProps.kdfModule = props.kdfModule;\n    }\n    const derivedParams = KDF.execute(password, Cipher.keySize, Cipher.ivSize, cipherProps.kdfSalt, kdfProps);\n    \n    cipherProps.iv = derivedParams.iv;\n    const cipherParams = SerializableCipher.encrypt(Cipher, message, derivedParams.key, cipherProps);\n    \n    return new CipherParams({\n      ...cipherParams,\n      key: derivedParams.key,\n      iv: derivedParams.iv,\n      salt: derivedParams.salt,\n    });\n  },\n  \n  /**\n   * Decrypts serialized ciphertext using a password.\n   *\n   * @param {typeof Cipher} Cipher The cipher algorithm to use.\n   * @param {CipherParams|string} cipherParams The ciphertext to decrypt.\n   * @param {string} password The password.\n   * @param {Partial<PasswordBasedCipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Word32Array} The plaintext.\n   * @example\n   *   var plaintext = PasswordBasedCipher.decrypt(\n   *     AES,\n   *     formattedCiphertext,\n   *     'password',\n   *     { format: OpenSSLFormatter }\n   *   );\n   *   var plaintext = PasswordBasedCipher.decrypt(\n   *     AES,\n   *     ciphertextParams,\n   *     'password',\n   *     { format: OpenSSLFormatter }\n   *   );\n   */\n  decrypt(\n    Cipher: typeof BaseCipher,\n    cipherParams: CipherParams|string,\n    password: string,\n    props?: Partial<PasswordBasedCipherProps>,\n  ){\n    const p = props ? {...props} : {};\n    const KDF = p.KDF ? p.KDF : OpenSSLKDF;\n    const formatter = p.formatter ? p.formatter : OpenSSLFormatter;\n    const cipherParamsObj = parseCipherText(cipherParams, formatter);\n    const kdfProps: Partial<KDFProps> = {};\n    if(props && props.kdfHasher){\n      kdfProps.kdfHasher = props.kdfHasher;\n    }\n    if(props && props.kdfIterations){\n      kdfProps.kdfIterations = props.kdfIterations;\n    }\n    if(props && props.kdfModule){\n      kdfProps.kdfModule = props.kdfModule;\n    }\n    \n    const derivedParams = KDF.execute(password, Cipher.keySize, Cipher.ivSize, cipherParamsObj.salt, kdfProps);\n    \n    p.iv = derivedParams.iv;\n    return SerializableCipher.decrypt(Cipher, cipherParamsObj, derivedParams.key, p);\n  }\n}\n"]}
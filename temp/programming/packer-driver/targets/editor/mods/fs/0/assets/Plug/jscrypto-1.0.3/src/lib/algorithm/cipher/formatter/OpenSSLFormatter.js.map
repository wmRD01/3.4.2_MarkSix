{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/formatter/OpenSSLFormatter.ts"],"names":["CipherParams","Word32Array","Base64","OpenSSLFormatter","stringify","cipherParams","cipherText","salt","wordArray","concat","toString","parse","openSSLStr","ciphertextWords","words","slice","splice","nSigBytes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACQA,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;kCAEKC,gB,GAA8B;AACzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,SAAS,CAACC,YAAD,EAA4B;AACnC;AACA,gBAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,gBAAMC,IAAI,GAAGF,YAAY,CAACE,IAA1B;;AAEA,cAAG,CAACD,UAAJ,EAAe;AACb,mBAAO,EAAP;AACD,WAPkC,CASnC;;;AACA,cAAIC,IAAJ,EAAU;AACR,kBAAMC,SAAS,GAAG;AAAA;AAAA,4CAAgB,CAAC,UAAD,EAAa,UAAb,CAAhB,EAA0CC,MAA1C,CAAiDF,IAAjD,EAAuDE,MAAvD,CAA8DH,UAA9D,CAAlB;AACA,mBAAOE,SAAS,CAACE,QAAV;AAAA;AAAA,iCAAP;AACD;;AAED,iBAAOJ,UAAU,CAACI,QAAX;AAAA;AAAA,+BAAP;AACD,SAzBwC;;AA2BzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,KAAK,CAACC,UAAD,EAAoB;AACvB,cAAIL,IAAJ,CADuB,CAGvB;;AACA,gBAAMD,UAAU,GAAG;AAAA;AAAA,gCAAOK,KAAP,CAAaC,UAAb,CAAnB,CAJuB,CAMvB;;AACA,gBAAMC,eAAe,GAAGP,UAAU,CAACQ,KAAnC,CAPuB,CASvB;;AACA,cAAID,eAAe,CAAC,CAAD,CAAf,KAAuB,UAAvB,IAAqCA,eAAe,CAAC,CAAD,CAAf,KAAuB,UAAhE,EAA4E;AAC1E;AACAN,YAAAA,IAAI,GAAG;AAAA;AAAA,4CAAgBM,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAhB,CAAP,CAF0E,CAI1E;;AACAF,YAAAA,eAAe,CAACG,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B;AACAV,YAAAA,UAAU,CAACW,SAAX,IAAwB,EAAxB;AACD;;AAED,iBAAO;AAAA;AAAA,4CAAiB;AAACX,YAAAA,UAAD;AAAaC,YAAAA;AAAb,WAAjB,CAAP;AACD;;AAvDwC,O","sourcesContent":["import type {Formatter} from \"./type\";\nimport {CipherParams} from \"../CipherParams\";\nimport {Word32Array} from \"../../../Word32Array\";\nimport {Base64} from \"../../../encoder/Base64\";\n\nexport const OpenSSLFormatter: Formatter = {\n  /**\n   * Converts a cipher params object to an OpenSSL-compatible string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   * @return {string} The OpenSSL-compatible string.\n   * @example\n   *   var openSSLString = OpenSSLFormatter.stringify(cipherParams);\n   */\n  stringify(cipherParams: CipherParams){\n    // Shortcuts\n    const cipherText = cipherParams.cipherText;\n    const salt = cipherParams.salt;\n    \n    if(!cipherText){\n      return \"\";\n    }\n  \n    // Format\n    if (salt) {\n      const wordArray = new Word32Array([0x53616c74, 0x65645f5f]).concat(salt).concat(cipherText);\n      return wordArray.toString(Base64);\n    }\n    \n    return cipherText.toString(Base64);\n  },\n  \n  /**\n   * Converts an OpenSSL-compatible string to a cipher params object.\n   *\n   * @param {string} openSSLStr The OpenSSL-compatible string.\n   * @return {CipherParams} The cipher params object.\n   * @example\n   *   var cipherParams = OpenSSLFormatter.parse(openSSLString);\n   */\n  parse(openSSLStr: string){\n    let salt;\n  \n    // Parse base64\n    const cipherText = Base64.parse(openSSLStr);\n  \n    // Shortcut\n    const ciphertextWords = cipherText.words;\n  \n    // Test for salt\n    if (ciphertextWords[0] === 0x53616c74 && ciphertextWords[1] === 0x65645f5f) {\n      // Extract salt\n      salt = new Word32Array(ciphertextWords.slice(2, 4));\n    \n      // Remove salt from ciphertext\n      ciphertextWords.splice(0, 4);\n      cipherText.nSigBytes -= 16;\n    }\n  \n    return new CipherParams({cipherText, salt});\n  }\n}"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/kdf/OpenSSLKDF.ts"],"names":["Word32Array","CipherParams","PBKDF2","OpenSSLKDF","execute","password","keySize","ivSize","salt","props","random","KDFModule","kdfModule","kdfProps","Hasher","kdfHasher","iterations","kdfIterations","key","getKey","iv","words","slice","nSigBytes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;4BACaC,U,GAAkB;AAC7BC,QAAAA,OAAO,CAACC,QAAD,EAA+BC,OAA/B,EAAgDC,MAAhD,EAAgEC,IAAhE,EAAoFC,KAApF,EAA+G;AACpH;AACA,cAAI,CAACD,IAAL,EAAW;AACTA,YAAAA,IAAI,GAAG;AAAA;AAAA,4CAAYE,MAAZ,CAAmB,KAAG,CAAtB,CAAP;AACD;;AAED,gBAAMC,SAAS,GAAGF,KAAK,IAAIA,KAAK,CAACG,SAAf;AAAA;AAAA,+BAAlB;AACA,gBAAMC,QAAQ,GAAGJ,KAAK,GAAG;AAACK,YAAAA,MAAM,EAAEL,KAAK,CAACM,SAAf;AAA0BC,YAAAA,UAAU,EAAEP,KAAK,CAACQ;AAA5C,WAAH,GAAgE,EAAtF,CAPoH,CASpH;;AACA,gBAAMC,GAAG,GAAGP,SAAS,CAACQ,MAAV,CAAiBd,QAAjB,EAA2BG,IAA3B,EAAiC,EAAE,GAAGK,QAAL;AAAeP,YAAAA,OAAO,EAAEA,OAAO,GAAGC;AAAlC,WAAjC,CAAZ,CAVoH,CAYpH;;AACA,gBAAMa,EAAE,GAAG;AAAA;AAAA,0CAAgBF,GAAG,CAACG,KAAJ,CAAUC,KAAV,CAAgBhB,OAAhB,CAAhB,EAA0CC,MAAM,GAAG,CAAnD,CAAX;AACAW,UAAAA,GAAG,CAACK,SAAJ,GAAgBjB,OAAO,GAAG,CAA1B,CAdoH,CAgBpH;;AACA,iBAAO;AAAA;AAAA,4CAAiB;AAAEY,YAAAA,GAAF;AAAOE,YAAAA,EAAP;AAAWZ,YAAAA;AAAX,WAAjB,CAAP;AACD;;AAnB4B,O","sourcesContent":["import {Word32Array} from \"../../../Word32Array\";\nimport {CipherParams} from \"../CipherParams\";\nimport {PBKDF2} from \"./module/PBKDF2\";\nimport type {KDF, KDFParams, KDFProps} from \"./type\";\n\n/**\n * Derives a key and IV from a password.\n *\n * @param {string} password The password to derive from.\n * @param {number} keySize The size in words of the key to generate.\n * @param {number} ivSize The size in words of the IV to generate.\n * @param {Word32Array?} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n * @return {CipherParams} A cipher params object with the key, IV, and salt.\n * @example\n *   var derivedParams = OpenSSLKDF.execute('Password', 256/32, 128/32);\n *   var derivedParams = OpenSSLKDF.execute('Password', 256/32, 128/32, 'saltsalt');\n */\nexport const OpenSSLKDF: KDF = {\n  execute(password: Word32Array|string, keySize: number, ivSize: number, salt?: Word32Array, props?: Partial<KDFProps>) {\n    // Generate random salt\n    if (!salt) {\n      salt = Word32Array.random(64/8);\n    }\n    \n    const KDFModule = props && props.kdfModule || PBKDF2;\n    const kdfProps = props ? {Hasher: props.kdfHasher, iterations: props.kdfIterations} : {};\n  \n    // Derive key and IV\n    const key = KDFModule.getKey(password, salt, { ...kdfProps, keySize: keySize + ivSize });\n  \n    // Separate key and IV\n    const iv = new Word32Array(key.words.slice(keySize), ivSize * 4);\n    key.nSigBytes = keySize * 4;\n  \n    // Return params\n    return new CipherParams({ key, iv, salt }) as KDFParams;\n  }\n};"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/kdf/module/PBKDF2.ts"],"names":["PBKDF2","SHA256","Hmac","Word32Array","BaseKDFModule","constructor","props","_keySize","keySize","_Hasher","Hasher","_iterations","iterations","compute","password","salt","hmac","derivedKey","blockIndex","derivedKeyWords","words","blockIndexWords","length","block","update","finalize","reset","blockWords","blockWordsLength","intermediate","i","intermediateWords","j","concat","nSigBytes","getKey"],"mappings":"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","sourcesContent":["import type {Hasher} from \"../../../Hasher\";\nimport {SHA256} from \"../../../../../SHA256\";\nimport {Hmac} from \"../../../../../Hmac\";\nimport {Word32Array} from \"../../../../Word32Array\";\nimport {BaseKDFModule, BaseKDFModuleProps} from \"../type\";\n\nexport interface PBKDF2Props extends BaseKDFModuleProps {\n}\n\n/**\n * Password-Based Key Derivation Function 2 algorithm.\n *\n * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n * @property {Hasher} hasher The hash algorithm to use. Default: SHA1\n * @property {number} iterations The number of iterations to perform. Default: 1\n */\nexport class PBKDF2 extends BaseKDFModule<PBKDF2Props> {\n  protected _keySize: number = 128/32;\n  protected _Hasher: typeof Hasher = SHA256;\n  protected _iterations: number = 10000;\n  \n  public constructor(props?: Partial<PBKDF2Props>) {\n    super(props);\n    \n    if(props){\n      this._keySize = typeof props.keySize !== \"undefined\" ? props.keySize : this._keySize;\n      this._Hasher = typeof props.Hasher !== \"undefined\" ? props.Hasher : this._Hasher;\n      this._iterations = typeof props.iterations !== \"undefined\" ? props.iterations : this._iterations;\n    }\n  }\n  \n  /**\n   * Derives a key from a password.\n   *\n   * @param {Word32Array|string} password The password.\n   * @param {Word32Array|string} salt A salt.\n   * @return {Word32Array} The derived key.\n   * @example\n   *   var kdf = new PBKDF2();\n   *   var key = kdf.compute(password, salt);\n   */\n  public compute(password: Word32Array|string, salt: Word32Array|string){\n    // Init HMAC\n    const hmac = new Hmac(new this._Hasher(), password);\n  \n    // Initial values\n    const derivedKey = new Word32Array();\n    const blockIndex = new Word32Array([0x00000001]);\n  \n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const blockIndexWords = blockIndex.words;\n    const keySize = this._keySize;\n    const iterations = this._iterations;\n  \n    // Generate key\n    while(derivedKeyWords.length < keySize){\n      const block = hmac.update(salt).finalize(blockIndex);\n      hmac.reset();\n    \n      // Shortcuts\n      const blockWords = block.words;\n      const blockWordsLength = blockWords.length;\n    \n      // Iterations\n      let intermediate = block;\n      for (let i = 1; i < iterations; i++) {\n        intermediate = hmac.finalize(intermediate);\n        hmac.reset();\n      \n        // Shortcut\n        const intermediateWords = intermediate.words;\n      \n        // XOR intermediate with block\n        for (let j = 0; j < blockWordsLength; j++) {\n          blockWords[j] ^= intermediateWords[j];\n        }\n      }\n    \n      derivedKey.concat(block);\n      blockIndexWords[0]++;\n    }\n    derivedKey.nSigBytes = keySize * 4;\n  \n    return derivedKey;\n  }\n  \n  /**\n   * Derives a key from a password.\n   *\n   * @param {Word32Array|string} password The password.\n   * @param {Word32Array|string} salt A salt.\n   * @param {Partial<PBKDF2Props>?} props (Optional) The configuration options to use for this computation.\n   * @return {Word32Array} The derived key.\n   * @static\n   * @example\n   *     var key = PBKDF2.getKey(password, salt);\n   *     var key = PBKDF2.getKey(password, salt, { keySize: 8 });\n   *     var key = PBKDF2.getKey(password, salt, { keySize: 8, iterations: 1000 });\n   */\n  public static getKey(password: Word32Array|string, salt: Word32Array|string, props?: Partial<PBKDF2Props>){\n    return new PBKDF2(props).compute(password, salt);\n  }\n}"]}
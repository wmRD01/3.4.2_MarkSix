{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/mode/CCM.ts"],"names":["CCM","BlockCipherMode","Word32Array","lsb","msb","constructor","props","cipher","iv","blockSize","Error","nSigBytes","_N","_q","getB0","hasAData","t","Q","N","reservedBit","ADataBit","tBit","qBit","flags","NQ","clone","concat","B00","formatAssociatedDataAndPayload","A","P","a","ad","nAd","Math","floor","i","words","nPayload","genCtr","q","index","flag","indexBytes","nq","mac","Cipher","key","authData","plainText","tagLength","p","B0","Boolean","Bi","Y0","slice","encryptBlock","n","wordsBi","Y","Yi0","Yi1","Yi2","Yi3","Yi","T","ctr0","clamp","combineCipherTextAndAuthTag","cipherText","authTag","splitCipherTextAndAuthTag","cipherTextWithAuthTag","tLen","createEncryptor","Encryptor","createDecryptor","Decryptor","processBlock","offset","_cipher","CBi","_CBIndex"],"mappings":"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","sourcesContent":["import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\nimport {Word32Array} from \"../../../Word32Array\";\nimport type {BlockCipher} from \"../BlockCipher\";\nimport {lsb, msb} from \"./commonLib\";\n\n/**\n * Counter/CBC-MAC\n */\nexport class CCM extends BlockCipherMode {\n  protected _N: Word32Array;\n  protected _CBIndex: number = 1;\n  protected readonly _q;\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  \n    const {cipher, iv} = props;\n    if(cipher.blockSize !== 128/32){\n      throw new Error(\"In CCM, cipher block size must be 128bit\");\n    }\n    else if(iv && (iv.nSigBytes > 13 || iv.nSigBytes < 7)){\n      throw new Error(\"Byte size of iv must be between 7 and 13\");\n    }\n    \n    this._N = iv || new Word32Array([0, 0], 8);\n    this._q = 15 - this._N.nSigBytes;\n  }\n  \n  /**\n   * Generate first block of B.\n   *\n   * @param {boolean} hasAData - If payload has AData, true.\n   * @param {number} t - Octet length of T(Auth tag)\n   * @param {Word32Array} Q - Octet length of payload.\n   * @param {Word32Array} N - Nonce.\n   */\n  public static getB0(hasAData: boolean, t: number, Q: Word32Array, N: Word32Array){\n    if(Q.nSigBytes + N.nSigBytes !== 15){\n      throw new Error(\"LEN(Q)+LEN(N) must be 15\");\n    }\n    \n    const reservedBit = 0 << 7;\n    const ADataBit = (hasAData ? 1 : 0) << 6;\n    const tBit = (((t-2)/2) << 3); // 3bits\n    const qBit = (Q.nSigBytes-1); // 3bits\n    const flags = (reservedBit | ADataBit | tBit | qBit) & 0x000000ff;\n    \n    const NQ = N.clone().concat(Q);\n  \n    const B00 = new Word32Array([flags<<24], 1);\n    return B00.concat(NQ);\n  }\n  \n  /**\n   * Format associated data\n   * @param {Word32Array} A - Associated data\n   * @param {Word32Array} P - Payload\n   */\n  public static formatAssociatedDataAndPayload(A: Word32Array, P: Word32Array){\n    const a = A.nSigBytes;\n    let ad: Word32Array;\n    if(a === 0){\n      ad = new Word32Array([0], 0);\n    }\n    else if(a < 2**16 - 2**8){\n      ad = new Word32Array([a<<16], 2);\n    }\n    else if(a < 2**32){\n      ad = new Word32Array([0xfffe0000], 2).concat(new Word32Array([a], 4));\n    }\n    else{\n      throw new Error(\"LEN(A) larger than 2**32-1 is not supported\");\n    }\n    \n    // Format AdditionalData\n    const nAd = Math.floor(A.nSigBytes / 4);\n    for(let i=0;i<nAd;i++){\n      ad.concat(new Word32Array([A.words[i]], 4));\n    }\n    \n    if(A.nSigBytes % 4){\n      ad.concat(new Word32Array([A.words[nAd]], A.nSigBytes % 4));\n      ad.concat(new Word32Array([0], 4 - A.nSigBytes%4));\n    }\n    \n    // Align to 16byte block\n    if(ad.nSigBytes % 16){\n      ad.concat(new Word32Array([0], 16 - ad.nSigBytes%16));\n    }\n    \n    // Format Payload\n    const nPayload = Math.floor(P.nSigBytes / 4);\n    for(let i=0;i<nPayload;i++){\n      ad.concat(new Word32Array([P.words[i]], 4));\n    }\n  \n    if(P.nSigBytes % 4){\n      ad.concat(new Word32Array([P.words[nPayload]], P.nSigBytes % 4));\n      ad.concat(new Word32Array([0], 4 - P.nSigBytes%4));\n    }\n  \n    // Align to 16byte block\n    if(ad.nSigBytes % 16){\n      ad.concat(new Word32Array([0], 16 - ad.nSigBytes%16));\n    }\n  \n    return ad;\n  }\n  \n  /**\n   * Generate Counter Block\n   * @param {number} q - LEN(Q)\n   * @param {Word32Array} N - Nonce\n   * @param {number} index - Block index of 32bit integer\n   */\n  public static genCtr(q: number, N: Word32Array, index: number){\n    if(N.nSigBytes + q !== 15){\n      throw new Error(\"LEN(Q)+LEN(N) must be 15\");\n    }\n    \n    const flag = new Word32Array([((q-1) & 0x00000007) << 24], 1);\n    const indexBytes = new Word32Array([], 0);\n    const nq = Math.floor(q/4);\n    for(let i=0;i<nq-1;i++){\n      indexBytes.concat(new Word32Array([0], 4));\n    }\n    \n    if(q % 4){\n      if(q > 4){\n        indexBytes.concat(new Word32Array([0], q%4));\n        indexBytes.concat(new Word32Array([index], 4));\n      }\n      else{\n        indexBytes.concat(new Word32Array([index << (32-q*8)], q));\n      }\n    }\n    else{\n      indexBytes.concat(new Word32Array([index], 4));\n    }\n    \n    return flag.concat(N).concat(indexBytes);\n  }\n  \n  /**\n   * Generate Message Authentication Code\n   * \n   * @param {typeof BlockCipher} Cipher - 128 bit block Cipher i.e. AES\n   * @param {Word32Array} key - Key\n   * @param {Word32Array} iv - Nonce. iv less than or equal to 8byte(64bit) is supported.\n   * @param {Word32Array?} authData - Associated data\n   * @param {Word32Array?} plainText - Payload\n   * @param {number?} tagLength - authTag size in octet length. If omitted, tagLength will be set to 16byte.\n   */\n  public static mac(\n    Cipher: typeof BlockCipher,\n    key: Word32Array,\n    iv: Word32Array,\n    authData?: Word32Array,\n    plainText?: Word32Array,\n    tagLength?: number,\n  ){\n    const cipher = new Cipher({key, iv});\n    if(cipher.blockSize !== 128/32){\n      throw new Error(\"In CCM, cipher block size must be 128bit\");\n    }\n    else if(iv && (iv.nSigBytes > 13 || iv.nSigBytes < 7)){\n      throw new Error(\"Byte size of iv must be between 7 and 13\");\n    }\n  \n    const N = iv || new Word32Array([0, 0], 8);\n    const A = authData?.clone() || new Word32Array();\n    const a = A.nSigBytes;\n    const P = plainText?.clone() || new Word32Array();\n    const p = P.nSigBytes;\n    if((p >>> 0) > 4294967295){\n      throw new Error(\"Byte length of Payload(plainText) larger than 2^32-1 (4,294,967,295byte) is not supported at this time.\");\n    }\n  \n    const q = 15 - N.nSigBytes;\n    const Q = lsb(new Word32Array([0, p], 8), q);\n    const t = tagLength || 16;\n    \n    const B0 = CCM.getB0(Boolean(a), t, Q, N);\n    const Bi = CCM.formatAssociatedDataAndPayload(A, P);\n    const Y0 = B0.words.slice();\n    cipher.encryptBlock(Y0, 0);\n  \n    const n = Bi.nSigBytes / 16;\n    const wordsBi = Bi.words;\n  \n    let Y = Y0;\n    for(let i=0;i<n;i++){\n      const Yi0 = wordsBi[i*4] ^ Y[0];\n      const Yi1 = wordsBi[i*4+1] ^ Y[1];\n      const Yi2 = wordsBi[i*4+2] ^ Y[2];\n      const Yi3 = wordsBi[i*4+3] ^ Y[3];\n      const Yi = [Yi0, Yi1, Yi2, Yi3];\n      \n      cipher.encryptBlock(Yi, 0);\n      Y = Yi;\n    }\n  \n    const T = new Word32Array(Y, t);\n    const ctr0 = CCM.genCtr(q, N, 0);\n    cipher.encryptBlock(ctr0.words, 0);\n    \n    for(let i=0;i<4;i++){\n      T.words[i] ^= ctr0.words[i];\n    }\n    \n    T.clamp();\n    \n    return T;\n  }\n  \n  public static combineCipherTextAndAuthTag(cipherText: Word32Array, authTag: Word32Array){\n    return cipherText.clone().concat(authTag);\n  }\n  \n  public static splitCipherTextAndAuthTag(cipherTextWithAuthTag: Word32Array, tLen?: number){\n    const t = tLen || 16;\n    const cipherText = msb(cipherTextWithAuthTag, cipherTextWithAuthTag.nSigBytes - t);\n    const authTag = lsb(cipherTextWithAuthTag, t);\n    return {cipherText, authTag};\n  }\n  \n  /**\n   * CTR encryptor.\n   */\n  public static Encryptor: typeof CCM = class Encryptor extends CCM {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher\n      const blockSize = cipher.blockSize;\n      \n      const CBi = CCM.genCtr(this._q, this._N, this._CBIndex);\n      cipher.encryptBlock(CBi.words, 0);\n      \n      for(let i=0;i<blockSize;i++){\n        words[offset + i] ^= CBi.words[i];\n      }\n      \n      this._CBIndex++;\n    }\n  };\n  \n  /**\n   * CTR decryptor.\n   */\n  public static Decryptor: typeof CCM = class Decryptor extends CCM {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher\n      const blockSize = cipher.blockSize;\n  \n      const CBi = CCM.genCtr(this._q, this._N, this._CBIndex);\n      cipher.encryptBlock(CBi.words, 0);\n  \n      for(let i=0;i<blockSize;i++){\n        words[offset + i] ^= CBi.words[i];\n      }\n  \n      this._CBIndex++;\n    }\n  };\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = CTR.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new CCM.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = CTR.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new CCM.Decryptor(props);\n  }\n}"]}
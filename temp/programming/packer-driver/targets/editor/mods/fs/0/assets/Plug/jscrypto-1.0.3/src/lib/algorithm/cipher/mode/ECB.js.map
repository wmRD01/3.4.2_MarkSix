{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/mode/ECB.ts"],"names":["ECB","BlockCipherMode","constructor","props","createEncryptor","Encryptor","createDecryptor","Decryptor","processBlock","words","offset","_cipher","encryptBlock","decryptBlock"],"mappings":";;;+CAKaA,G;;;;;;;;;;;;;;;;;;;;AALLC,MAAAA,e,iBAAAA,e;;;;;;;AAER;AACA;AACA;qBACaD,G,GAAN,MAAMA,GAAN;AAAA;AAAA,8CAAkC;AACvC;AACF;AACA;;AAeE;AACF;AACA;AAgBSE,QAAAA,WAAW,CAACC,KAAD,EAA8B;AAC9C,gBAAMA,KAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAC+B,eAAfC,eAAe,CAACD,KAAD,EAA6B;AACxD,iBAAO,IAAIH,GAAG,CAACK,SAAR,CAAkBF,KAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAC+B,eAAfG,eAAe,CAACH,KAAD,EAA6B;AACxD,iBAAO,IAAIH,GAAG,CAACO,SAAR,CAAkBJ,KAAlB,CAAP;AACD;;AA1DsC,O;;sBAA5BH,G,eAI2B,MAAMK,SAAN,SAAwBL,GAAxB,CAA4B;AAChE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACWQ,QAAAA,YAAY,CAACC,KAAD,EAAkBC,MAAlB,EAAiC;AAClD,eAAKC,OAAL,CAAaC,YAAb,CAA0BH,KAA1B,EAAiCC,MAAjC;AACD;;AAX+D,O;;sBAJvDV,G,eAqB2B,MAAMO,SAAN,SAAwBP,GAAxB,CAA4B;AAChE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACWQ,QAAAA,YAAY,CAACC,KAAD,EAAkBC,MAAlB,EAAiC;AAClD,eAAKC,OAAL,CAAaE,YAAb,CAA0BJ,KAA1B,EAAiCC,MAAjC;AACD;;AAX+D,O","sourcesContent":["import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\n/**\n * Electronic Codebook block mode.\n */\nexport class ECB extends BlockCipherMode {\n  /**\n   * ECB encryptor.\n   */\n  public static Encryptor: typeof ECB = class Encryptor extends ECB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      this._cipher.encryptBlock(words, offset);\n    }\n  };\n  \n  /**\n   * ECB decryptor.\n   */\n  public static Decryptor: typeof ECB = class Decryptor extends ECB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      this._cipher.decryptBlock(words, offset);\n    }\n    \n  };\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = ECB.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new ECB.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = ECB.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new ECB.Decryptor(props);\n  }\n}"]}
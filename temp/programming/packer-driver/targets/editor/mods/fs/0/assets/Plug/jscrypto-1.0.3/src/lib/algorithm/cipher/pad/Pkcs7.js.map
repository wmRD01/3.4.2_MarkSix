{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/pad/Pkcs7.ts"],"names":["pad","data","blockSize","blockSizeBytes","nPaddingBytes","nSigBytes","paddingWord","paddingWords","i","push","padding","concat","unpad","words","Word32Array","Pkcs7"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,GAAT,CAAaC,IAAb,EAAgCC,SAAhC,EAAkD;AAChD;AACA,UAAMC,cAAc,GAAGD,SAAS,GAAG,CAAnC,CAFgD,CAIhD;;AACA,UAAME,aAAa,GAAGD,cAAc,GAAGF,IAAI,CAACI,SAAL,GAAiBF,cAAxD,CALgD,CAOhD;;AACA,UAAMG,WAAW,GAAIF,aAAa,IAAI,EAAlB,GAAyBA,aAAa,IAAI,EAA1C,GAAiDA,aAAa,IAAI,CAAlE,GAAuEA,aAA3F,CARgD,CAUhD;;AACA,UAAMG,YAAY,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAApB,EAAmCI,CAAC,IAAI,CAAxC,EAA2C;AACzCD,MAAAA,YAAY,CAACE,IAAb,CAAkBH,WAAlB;AACD;;AACD,UAAMI,OAAO,GAAG;AAAA;AAAA,oCAAgBH,YAAhB,EAA8BH,aAA9B,CAAhB,CAfgD,CAiBhD;;AACAH,IAAAA,IAAI,CAACU,MAAL,CAAYD,OAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASE,KAAT,CAAeX,IAAf,EAAiC;AAC/B;AACA,UAAMG,aAAa,GAAGH,IAAI,CAACY,KAAL,CAAYZ,IAAI,CAACI,SAAL,GAAiB,CAAlB,KAAyB,CAApC,IAAyC,IAA/D,CAF+B,CAI/B;;AACAJ,IAAAA,IAAI,CAACI,SAAL,IAAkBD,aAAlB;AACD;;;;;;;;;;;;;;;;AA7COU,MAAAA,W,iBAAAA,W;;;;;;;uBA+CKC,K,GAAa;AACxBf,QAAAA,GADwB;AAExBY,QAAAA;AAFwB,O","sourcesContent":["import {Word32Array} from \"../../../Word32Array\";\nimport type {Pad} from \"./type\";\n\n/**\n * Pads data using the algorithm defined in PKCS #5/7.\n *\n * @param {Word32Array} data The data to pad.\n * @param {number} blockSize The multiple that the data should be padded to.\n * @example\n *   Pkcs7.pad(wordArray, 4);\n */\nfunction pad(data: Word32Array, blockSize: number){\n  // Shortcut\n  const blockSizeBytes = blockSize * 4;\n  \n  // Count padding bytes\n  const nPaddingBytes = blockSizeBytes - data.nSigBytes % blockSizeBytes;\n  \n  // Create padding word\n  const paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n  \n  // Create padding\n  const paddingWords = [];\n  for (let i = 0; i < nPaddingBytes; i += 4) {\n    paddingWords.push(paddingWord);\n  }\n  const padding = new Word32Array(paddingWords, nPaddingBytes);\n  \n  // Add padding\n  data.concat(padding);\n}\n\n/**\n * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n *\n * @param {Word32Array} data The data to unpad.\n * @example\n *   Pkcs7.unpad(wordArray);\n */\nfunction unpad(data: Word32Array){\n  // Get number of padding bytes from last byte\n  const nPaddingBytes = data.words[(data.nSigBytes - 1) >>> 2] & 0xff;\n  \n  // Remove padding\n  data.nSigBytes -= nPaddingBytes;\n}\n\nexport const Pkcs7: Pad = {\n  pad,\n  unpad,\n};\n"]}
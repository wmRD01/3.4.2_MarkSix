{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/DES.js"],"names":["expect","require","Word32Array","Hex","mode","ECB","pad","NoPadding","SHA256","SerializableCipher","PasswordBasedCipher","DES","describe","it","expectedResult","message","parse","key","props","padding","encrypt","cipherText","toString","to","be","encryptedMessage","decrypt","des3","createEncryptor","ciphertext1","process","ciphertext2","ciphertext3","ciphertext4","finalize","concat","iv","expectedMessage","expectedKey","expectedIv","random","nBytes","words","i","push","hash"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,gBAAM;AACJC,YAAAA,WADI;AAEJC,YAAAA,GAFI;AAGJC,YAAAA,IAAI,EAAE;AAACC,cAAAA;AAAD,aAHF;AAIJC,YAAAA,GAAG,EAAE;AAACC,cAAAA;AAAD,aAJD;AAKJC,YAAAA,MALI;AAMJC,YAAAA,kBANI;AAOJC,YAAAA,mBAPI;AAQJC,YAAAA;AARI,cASFV,OAAO,CAAC,kBAAD,CATX;;AAWAW,UAAAA,QAAQ,CAAC,KAAD,EAAQ,YAAU;AACxBC,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMC,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMC,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMC,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMC,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMC,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMC,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAQAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMW,gBAAgB,GAAGtB,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAzB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMW,gBAAgB,GAAGtB,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAzB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMW,gBAAgB,GAAGtB,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAzB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMW,gBAAgB,GAAGtB,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAzB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMW,gBAAgB,GAAGtB,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAzB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,cAAc,GAAG,kBAAvB;AACA,oBAAMW,gBAAgB,GAAGtB,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAzB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACAP,cAAAA,MAAM,CAACW,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAQAD,YAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAU;AAC9B,oBAAMC,cAAc,GAAGH,GAAG,CAACS,OAAJ,CACrBjB,GAAG,CAACa,KAAJ,CAAU,kCAAV,CADqB,EAErBb,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAFqB,EAGrB;AAACZ,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAHqB,EAIrBc,UAJqB,CAIVC,QAJU,EAAvB;AAKA,oBAAML,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAME,KAAK,GAAG;AAACd,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAd;AACA,oBAAMoB,IAAI,GAAGhB,GAAG,CAACiB,eAAJ,CAAoBX,GAApB,EAAyBC,KAAzB,CAAb;AAEA,oBAAMW,WAAW,GAAGF,IAAI,CAACG,OAAL,CAAa3B,GAAG,CAACa,KAAJ,CAAU,cAAV,CAAb,CAApB;AACA,oBAAMe,WAAW,GAAGJ,IAAI,CAACG,OAAL,CAAa3B,GAAG,CAACa,KAAJ,CAAU,YAAV,CAAb,CAApB;AACA,oBAAMgB,WAAW,GAAGL,IAAI,CAACG,OAAL,CAAa3B,GAAG,CAACa,KAAJ,CAAU,YAAV,CAAb,CAApB;AACA,oBAAMiB,WAAW,GAAGN,IAAI,CAACO,QAAL,EAApB;AAEAlC,cAAAA,MAAM,CAAC6B,WAAW,CAACM,MAAZ,CAAmBJ,WAAnB,EAAgCI,MAAhC,CAAuCH,WAAvC,EAAoDG,MAApD,CAA2DF,WAA3D,EAAwEX,QAAxE,EAAD,CAAN,CAA2FC,EAA3F,CAA8FC,EAA9F,CAAiGV,cAAjG;AACD,aAhBC,CAAF;AAkBAD,YAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAU;AACnC,oBAAME,OAAO,GAAGZ,GAAG,CAACa,KAAJ,CAAU,kCAAV,CAAhB;AACA,oBAAMC,GAAG,GAAGd,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAZ;AACA,oBAAMoB,EAAE,GAAGjC,GAAG,CAACa,KAAJ,CAAU,kBAAV,CAAX;AAEA,oBAAMqB,eAAe,GAAGtB,OAAO,CAACO,QAAR,EAAxB;AACA,oBAAMgB,WAAW,GAAGrB,GAAG,CAACK,QAAJ,EAApB;AACA,oBAAMiB,UAAU,GAAGH,EAAE,CAACd,QAAH,EAAnB;AAEAX,cAAAA,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0B;AAAEmB,gBAAAA;AAAF,eAA1B;AAEApC,cAAAA,MAAM,CAACe,OAAO,CAACO,QAAR,EAAD,CAAN,CAA2BC,EAA3B,CAA8BC,EAA9B,CAAiCa,eAAjC;AACArC,cAAAA,MAAM,CAACiB,GAAG,CAACK,QAAJ,EAAD,CAAN,CAAuBC,EAAvB,CAA0BC,EAA1B,CAA6Bc,WAA7B;AACAtC,cAAAA,MAAM,CAACoC,EAAE,CAACd,QAAH,EAAD,CAAN,CAAsBC,EAAtB,CAAyBC,EAAzB,CAA4Be,UAA5B;AACD,aAdC,CAAF;AAgBA1B,YAAAA,EAAE,CAAC,aAAD,EAAgB,YAAU;AAC1B;AACA,oBAAM2B,MAAM,GAAGtC,WAAW,CAACsC,MAA3B,CAF0B,CAI1B;;AACAtC,cAAAA,WAAW,CAACsC,MAAZ,GAAqB,UAAUC,MAAV,EAAkB;AACrC,sBAAMC,KAAK,GAAG,EAAd;;AACA,qBAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,MAAd,EAAqBE,CAAC,IAAE,CAAxB,EAA0B;AACxBD,kBAAAA,KAAK,CAACE,IAAN,CAAW,CAAC,UAAD,CAAX;AACD;;AAED,uBAAO,IAAI1C,WAAJ,CAAgBwC,KAAhB,EAAuBD,MAAvB,CAAP;AACD,eAPD,CAL0B,CAc1B;;;AACAzC,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAY,UAAZ,EAAwBZ,MAAM,CAACqC,IAAP,CAAY,MAAZ,CAAxB,EAA6C;AAACzC,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAA7C,EAA8Ec,UAA9E,CAAyFC,QAAzF,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACSb,GAAG,CAACiB,eAAJ,CAAoBpB,MAAM,CAACqC,IAAP,CAAY,MAAZ,CAApB,EAAyC;AAACzC,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAzC,EAA0E2B,QAA1E,CAAmF,UAAnF,EAA+FZ,QAA/F,EADT;AAGAtB,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAY,UAAZ,EAAwBZ,MAAM,CAACqC,IAAP,CAAY,MAAZ,CAAxB,EAA6C;AAACzC,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAA7C,EAA8Ee,QAA9E,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACSf,kBAAkB,CAACW,OAAnB,CAA2BT,GAA3B,EAAgC,UAAhC,EAA4CH,MAAM,CAACqC,IAAP,CAAY,MAAZ,CAA5C,EAAiE;AAACzC,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAjE,EAAkGe,QAAlG,EADT;AAGAtB,cAAAA,MAAM,CAACW,GAAG,CAACS,OAAJ,CAAY,UAAZ,EAAwB,MAAxB,EAAgC;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAAhC,EAAiEe,QAAjE,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACSd,mBAAmB,CAACU,OAApB,CAA4BT,GAA5B,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD;AAACP,gBAAAA,IAAI,EAAEC,GAAP;AAAYc,gBAAAA,OAAO,EAAEZ;AAArB,eAArD,EAAsFe,QAAtF,EADT,EArB0B,CAwB1B;;AACApB,cAAAA,WAAW,CAACsC,MAAZ,GAAqBA,MAArB;AACD,aA1BC,CAAF;AA2BD,WApJO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Word32Array,\n  Hex,\n  mode: {ECB},\n  pad: {NoPadding},\n  SHA256,\n  SerializableCipher,\n  PasswordBasedCipher,\n  DES,\n} = require(\"../../test/build\");\n\ndescribe(\"des\", function(){\n  it(\"test encrypt 1\", function(){\n    const expectedResult = \"95a8d72813daa94d\";\n    const message = Hex.parse(\"0000000000000000\");\n    const key = Hex.parse(\"8000000000000000\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 2\", function(){\n    const expectedResult = \"1de5279dae3bed6f\";\n    const message = Hex.parse(\"0000000000000000\");\n    const key = Hex.parse(\"0000000000002000\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 3\", function(){\n    const expectedResult = \"1d1ca853ae7c0c5f\";\n    const message = Hex.parse(\"0000000000002000\");\n    const key = Hex.parse(\"0000000000000000\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 4\", function(){\n    const expectedResult = \"ac978c247863388f\";\n    const message = Hex.parse(\"3232323232323232\");\n    const key = Hex.parse(\"3232323232323232\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 5\", function(){\n    const expectedResult = \"3af1703d76442789\";\n    const message = Hex.parse(\"6464646464646464\");\n    const key = Hex.parse(\"6464646464646464\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 6\", function(){\n    const expectedResult = \"a020003c5554f34c\";\n    const message = Hex.parse(\"9696969696969696\");\n    const key = Hex.parse(\"9696969696969696\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test decrypt 1\", function(){\n    const expectedResult = \"0000000000000000\";\n    const encryptedMessage = Hex.parse(\"95a8d72813daa94d\");\n    const key = Hex.parse(\"8000000000000000\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 2\", function(){\n    const expectedResult = \"0000000000000000\";\n    const encryptedMessage = Hex.parse(\"1de5279dae3bed6f\");\n    const key = Hex.parse(\"0000000000002000\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 3\", function(){\n    const expectedResult = \"0000000000002000\";\n    const encryptedMessage = Hex.parse(\"1d1ca853ae7c0c5f\");\n    const key = Hex.parse(\"0000000000000000\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 4\", function(){\n    const expectedResult = \"3232323232323232\";\n    const encryptedMessage = Hex.parse(\"ac978c247863388f\");\n    const key = Hex.parse(\"3232323232323232\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 5\", function(){\n    const expectedResult = \"6464646464646464\";\n    const encryptedMessage = Hex.parse(\"3af1703d76442789\");\n    const key = Hex.parse(\"6464646464646464\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 6\", function(){\n    const expectedResult = \"9696969696969696\";\n    const encryptedMessage = Hex.parse(\"a020003c5554f34c\");\n    const key = Hex.parse(\"9696969696969696\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test multi part\", function(){\n    const expectedResult = DES.encrypt(\n      Hex.parse(\"00112233445566778899aabbccddeeff\"),\n      Hex.parse(\"0123456789abcdef\"),\n      {mode: ECB, padding: NoPadding},\n    ).cipherText.toString();\n    const key = Hex.parse(\"0123456789abcdef\");\n    const props = {mode: ECB, padding: NoPadding};\n    const des3 = DES.createEncryptor(key, props);\n    \n    const ciphertext1 = des3.process(Hex.parse('001122334455'));\n    const ciphertext2 = des3.process(Hex.parse('66778899aa'));\n    const ciphertext3 = des3.process(Hex.parse('bbccddeeff'));\n    const ciphertext4 = des3.finalize();\n    \n    expect(ciphertext1.concat(ciphertext2).concat(ciphertext3).concat(ciphertext4).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test input integrity\", function(){\n    const message = Hex.parse('00112233445566778899aabbccddeeff');\n    const key = Hex.parse('0001020304050607');\n    const iv = Hex.parse('08090a0b0c0d0e0f');\n    \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    const expectedIv = iv.toString();\n    \n    DES.encrypt(message, key, { iv });\n    \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n    expect(iv.toString()).to.be(expectedIv);\n  });\n  \n  it(\"test helper\", function(){\n    // Save original random method\n    const random = Word32Array.random;\n    \n    // Replace random method with one that returns a predictable value\n    Word32Array.random = function (nBytes) {\n      const words = [];\n      for(let i=0;i<nBytes;i+=4){\n        words.push([0x11223344]);\n      }\n      \n      return new Word32Array(words, nBytes);\n    };\n    \n    // Test\n    expect(DES.encrypt(\"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).cipherText.toString())\n      .to.be(DES.createEncryptor(SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).finalize(\"Hi There\").toString());\n    \n    expect(DES.encrypt(\"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).toString())\n      .to.be(SerializableCipher.encrypt(DES, \"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).toString());\n    \n    expect(DES.encrypt(\"Hi There\", \"Jefe\", {mode: ECB, padding: NoPadding}).toString())\n      .to.be(PasswordBasedCipher.encrypt(DES, \"Hi There\", \"Jefe\", {mode: ECB, padding: NoPadding}).toString());\n    \n    // Restore random method\n    Word32Array.random = random;\n  });\n});\n"]}
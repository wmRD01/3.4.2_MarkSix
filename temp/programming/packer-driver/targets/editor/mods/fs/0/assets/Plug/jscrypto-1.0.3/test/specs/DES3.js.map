{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/DES3.js"],"names":["expect","require","Word32Array","Hex","mode","ECB","pad","NoPadding","SHA256","SerializableCipher","PasswordBasedCipher","DES3","describe","it","expectedResult","message","parse","key","props","padding","encrypt","cipherText","toString","to","be","encryptedMessage","decrypt","des3","createEncryptor","ciphertext1","process","ciphertext2","ciphertext3","ciphertext4","finalize","concat","iv","expectedMessage","expectedKey","expectedIv","extendedKey","output1","output2","truncatedKey","random","nBytes","words","i","push","hash"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Word32Array,\n  Hex,\n  mode: {ECB},\n  pad: {NoPadding},\n  SHA256,\n  SerializableCipher,\n  PasswordBasedCipher,\n  DES3,\n} = require(\"../../test/build\");\n\ndescribe(\"des3\", function(){\n  it(\"test encrypt 1\", function(){\n    const expectedResult = \"95a8d72813daa94d\";\n    const message = Hex.parse(\"0000000000000000\");\n    const key = Hex.parse(\"800101010101010180010101010101018001010101010101\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 2\", function(){\n    const expectedResult = \"869efd7f9f265a09\";\n    const message = Hex.parse(\"0000000000000000\");\n    const key = Hex.parse(\"010101010101010201010101010101020101010101010102\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt 3\", function(){\n    const expectedResult = \"95f8a5e5dd31d900\";\n    const message = Hex.parse(\"8000000000000000\");\n    const key = Hex.parse(\"010101010101010101010101010101010101010101010101\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test encrypt 4\", function(){\n    const expectedResult = \"166b40b44aba4bd6\";\n    const encryptedMessage = Hex.parse(\"0000000000000001\");\n    const key = Hex.parse(\"010101010101010101010101010101010101010101010101\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 1\", function(){\n    const expectedResult = \"0000000000000000\";\n    const encryptedMessage = Hex.parse(\"95a8d72813daa94d\");\n    const key = Hex.parse(\"800101010101010180010101010101018001010101010101\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 2\", function(){\n    const expectedResult = \"0000000000000000\";\n    const encryptedMessage = Hex.parse(\"869efd7f9f265a09\");\n    const key = Hex.parse(\"010101010101010201010101010101020101010101010102\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 3\", function(){\n    const expectedResult = \"8000000000000000\";\n    const encryptedMessage = Hex.parse(\"95f8a5e5dd31d900\");\n    const key = Hex.parse(\"010101010101010101010101010101010101010101010101\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt 4\", function(){\n    const expectedResult = \"0000000000000001\";\n    const encryptedMessage = Hex.parse(\"166b40b44aba4bd6\");\n    const key = Hex.parse(\"010101010101010101010101010101010101010101010101\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(DES3.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test multi part\", function(){\n    const expectedResult = DES3.encrypt(\n      Hex.parse(\"00112233445566778899aabbccddeeff\"),\n      Hex.parse(\"000102030405060708090a0b0c0d0e0f1011121314151617\"),\n      {mode: ECB, padding: NoPadding},\n    ).cipherText.toString();\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f1011121314151617\");\n    const props = {mode: ECB, padding: NoPadding};\n    const des3 = DES3.createEncryptor(key, props);\n    \n    const ciphertext1 = des3.process(Hex.parse('001122334455'));\n    const ciphertext2 = des3.process(Hex.parse('66778899aa'));\n    const ciphertext3 = des3.process(Hex.parse('bbccddeeff'));\n    const ciphertext4 = des3.finalize();\n    \n    expect(ciphertext1.concat(ciphertext2).concat(ciphertext3).concat(ciphertext4).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test input integrity\", function(){\n    const message = Hex.parse('00112233445566778899aabbccddeeff');\n    const key = Hex.parse('000102030405060708090a0b0c0d0e0f1011121314151617');\n    const iv = Hex.parse('08090a0b0c0d0e0f');\n    \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    const expectedIv = iv.toString();\n    \n    DES3.encrypt(message, key, { iv });\n    \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n    expect(iv.toString()).to.be(expectedIv);\n  });\n  \n  it(\"test 64bit key\", function(){\n    const message = Hex.parse('00112233445566778899aabbccddeeff');\n    const key = Hex.parse('0011223344556677');\n    const extendedKey = Hex.parse('001122334455667700112233445566770011223344556677')\n  \n    const output1 = DES3.encrypt(message, key, { mode: ECB }).toString();\n    const output2 = DES3.encrypt(message, extendedKey, { mode: ECB }).toString();\n  \n    expect(output2).to.be(output1);\n  });\n  \n  it(\"test 128bit key\", function(){\n    const message = Hex.parse('00112233445566778899aabbccddeeff');\n    const key = Hex.parse('00112233445566778899aabbccddeeff');\n    const extendedKey = Hex.parse('00112233445566778899aabbccddeeff0011223344556677')\n    \n    const output1 = DES3.encrypt(message, key, { mode: ECB }).toString();\n    const output2 = DES3.encrypt(message, extendedKey, { mode: ECB }).toString();\n    \n    expect(output2).to.be(output1);\n  });\n  \n  it(\"test 256bit key\", function(){\n    const message = Hex.parse('00112233445566778899aabbccddeeff');\n    const key = Hex.parse('00112233445566778899aabbccddeeff0112233445566778899aabbccddeeff0');\n    const truncatedKey = Hex.parse('00112233445566778899aabbccddeeff0112233445566778')\n    \n    const output1 = DES3.encrypt(message, key, { mode: ECB }).toString();\n    const output2 = DES3.encrypt(message, truncatedKey, { mode: ECB }).toString();\n    \n    expect(output2).to.be(output1);\n  });\n  \n  it(\"test helper\", function(){\n    // Save original random method\n    const random = Word32Array.random;\n    \n    // Replace random method with one that returns a predictable value\n    Word32Array.random = function (nBytes) {\n      const words = [];\n      for(let i=0;i<nBytes;i+=4){\n        words.push([0x11223344]);\n      }\n      \n      return new Word32Array(words, nBytes);\n    };\n    \n    // Test\n    expect(DES3.encrypt(\"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).cipherText.toString())\n      .to.be(DES3.createEncryptor(SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).finalize(\"Hi There\").toString());\n    \n    expect(DES3.encrypt(\"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).toString())\n      .to.be(SerializableCipher.encrypt(DES3, \"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).toString());\n    \n    expect(DES3.encrypt(\"Hi There\", \"Jefe\", {mode: ECB, padding: NoPadding}).toString())\n      .to.be(PasswordBasedCipher.encrypt(DES3, \"Hi There\", \"Jefe\", {mode: ECB, padding: NoPadding}).toString());\n    \n    // Restore random method\n    Word32Array.random = random;\n  });\n});\n"]}
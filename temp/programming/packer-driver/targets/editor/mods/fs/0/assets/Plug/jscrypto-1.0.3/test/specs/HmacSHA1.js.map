{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/HmacSHA1.js"],"names":["expect","require","Hmac","SHA1","HmacSHA1","Hex","Word32Array","describe","it","expectedResult","message","key","parse","toString","to","be","hmac","update","finalize","expectedMessage","expectedKey","random","nSigBytes","keyClamped","clone","clamp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,gBAAM;AAACC,YAAAA,IAAD;AAAOC,YAAAA,IAAP;AAAaC,YAAAA,QAAb;AAAuBC,YAAAA,GAAvB;AAA4BC,YAAAA;AAA5B,cAA2CL,OAAO,CAAC,kBAAD,CAAxD;;AAEAM,UAAAA,QAAQ,CAAC,WAAD,EAAc,YAAU;AAC9BC,YAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAU;AAC5C,oBAAMC,cAAc,GAAG,0CAAvB;AACA,oBAAMC,OAAO,GAAG,UAAhB;AACA,oBAAMC,GAAG,GAAGN,GAAG,CAACO,KAAJ,CAAU,kCAAV,CAAZ;AACAZ,cAAAA,MAAM,CAACI,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR,CAAuBE,QAAvB,EAAD,CAAN,CAA0CC,EAA1C,CAA6CC,EAA7C,CAAgDN,cAAhD;AACD,aALC,CAAF;AAMAD,YAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAU;AAC5E,oBAAMC,cAAc,GAAG,0CAAvB;AACA,oBAAMC,OAAO,GAAG,8BAAhB;AACA,oBAAMC,GAAG,GAAG,MAAZ;AACAX,cAAAA,MAAM,CAACI,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR,CAAuBE,QAAvB,EAAD,CAAN,CAA0CC,EAA1C,CAA6CC,EAA7C,CAAgDN,cAAhD;AACD,aALC,CAAF;AAMAD,YAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAU;AACtD,oBAAMC,cAAc,GAAG,0CAAvB;AACA,oBAAMC,OAAO,GAAGL,GAAG,CAACO,KAAJ,CAAU,sGAAV,CAAhB;AACA,oBAAMD,GAAG,GAAGN,GAAG,CAACO,KAAJ,CAAU,kCAAV,CAAZ;AACAZ,cAAAA,MAAM,CAACI,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR,CAAuBE,QAAvB,EAAD,CAAN,CAA0CC,EAA1C,CAA6CC,EAA7C,CAAgDN,cAAhD;AACD,aALC,CAAF;AAMAD,YAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAU;AACvE,oBAAMC,cAAc,GAAG,0CAAvB;AACA,oBAAMC,OAAO,GAAG,4BAAhB;AACA,oBAAMC,GAAG,GAAG,GAAZ;AACAX,cAAAA,MAAM,CAACI,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR,CAAuBE,QAAvB,EAAD,CAAN,CAA0CC,EAA1C,CAA6CC,EAA7C,CAAgDN,cAAhD;AACD,aALC,CAAF;AAMAD,YAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAU;AACvE,oBAAMC,cAAc,GAAG,0CAAvB;AACA,oBAAMC,OAAO,GAAG,4BAAhB;AACA,oBAAMC,GAAG,GAAG,GAAZ;AACAX,cAAAA,MAAM,CAACI,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR,CAAuBE,QAAvB,EAAD,CAAN,CAA0CC,EAA1C,CAA6CC,EAA7C,CAAgDN,cAAhD;AACD,aALC,CAAF;AAOAD,YAAAA,EAAE,CAAC,QAAD,EAAW,YAAU;AACrB,oBAAMQ,IAAI,GAAG,IAAId,IAAJ,CAAS,IAAIC,IAAJ,EAAT,EAAqBE,GAAG,CAACO,KAAJ,CAAU,kCAAV,CAArB,CAAb;AACAI,cAAAA,IAAI,CAACC,MAAL,CAAYZ,GAAG,CAACO,KAAJ,CAAU,sCAAV,CAAZ;AACAI,cAAAA,IAAI,CAACC,MAAL,CAAYZ,GAAG,CAACO,KAAJ,CAAU,kCAAV,CAAZ;AACAI,cAAAA,IAAI,CAACC,MAAL,CAAYZ,GAAG,CAACO,KAAJ,CAAU,kCAAV,CAAZ;AAEA,oBAAMF,OAAO,GAAGL,GAAG,CAACO,KAAJ,CAAU,sGAAV,CAAhB;AACA,oBAAMD,GAAG,GAAGN,GAAG,CAACO,KAAJ,CAAU,kCAAV,CAAZ;AACAZ,cAAAA,MAAM,CAACI,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR,CAAuBE,QAAvB,EAAD,CAAN,CAA0CC,EAA1C,CAA6CC,EAA7C,CAAgDC,IAAI,CAACE,QAAL,GAAgBL,QAAhB,EAAhD;AACD,aATC,CAAF;AAWAL,YAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAU;AAC9B,oBAAME,OAAO,GAAG,IAAIJ,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAhB;AACA,oBAAMK,GAAG,GAAG,IAAIL,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAZ;AAEA,oBAAMa,eAAe,GAAGT,OAAO,CAACG,QAAR,EAAxB;AACA,oBAAMO,WAAW,GAAGT,GAAG,CAACE,QAAJ,EAApB;AAEAT,cAAAA,QAAQ,CAACM,OAAD,EAAUC,GAAV,CAAR;AAEAX,cAAAA,MAAM,CAACU,OAAO,CAACG,QAAR,EAAD,CAAN,CAA2BC,EAA3B,CAA8BC,EAA9B,CAAiCI,eAAjC;AACAnB,cAAAA,MAAM,CAACW,GAAG,CAACE,QAAJ,EAAD,CAAN,CAAuBC,EAAvB,CAA0BC,EAA1B,CAA6BK,WAA7B;AACD,aAXC,CAAF;AAaAZ,YAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAU;AACnC,oBAAMG,GAAG,GAAGL,WAAW,CAACe,MAAZ,CAAmB,CAAnB,CAAZ;AACAV,cAAAA,GAAG,CAACW,SAAJ,GAAgB,CAAhB;AAEA,oBAAMC,UAAU,GAAGZ,GAAG,CAACa,KAAJ,EAAnB;AACAD,cAAAA,UAAU,CAACE,KAAX;AAEAzB,cAAAA,MAAM,CAACI,QAAQ,CAAC,SAAD,EAAYO,GAAZ,CAAR,CAAyBE,QAAzB,EAAD,CAAN,CAA4CC,EAA5C,CAA+CC,EAA/C,CAAkDX,QAAQ,CAAC,SAAD,EAAYmB,UAAZ,CAAR,CAAgCV,QAAhC,EAAlD;AACD,aARC,CAAF;AASD,WAjEO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {Hmac, SHA1, HmacSHA1, Hex, Word32Array} = require(\"../../test/build\");\n\ndescribe(\"hmac-sha1\", function(){\n  it(\"digest 'Hi There' as expected\", function(){\n    const expectedResult = \"675b0b3a1b4ddf4e124872da6c2f632bfed957e9\";\n    const message = \"Hi There\";\n    const key = Hex.parse(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\");\n    expect(HmacSHA1(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest 'what do ya want for nothing?' with 'Jefe' as expected\", function(){\n    const expectedResult = \"effcdf6ae5eb2fa2d27416d5f184df9c259a7c79\";\n    const message = \"what do ya want for nothing?\";\n    const key = \"Jefe\";\n    expect(HmacSHA1(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest long message and key as expected\", function(){\n    const expectedResult = \"d730594d167e35d5956fd8003d0db3d3f46dc7bb\";\n    const message = Hex.parse(\"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\");\n    const key = Hex.parse(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    expect(HmacSHA1(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' with 'A' as expected\", function(){\n    const expectedResult = \"1d6e52cfbe7dca2daecb476d0739b4b62e79df87\";\n    const message = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const key = \"A\";\n    expect(HmacSHA1(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest 'abcdefghijklmnopqrstuvwxyz' with 'A' as expected\", function(){\n    const expectedResult = \"eb429abff2eb3fa35f2402cadcd716434432ab89\";\n    const message = \"abcdefghijklmnopqrstuvwxyz\";\n    const key = \"A\";\n    expect(HmacSHA1(message, key).toString()).to.be(expectedResult);\n  });\n  \n  it(\"update\", function(){\n    const hmac = new Hmac(new SHA1(), Hex.parse(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\n    hmac.update(Hex.parse('dddddddddddddddddddddddddddddddddddd'));\n    hmac.update(Hex.parse('dddddddddddddddddddddddddddddddd'));\n    hmac.update(Hex.parse('dddddddddddddddddddddddddddddddd'));\n    \n    const message = Hex.parse(\"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\");\n    const key = Hex.parse(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    expect(HmacSHA1(message, key).toString()).to.be(hmac.finalize().toString());\n  });\n  \n  it(\"input integrity\", function(){\n    const message = new Word32Array([0x12345678]);\n    const key = new Word32Array([0x12345678]);\n    \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    \n    HmacSHA1(message, key);\n    \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n  });\n  \n  it(\"respect key sigBytes\", function(){\n    const key = Word32Array.random(8);\n    key.nSigBytes = 4;\n    \n    const keyClamped = key.clone();\n    keyClamped.clamp();\n    \n    expect(HmacSHA1(\"Message\", key).toString()).to.be(HmacSHA1(\"Message\", keyClamped).toString());\n  });\n});\n"]}
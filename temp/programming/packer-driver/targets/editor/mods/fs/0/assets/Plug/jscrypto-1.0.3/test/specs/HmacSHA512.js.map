{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/HmacSHA512.js"],"names":["expect","require","Hmac","SHA512","HmacSHA512","Hex","Word32Array","describe","it","expectedResult","message","key","parse","toString","to","be","hmac","update","finalize","expectedMessage","expectedKey","random","nSigBytes","keyClamped","clone","clamp"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {Hmac, SHA512, HmacSHA512, Hex, Word32Array} = require(\"../../test/build\");\n\ndescribe(\"hmac-sha512\", function(){\n  it(\"digest 'Hi There' as expected\", function(){\n    const expectedResult = \"7641c48a3b4aa8f887c07b3e83f96affb89c978fed8c96fcbbf4ad596eebfe496f9f16da6cd080ba393c6f365ad72b50d15c71bfb1d6b81f66a911786c6ce932\";\n    const message = \"Hi There\";\n    const key = Hex.parse(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\");\n    expect(HmacSHA512(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest 'what do ya want for nothing?' with 'Jefe' as expected\", function(){\n    const expectedResult = \"164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737\";\n    const message = \"what do ya want for nothing?\";\n    const key = \"Jefe\";\n    expect(HmacSHA512(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest long message and key as expected\", function(){\n    const expectedResult = \"ad9b5c7de72693737cd5e9d9f41170d18841fec1201c1c1b02e05cae116718009f771cad9946ddbf7e3cde3e818d9ae85d91b2badae94172d096a44a79c91e86\";\n    const message = Hex.parse(\"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\");\n    const key = Hex.parse(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    expect(HmacSHA512(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' with 'A' as expected\", function(){\n    const expectedResult = \"a303979f7c94bb39a8ab6ce05cdbe28f0255da8bb305263e3478ef7e855f0242729bf1d2be55398f14da8e63f0302465a8a3f76c297bd584ad028d18ed7f0195\";\n    const message = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const key = \"A\";\n    expect(HmacSHA512(message, key).toString()).to.be(expectedResult);\n  });\n  it(\"digest 'abcdefghijklmnopqrstuvwxyz' with 'A' as expected\", function(){\n    const expectedResult = \"8c2d56f7628325e62124c0a870ad98d101327fc42696899a06ce0d7121454022fae597e42c25ac3a4c380fd514f553702a5b0afaa9b5a22050902f024368e9d9\";\n    const message = \"abcdefghijklmnopqrstuvwxyz\";\n    const key = \"A\";\n    expect(HmacSHA512(message, key).toString()).to.be(expectedResult);\n  });\n  \n  it(\"update\", function(){\n    const hmac = new Hmac(new SHA512(), Hex.parse(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\n    hmac.update(Hex.parse('dddddddddddddddddddddddddddddddddddd'));\n    hmac.update(Hex.parse('dddddddddddddddddddddddddddddddd'));\n    hmac.update(Hex.parse('dddddddddddddddddddddddddddddddd'));\n    \n    const message = Hex.parse(\"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\");\n    const key = Hex.parse(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n    expect(HmacSHA512(message, key).toString()).to.be(hmac.finalize().toString());\n  });\n  \n  it(\"input integrity\", function(){\n    const message = new Word32Array([0x12345678]);\n    const key = new Word32Array([0x12345678]);\n    \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    \n    HmacSHA512(message, key);\n    \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n  });\n  \n  it(\"respect key sigBytes\", function(){\n    const key = Word32Array.random(8);\n    key.nSigBytes = 4;\n    \n    const keyClamped = key.clone();\n    keyClamped.clamp();\n    \n    expect(HmacSHA512(\"Message\", key).toString()).to.be(HmacSHA512(\"Message\", keyClamped).toString());\n  });\n});\n"]}
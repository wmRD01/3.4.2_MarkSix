{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/RC4.js"],"names":["expect","require","Word32Array","Hex","MD5","SerializableCipher","PasswordBasedCipher","RC4","describe","it","expectedResult","message","parse","key","props","encrypt","cipherText","toString","to","be","rabbit","createEncryptor","ciphertext1","process","ciphertext2","ciphertext3","ciphertext4","finalize","concat","expectedMessage","expectedKey","random","nBytes","words","i","push","hash"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Word32Array,\n  Hex,\n  MD5,\n  SerializableCipher,\n  PasswordBasedCipher,\n  RC4,\n} = require(\"../../test/build\");\n\ndescribe(\"rc4\", function(){\n  it(\"test vector1\", function(){\n    const expectedResult = \"7494c2e7104b0879\";\n    const message = Hex.parse(\"0000000000000000\");\n    const key = Hex.parse(\"0123456789abcdef\");\n    const props = {};\n    expect(RC4.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector2\", function(){\n    const expectedResult = \"f13829c9de\";\n    const message = Hex.parse(\"dcee4cf92c\");\n    const key = Hex.parse(\"618a63d2fb\");\n    const props = {};\n    expect(RC4.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test multi part\", function(){\n    const expectedResult = \"7494c2e7104b0879\";\n    const key = Hex.parse(\"0123456789abcdef\");\n    const rabbit = RC4.createEncryptor(key);\n    \n    const ciphertext1 = rabbit.process(Hex.parse('00000000'));\n    const ciphertext2 = rabbit.process(Hex.parse('0000'));\n    const ciphertext3 = rabbit.process(Hex.parse('0000'));\n    const ciphertext4 = rabbit.finalize();\n    \n    expect(ciphertext1.concat(ciphertext2).concat(ciphertext3).concat(ciphertext4).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test input integrity\", function(){\n    const message = Hex.parse('0000000000000000');\n    const key = Hex.parse('0123456789abcdef');\n    \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    \n    RC4.encrypt(message, key);\n    \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n  });\n  \n  it(\"test helper\", function(){\n    // Save original random method\n    const random = Word32Array.random;\n    \n    // Replace random method with one that returns a predictable value\n    Word32Array.random = function (nBytes) {\n      const words = [];\n      for(let i=0;i<nBytes;i+=4){\n        words.push([0x11223344]);\n      }\n      \n      return new Word32Array(words, nBytes);\n    };\n    \n    // Test\n    expect(RC4.encrypt(\"Hi There\", MD5.hash(\"Jefe\")).cipherText.toString())\n      .to.be(RC4.createEncryptor(MD5.hash(\"Jefe\")).finalize(\"Hi There\").toString());\n    \n    expect(RC4.encrypt(\"Hi There\", MD5.hash(\"Jefe\")).toString())\n      .to.be(SerializableCipher.encrypt(RC4, \"Hi There\", MD5.hash(\"Jefe\")).toString());\n    \n    expect(RC4.encrypt(\"Hi There\", \"Jefe\").toString())\n      .to.be(PasswordBasedCipher.encrypt(RC4, \"Hi There\", \"Jefe\").toString());\n    \n    // Restore random method\n    Word32Array.random = random;\n  });\n});\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/Rabbit.js"],"names":["expect","require","Word32Array","Hex","MD5","SerializableCipher","PasswordBasedCipher","Rabbit","describe","it","expectedResult","message","parse","key","props","encrypt","cipherText","toString","to","be","iv","rabbit","createEncryptor","ciphertext1","process","ciphertext2","ciphertext3","ciphertext4","finalize","concat","expectedMessage","expectedKey","expectedIv","random","nBytes","words","i","push","hash"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Word32Array,\n  Hex,\n  MD5,\n  SerializableCipher,\n  PasswordBasedCipher,\n  Rabbit,\n} = require(\"../../test/build\");\n\ndescribe(\"rabbit\", function(){\n  it(\"test vector1\", function(){\n    const expectedResult = \"02f74a1c26456bf5ecd6a536f05457b1\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"00000000000000000000000000000000\");\n    const props = {};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector2\", function(){\n    const expectedResult = \"3d02e0c730559112b473b790dee018df\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"c21fcf3881cd5ee8628accb0a9890df8\");\n    const props = {};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector3\", function(){\n    const expectedResult = \"a3a97abb80393820b7e50c4abb53823d\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"1d272c6a2d8e3dfcac14056b78d633a0\");\n    const props = {};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector4\", function(){\n    const expectedResult = \"75d186d6bc6905c64f1b2dfdd51f7bfc\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"0053a6f94c9ff24598eb3e91e4378add\");\n    const props = {iv: Hex.parse(\"0d74db42a91077de\")};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector5\", function(){\n    const expectedResult = \"476e2750c73856c93563b5f546f56a6a\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"0558abfe51a4f74a9df04396e93c8fe2\");\n    const props = {iv: Hex.parse(\"167de44bb21980e7\")};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector6\", function(){\n    const expectedResult = \"921fcf4983891365a7dc901924b5e24b\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"0a5db00356a9fc4fa2f5489bee4194e7\");\n    const props = {iv: Hex.parse(\"1f86ed54bb2289f0\")};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test vector7\", function(){\n    const expectedResult = \"613cb0ba96aff6cacf2a459a102a7f78\";\n    const message = Hex.parse(\"00000000000000000000000000000000\");\n    const key = Hex.parse(\"0f62b5085bae0154a7fa4da0f34699ec\");\n    const props = {iv: Hex.parse(\"288ff65dc42b92f9\")};\n    expect(Rabbit.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test multi part\", function(){\n    const expectedResult = \"02f74a1c26456bf5ecd6a536f05457b1\";\n    const key = Hex.parse(\"00000000000000000000000000000000\");\n    const rabbit = Rabbit.createEncryptor(key);\n    \n    const ciphertext1 = rabbit.process(Hex.parse('000000000000'));\n    const ciphertext2 = rabbit.process(Hex.parse('0000000000'));\n    const ciphertext3 = rabbit.process(Hex.parse('0000000000'));\n    const ciphertext4 = rabbit.finalize();\n    \n    expect(ciphertext1.concat(ciphertext2).concat(ciphertext3).concat(ciphertext4).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test input integrity\", function(){\n    const message = Hex.parse('00000000000000000000000000000000');\n    const key = Hex.parse('00000000000000000000000000000000');\n    const iv = Hex.parse('0000000000000000');\n    \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    const expectedIv = iv.toString();\n    \n    Rabbit.encrypt(message, key, { iv });\n    \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n    expect(iv.toString()).to.be(expectedIv);\n  });\n  \n  it(\"test helper\", function(){\n    // Save original random method\n    const random = Word32Array.random;\n    \n    // Replace random method with one that returns a predictable value\n    Word32Array.random = function (nBytes) {\n      const words = [];\n      for(let i=0;i<nBytes;i+=4){\n        words.push([0x11223344]);\n      }\n      \n      return new Word32Array(words, nBytes);\n    };\n    \n    // Test\n    expect(Rabbit.encrypt(\"Hi There\", MD5.hash(\"Jefe\")).cipherText.toString())\n      .to.be(Rabbit.createEncryptor(MD5.hash(\"Jefe\")).finalize(\"Hi There\").toString());\n    \n    expect(Rabbit.encrypt(\"Hi There\", MD5.hash(\"Jefe\")).toString())\n      .to.be(SerializableCipher.encrypt(Rabbit, \"Hi There\", MD5.hash(\"Jefe\")).toString());\n    \n    expect(Rabbit.encrypt(\"Hi There\", \"Jefe\").toString())\n      .to.be(PasswordBasedCipher.encrypt(Rabbit, \"Hi There\", \"Jefe\").toString());\n    \n    // Restore random method\n    Word32Array.random = random;\n  });\n});\n"]}
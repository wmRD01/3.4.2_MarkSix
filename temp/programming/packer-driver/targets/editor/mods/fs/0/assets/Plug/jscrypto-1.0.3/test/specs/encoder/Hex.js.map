{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/encoder/Hex.js"],"names":["expect","require","Hex","Word32Array","describe","it","expectedValue","stringify","to","be","toString","parse","throwException"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,gBAAM;AACJC,YAAAA,GADI;AAEJC,YAAAA;AAFI,cAGFF,OAAO,CAAC,qBAAD,CAHX;;AAKAG,UAAAA,QAAQ,CAAC,aAAD,EAAgB,YAAU;AAChCC,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,aAAa,GAAG,UAAtB;AACAN,cAAAA,MAAM,CAACE,GAAG,CAACK,SAAJ,CAAc,IAAIJ,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAd,CAAD,CAAN,CAAsDK,EAAtD,CAAyDC,EAAzD,CAA4DH,aAA5D;AACD,aAHC,CAAF;AAKAD,YAAAA,EAAE,CAAC,YAAD,EAAe,YAAU;AACzB,oBAAMC,aAAa,GAAG,IAAIH,WAAJ,CAAgB,CAAC,UAAD,CAAhB,EAA8BO,QAA9B,EAAtB;AACAV,cAAAA,MAAM,CAACE,GAAG,CAACS,KAAJ,CAAU,UAAV,EAAsBD,QAAtB,EAAD,CAAN,CAAyCF,EAAzC,CAA4CC,EAA5C,CAA+CH,aAA/C;AACD,aAHC,CAAF;AAKAD,YAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAU;AACzDL,cAAAA,MAAM,CAAC,MAAME,GAAG,CAACS,KAAJ,CAAU,IAAV,CAAP,CAAN,CAA8BH,EAA9B,CAAiCI,cAAjC,CAAgD,0BAAhD;AACD,aAFC,CAAF;AAGD,WAdO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Hex,\n  Word32Array,\n} = require(\"../../../test/build\");\n\ndescribe(\"encoder/Hex\", function(){\n  it(\"test stringify\", function(){\n    const expectedValue = \"12345678\";\n    expect(Hex.stringify(new Word32Array([0x12345678],))).to.be(expectedValue);\n  });\n  \n  it(\"test parse\", function(){\n    const expectedValue = new Word32Array([0x12345678]).toString();\n    expect(Hex.parse(\"12345678\").toString()).to.be(expectedValue);\n  });\n  \n  it(\"raises error on parsing invalid Hex string\", function(){\n    expect(() => Hex.parse(\"1g\")).to.throwException(/^Invalid Hex string: 1g$/);\n  });\n});\n"]}
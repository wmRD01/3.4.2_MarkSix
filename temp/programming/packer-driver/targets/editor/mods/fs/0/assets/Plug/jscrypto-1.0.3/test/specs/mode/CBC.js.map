{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/mode/CBC.js"],"names":["expect","require","Word32Array","CBC","NoPadding","AES","describe","data","message","key","iv","it","expected","clone","aes","createEncryptor","i","words","encryptBlock","actual","encrypt","mode","padding","cipherText","toString","to","be","encrypted","decrypted","decrypt"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {Word32Array} = require(\"../../../test/build/lib\");\nconst {CBC} = require(\"../../../test/build/mode/CBC\");\nconst {NoPadding} = require(\"../../../test/build/pad/NoPadding\");\nconst {AES} = require(\"../../../test/build/AES\");\n\ndescribe(\"mode/CBC\", function(){\n  const data = {};\n  data.message = new Word32Array([\n    0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f,\n    0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f\n  ]);\n  data.key = new Word32Array([0x20212223, 0x24252627, 0x28292a2b, 0x2c2d2e2f]);\n  data.iv = new Word32Array([0x30313233, 0x34353637, 0x38393a3b, 0x3c3d3e3f]);\n  \n  it(\"test encryptor\", function(){\n    // Compute expected\n    const expected = data.message.clone();\n    const aes = AES.createEncryptor(data.key);\n  \n    // First block XORed with IV, then encrypted\n    for(let i=0;i<4;i++) {\n      expected.words[i] ^= data.iv.words[i];\n    }\n    aes.encryptBlock(expected.words, 0);\n  \n    // Subsequent blocks XORed with previous crypted block, then encrypted\n    for(let i=4;i<8;i++){\n      expected.words[i] ^= expected.words[i - 4];\n    }\n    aes.encryptBlock(expected.words, 4);\n  \n    // Compute actual\n    const actual = AES.encrypt(data.message, data.key, { iv: data.iv, mode: CBC, padding: NoPadding }).cipherText;\n  \n    // Test\n    expect(actual.toString()).to.be(expected.toString());\n  });\n  \n  it(\"test decryptor\", function(){\n    const encrypted = AES.encrypt(data.message, data.key, { iv: data.iv, mode: CBC, padding: NoPadding });\n    const decrypted = AES.decrypt(encrypted, data.key, { iv: data.iv, mode: CBC, padding: NoPadding });\n  \n    expect(decrypted.toString()).to.be(data.message.toString());\n  });\n});\n"]}
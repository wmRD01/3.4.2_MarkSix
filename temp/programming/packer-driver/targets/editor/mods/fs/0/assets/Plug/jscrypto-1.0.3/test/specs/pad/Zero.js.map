{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/pad/Zero.js"],"names":["expect","require","Word32Array","Zero","describe","it","data","pad","toString","to","be","unpad"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,gBAAM;AAACC,YAAAA;AAAD,cAAgBD,OAAO,CAAC,yBAAD,CAA7B;;AACA,gBAAM;AAACE,YAAAA;AAAD,cAASF,OAAO,CAAC,8BAAD,CAAtB;;AAEAG,UAAAA,QAAQ,CAAC,UAAD,EAAa,YAAU;AAC7BC,YAAAA,EAAE,CAAC,UAAD,EAAa,YAAU;AACvB,oBAAMC,IAAI,GAAG,IAAIJ,WAAJ,CAAgB,CAAC,UAAD,CAAhB,EAA8B,CAA9B,CAAb;AACAC,cAAAA,IAAI,CAACI,GAAL,CAASD,IAAT,EAAe,CAAf;AAEAN,cAAAA,MAAM,CAACM,IAAI,CAACE,QAAL,EAAD,CAAN,CAAwBC,EAAxB,CAA2BC,EAA3B,CAA8B,IAAIR,WAAJ,CAAgB,CAAC,UAAD,EAAa,UAAb,CAAhB,EAA0CM,QAA1C,EAA9B;AACD,aALC,CAAF;AAOAH,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,oBAAMC,IAAI,GAAG,IAAIJ,WAAJ,CAAgB,CAAC,UAAD,EAAa,UAAb,CAAhB,EAA0C,CAA1C,CAAb;AACAC,cAAAA,IAAI,CAACI,GAAL,CAASD,IAAT,EAAe,CAAf;AAEAN,cAAAA,MAAM,CAACM,IAAI,CAACE,QAAL,EAAD,CAAN,CAAwBC,EAAxB,CAA2BC,EAA3B,CAA8B,IAAIR,WAAJ,CAAgB,CAAC,UAAD,EAAa,UAAb,CAAhB,EAA0CM,QAA1C,EAA9B;AACD,aALC,CAAF;AAOAH,YAAAA,EAAE,CAAC,YAAD,EAAe,YAAU;AACzB,oBAAMC,IAAI,GAAG,IAAIJ,WAAJ,CAAgB,CAAC,UAAD,EAAa,UAAb,CAAhB,CAAb;AACAC,cAAAA,IAAI,CAACQ,KAAL,CAAWL,IAAX;AAEAN,cAAAA,MAAM,CAACM,IAAI,CAACE,QAAL,EAAD,CAAN,CAAwBC,EAAxB,CAA2BC,EAA3B,CAA8B,IAAIR,WAAJ,CAAgB,CAAC,UAAD,CAAhB,EAA8B,CAA9B,EAAiCM,QAAjC,EAA9B;AACD,aALC,CAAF;AAMD,WArBO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {Word32Array} = require(\"../../../test/build/lib\");\nconst {Zero} = require(\"../../../test/build/pad/Zero\");\n\ndescribe(\"pad/Zero\", function(){\n  it(\"test pad\", function(){\n    const data = new Word32Array([0xdddddd00], 3);\n    Zero.pad(data, 2);\n    \n    expect(data.toString()).to.be(new Word32Array([0xdddddd00, 0x00000000]).toString());\n  });\n  \n  it(\"test pad clamp\", function(){\n    const data = new Word32Array([0xdddddddd, 0xdddddddd], 3);\n    Zero.pad(data, 2);\n    \n    expect(data.toString()).to.be(new Word32Array([0xdddddd00, 0x00000000]).toString());\n  });\n  \n  it(\"test unpad\", function(){\n    const data = new Word32Array([0xdddddd00, 0x00000000]);\n    Zero.unpad(data);\n    \n    expect(data.toString()).to.be(new Word32Array([0xdddddd00], 3).toString());\n  });\n});\n"]}
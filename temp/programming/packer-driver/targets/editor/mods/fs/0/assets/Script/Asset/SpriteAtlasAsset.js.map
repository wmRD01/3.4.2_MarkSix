{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Asset/SpriteAtlasAsset.ts"],"names":["SpriteAtlasAsset","assetManager","error","resources","SpriteAtlas","Image","EvnetType","GameEvent","EventMng","Map","loadAsset","formatArr","index","filePath","length","push","typePath","load","err","data","forEach","_SpriteAtlas","getSpriteFrames","_spriteFrame","set","name","checkAssetState","urlPath","URL","loadRemote","plist","message","image","atlas","transformTextureToSpriteAtlas","loadLogo","lang","console","log","getInstance","mapEvnet","get","Pulic","emit","SetLogo"],"mappings":"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","sourcesContent":["import { assetManager, error, ImageAsset, JsonAsset, log, resources, SpriteAtlas, SpriteFrame, Texture2D } from \"cc\";\r\nimport Image from \"../../Plug/Image\";\r\nimport { EvnetType } from \"../Enum/EvnetType\";\r\n\r\nimport { GameEvent } from \"../Enum/GameEvent\";\r\nimport IAsset from \"../Interface/IAsset\";\r\nimport EventMng from \"../Manager/EventMng\";\r\n\r\nclass SpriteAtlasAsset implements IAsset {\r\n    data: Map<string, SpriteFrame> = new Map();\r\n    checkAssetState: boolean;\r\n    typePath: string = \"SpriteAtlas/\";\r\n    filePath: string[] = [\r\n    ];\r\n    urlPath: string[] = [\r\n        \"http://10.20.13.202/JaiJaiTest/Remote/planets\",\r\n    ];\r\n\r\n\r\n    loadAsset() {\r\n\r\n        let formatArr = []\r\n        for (let index = 0; index < this.filePath.length; index++) {\r\n            formatArr.push(this.typePath + this.filePath[index])\r\n        }\r\n\r\n        resources.load(formatArr, SpriteAtlas, (err, data: Array<SpriteAtlas>) => {\r\n            // console.log(err);\r\n            // console.log(data);\r\n\r\n            data.forEach(_SpriteAtlas => {\r\n                _SpriteAtlas.getSpriteFrames().forEach(_spriteFrame => {\r\n                    // console.log(_spriteFrame);\r\n                    this.data.set(_spriteFrame.name, _spriteFrame)\r\n                })\r\n            });\r\n            // console.log(this.data);\r\n\r\n            this.checkAssetState = true;\r\n\r\n        })\r\n        return this\r\n        //遠端測試\r\n        // let URL = \"http://10.20.13.202/JaiJaiTest/Remote/planets\"\r\n        // assetManager.loadRemote(URL + \".plist\", (err, plist: JsonAsset) => {\r\n        //     if (err) {\r\n        //         error(err.message)\r\n        //         return\r\n        //     }\r\n        //     assetManager.loadRemote(URL + \".png\", (err, image: ImageAsset) => {\r\n        //         if (err) {\r\n        //             error(err.message)\r\n        //             return\r\n        //         }\r\n        //         let atlas = Image.transformTextureToSpriteAtlas(plist, image)\r\n        //         atlas.getSpriteFrames().forEach(_spriteFrame => {\r\n        //             console.log(_spriteFrame);\r\n        //             _Asset.set(_spriteFrame.name, _spriteFrame)\r\n        //         })\r\n        //         this.checkAssetState = true;\r\n        //     })\r\n        // })\r\n        for (let index = 0; index < this.urlPath.length; index++) {\r\n            let URL = this.urlPath[index]\r\n            assetManager.loadRemote(URL + \".plist\", (err, plist: JsonAsset) => {\r\n                if (err) {\r\n                    error(err.message)\r\n                    return\r\n                }\r\n                assetManager.loadRemote(URL + \".png\", (err, image: ImageAsset) => {\r\n                    if (err) {\r\n                        error(err.message)\r\n                        return\r\n                    }\r\n                    let atlas = Image.transformTextureToSpriteAtlas(plist, image)\r\n                    atlas.getSpriteFrames().forEach(_spriteFrame => {\r\n                        // console.log(_spriteFrame);\r\n                        // _Asset.set(_spriteFrame.name, _spriteFrame)\r\n                    })\r\n                    // this.checkAssetState = true;\r\n                })\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n    loadLogo(lang: string) {\r\n        let formatArr = []\r\n        formatArr.push(this.typePath + \"Lang/\" + lang)\r\n        resources.load(formatArr, SpriteAtlas, (err, data: Array<SpriteAtlas>) => {\r\n            // console.log(err);\r\n            // console.log(data);\r\n\r\n            data.forEach(_SpriteAtlas => {\r\n                _SpriteAtlas.getSpriteFrames().forEach(_spriteFrame => {\r\n                    // console.log(_spriteFrame);\r\n                    this.data.set(_spriteFrame.name, _spriteFrame)\r\n                })\r\n            });\r\n            // CheckLoading.getInstance.changeState(CheckLoadingType.isLogo, true)\r\n            console.log(this.data);\r\n\r\n            EventMng.getInstance.mapEvnet.get(EvnetType.Pulic).emit(GameEvent.SetLogo, this.data.get(\"logo\"))\r\n        })\r\n        return this\r\n    }\r\n\r\n}\r\nexport default new SpriteAtlasAsset();"]}
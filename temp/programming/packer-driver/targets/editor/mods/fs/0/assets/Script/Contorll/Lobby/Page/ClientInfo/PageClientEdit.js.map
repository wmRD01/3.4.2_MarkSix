{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/ClientInfo/PageClientEdit.ts"],"names":["Button","Node","Sprite","_decorator","NotificationType","LobbyStateEvent","EventMng","BaseComponent","Player","RequestGPG","MyEditBox","PublicModel","CreateFileSprite","PanelLoading","ccclass","property","PageClientEdit","onLoad","getInstance","mapEvnet","get","Panel","on","ActivePanelClientEdit","activePanel","ChangePlayerPicture","onChangePlayerPicture","hide","onEnable","editEmail","string","editNicName","editVerificationCode","isChangePicture","isCheckCertifiedEmall","isCheckNicename","isCheckuploadAvatar","imageFile","gpgInfo","data","email","undefined","activeVerificationCode","motifyNickName","Promise","resolve","reject","body","Body","NeedToken","Nickname","nickname","sign","convertSign","console","log","Request","setMethod","Method","POST","setBody","JSON","stringify","setToken","gpgToken","fetchData","APIUrl","playAPI","API","responseNickname","bind","response","Status","Code","onValidateContactInfo","checkEmail","NotNeedToken","ValidateContactInfo","Email","ids","responseValidateContactInfo","sendBody","SendRegisterVerification","responseSendRegisterVerification","certifiedEmall","CertifiedEmail","verifyCode","CertifiedEmall","responseCertifiedEmall","uploadAvatar","UploadAvatar","File","responseUploadAvatar","onCheckMotify","checkName","checkVerification","instance","openLoading","emit","UpDatePlayer","spritePlayer","spriteFrame","onActivePanel","bool","show","onSelectPhoto","_spriteFrame","file","e","customEventData","ActivePanelClientInfo","spriteBG","node","active","NodeEmail","NodeVerificationCode","btnVerificationCode","btnsFunction","position","to2DConvertOtherNodeSpaceAR","checkEmailRegular","_string","strEmail","emailRule","search","str","length","error","test","checkNicknameCondition"],"mappings":"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","sourcesContent":["import { Button, EventTouch, Label, Node, Sprite, SpriteFrame, _decorator } from 'cc';\r\nimport { NotificationType } from '../../../../Enum/NotificationType';\r\nimport { LobbyStateEvent } from '../../../../Enum/LobbyStateEvent';\r\nimport EventMng from '../../../../Manager/EventMng';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport Player from '../../../../Model/Player';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport { MyEditBox } from '../../../../../Plug/MyEditBox';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport CreateFileSprite from '../../../../Model/CreateFileSprite';\r\n\r\nimport PanelLoading from '../../../NoClearNode/PanelLoading';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PageClientEdit')\r\nexport default class PageClientEdit extends BaseComponent {\r\n    @property(MyEditBox)\r\n    editNicName: MyEditBox;\r\n    @property(MyEditBox)\r\n    editEmail: MyEditBox;\r\n    @property(MyEditBox)\r\n    editVerificationCode: MyEditBox;\r\n    @property(Node)\r\n    NodeEmail: Node\r\n    @property(Node)\r\n    NodeVerificationCode: Node\r\n\r\n    @property(Button)\r\n    btnVerificationCode: Button\r\n\r\n    @property(Node)\r\n    btnsFunction: Node\r\n    @property(Sprite)\r\n    spritePlayer: Sprite\r\n    isChangePicture: boolean = false\r\n    isCheckCertifiedEmall: boolean = false;\r\n    isCheckNicename: boolean = false;\r\n    isCheckuploadAvatar: boolean = false;\r\n    imageFile: File = null\r\n\r\n    onLoad() {\r\n        super.onLoad()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).on(LobbyStateEvent.ActivePanelClientEdit, this.activePanel, this)\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).on(LobbyStateEvent.ChangePlayerPicture, this.onChangePlayerPicture, this)\r\n        this.hide()\r\n\r\n    }\r\n\r\n    onEnable() {\r\n        this.editEmail.string = \"\";\r\n        this.editNicName.string = \"\";\r\n        this.editVerificationCode.string = \"\";\r\n        // this.onValidateContactInfo()\r\n        this.isChangePicture = false;\r\n        this.isCheckCertifiedEmall = false;\r\n        this.isCheckNicename = false;\r\n        this.isCheckuploadAvatar = false;\r\n        this.imageFile = null;\r\n        if (Player.getInstance.gpgInfo.data.email == \"\" || Player.getInstance.gpgInfo.data.email == null || Player.getInstance.gpgInfo.data.email == undefined)\r\n            this.activeVerificationCode(true)\r\n        else\r\n            this.activeVerificationCode(false)\r\n        return\r\n\r\n    }\r\n\r\n    /**送出修改NickName */\r\n    async motifyNickName() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.Nickname()\r\n            body.nickname = this.editNicName.string\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.Nickname)\r\n            console.log(body);\r\n            await new RequestGPG.Request()\r\n                .setMethod(RequestGPG.Method.POST)\r\n                .setBody(JSON.stringify(body))\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.Nickname}`, this.responseNickname.bind(this))\r\n\r\n            resolve()\r\n        })\r\n    }\r\n    /**驗證碼發送是否成功 */\r\n    responseNickname(response: ResponseGPG.Nickname.DataClass) {\r\n        console.log(\"Nickname\", response)\r\n        if (response.Status.Code == \"0\") {\r\n            console.log(\"過關惹\");\r\n            this.isCheckNicename = true;\r\n        }\r\n    }\r\n\r\n    /**進行發送驗證碼時，必須先通過確認手機是否被註冊過 */\r\n    async onValidateContactInfo() {\r\n        /**確認信箱格式 */\r\n        if (!this.checkEmail(this.editEmail.string)) return;\r\n        const body = new RequestGPG.Body.NotNeedToken.ValidateContactInfo()\r\n        body.Email = this.editEmail.string;\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .setBody(JSON.stringify(body))\r\n            .fetchData(`${RequestGPG.APIUrl.ids}${RequestGPG.API.ValidateContactInfo}`, this.responseValidateContactInfo.bind(this))\r\n    }\r\n    async responseValidateContactInfo(response: ResponseGPG.ValidateContactInfo.DataClass) {\r\n        console.log(\"ValidateContactInfo\", response)\r\n        /**代表此已經綁定過不可以綁定! */\r\n        if (response.Status.Code == \"0\") {\r\n            console.log(\"已存在請重新換組\");\r\n            return;\r\n\r\n        }\r\n        else {\r\n            console.log(\"恭喜信箱不存在，可繼續註冊\");\r\n            //*要改成手動送驗證碼\r\n            const sendBody = new RequestGPG.Body.NotNeedToken.SendRegisterVerification()\r\n            sendBody.Email = this.editEmail.string\r\n            await new RequestGPG.Request()\r\n                .setMethod(RequestGPG.Method.POST)\r\n                .setBody(JSON.stringify(sendBody))\r\n                .fetchData(`${RequestGPG.APIUrl.ids}${RequestGPG.API.SendRegisterVerification}`, this.responseSendRegisterVerification.bind(this))\r\n        }\r\n\r\n    }\r\n    /**驗證碼發送是否成功 */\r\n    responseSendRegisterVerification(response: ResponseGPG.SendRegisterVerification.DataClass) {\r\n        console.log(\"SendRegisterVerification\", response)\r\n        if (response.Status.Code == \"0\") {\r\n            console.log(\"送出驗證碼囉\");\r\n\r\n        }\r\n    }\r\n    /**送出前須確認驗證碼的正確性，但前題是他必須得先需要註冊信箱時才會接這個function */\r\n    async certifiedEmall() {\r\n        /**確認信箱格式 */\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.CertifiedEmail()\r\n            body.email = this.editEmail.string\r\n            body.verifyCode = this.editVerificationCode.string\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.CertifiedEmail)\r\n            await new RequestGPG.Request()\r\n                .setMethod(RequestGPG.Method.POST)\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .setBody(JSON.stringify(body))\r\n                .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.CertifiedEmall}`, this.responseCertifiedEmall.bind(this))\r\n            resolve()\r\n        })\r\n\r\n    }\r\n\r\n    /**是否修改信箱成功 */\r\n    responseCertifiedEmall(response: ResponseGPG.CertifiedEmall.DataClass) {\r\n        console.log(\"CertifiedEmall\", response)\r\n        if (response.Status.Code == \"0\") {\r\n            console.log(\"過關惹\");\r\n            this.isCheckCertifiedEmall = true;\r\n        }\r\n    }\r\n    async uploadAvatar() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.UploadAvatar()\r\n            body.File = this.imageFile\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.UploadAvatar)\r\n            await new RequestGPG.Request()\r\n                .setMethod(RequestGPG.Method.POST)\r\n                .setBody(JSON.stringify(body))\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.UploadAvatar}`, this.responseUploadAvatar.bind(this))\r\n            resolve()\r\n        })\r\n    }\r\n    responseUploadAvatar(response: ResponseGPG.UploadAvatar.DataClass) {\r\n        console.log(response);\r\n\r\n    }\r\n\r\n    async onCheckMotify() {\r\n        if (!this.checkName(this.editNicName.string)) return;\r\n        if (!this.checkEmail(this.editEmail.string)) return;\r\n        if (!this.checkVerification(this.editVerificationCode.string)) return;\r\n        PanelLoading.instance.openLoading(\"資料更新中\")\r\n        this.isCheckNicename = false;\r\n        this.isCheckCertifiedEmall = false;\r\n        await this.certifiedEmall();\r\n        if (!this.isCheckCertifiedEmall) return\r\n        await this.motifyNickName();\r\n        if (!this.isCheckNicename) return\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).emit(LobbyStateEvent.UpDatePlayer)\r\n        if (this.isChangePicture)\r\n            EventMng.getInstance.mapEvnet.get(NotificationType.Panel).emit(LobbyStateEvent.ChangePlayerPicture, this.spritePlayer.spriteFrame)\r\n        this.onActivePanel(null)\r\n        return\r\n    }\r\n    activePanel(bool: boolean) {\r\n        bool ? this.show() : this.hide()\r\n    }\r\n    onSelectPhoto() {\r\n        new CreateFileSprite(this.onChangePlayerPicture.bind(this))\r\n    }\r\n    onChangePlayerPicture(_spriteFrame: SpriteFrame, file: File) {\r\n        this.spritePlayer.spriteFrame = _spriteFrame\r\n        this.isChangePicture = true;\r\n        this.imageFile = file\r\n\r\n        this.uploadAvatar()\r\n    }\r\n    onActivePanel(e: EventTouch, customEventData?: string) {\r\n        this.hide()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).emit(LobbyStateEvent.ActivePanelClientInfo, true)\r\n    }\r\n    activeVerificationCode(bool: boolean) {\r\n        console.log(bool);\r\n\r\n        this.editVerificationCode.spriteBG.node.active = bool\r\n        this.editEmail.spriteBG.node.active = bool\r\n        this.NodeEmail.active = bool\r\n        this.NodeVerificationCode.active = bool\r\n        this.btnVerificationCode.node.active = bool\r\n        if (!bool)\r\n            this.btnsFunction.position = PublicModel.getInstance.to2DConvertOtherNodeSpaceAR(this.btnsFunction, this.editEmail.spriteBG.node)\r\n    }\r\n\r\n    /**確認信箱格式 */\r\n    checkEmailRegular(_string: string) {\r\n        //please input the test email to see is valid\r\n        var strEmail = _string;\r\n\r\n        //Regular expression Testing\r\n        var emailRule = /^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z]+$/;\r\n\r\n        //validate ok or not\r\n        if (strEmail.search(emailRule) != -1) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    checkName(str: string) {\r\n        if (str.length == 0) {\r\n            console.error(\"請輸入文字\");\r\n            return false;\r\n        }\r\n        if (/\\s/.test(str)) {\r\n            console.error(\"文字有空白\");\r\n            return false;\r\n        }\r\n        if (!PublicModel.getInstance.checkNicknameCondition(str)) {\r\n            console.error(\"出現非法文字\");\r\n            return false;\r\n        }\r\n        if (str.length < 2 || str.length > 16) {\r\n            console.error(\"長度須為2~16\");\r\n            return false;;\r\n        }\r\n        return true\r\n    }\r\n    /**\r\n     * \r\n     * @param str 信箱\r\n     */\r\n    checkEmail(str: string) {\r\n        if (str.length == 0) {\r\n            console.error(\"請輸入文字\");\r\n            return false;\r\n        }\r\n        if (/\\s/.test(str)) {\r\n            console.error(\"文字有空白\");\r\n            return false;\r\n        }\r\n        if (!this.checkEmailRegular(str)) {\r\n            console.error(\"出現非法文字\");\r\n            return false;\r\n        }\r\n        return true\r\n    }\r\n    /**\r\n     * @param verification 驗證碼  \r\n     */\r\n    checkVerification(str: string) {\r\n        if (str.length == 0) {\r\n            console.error(\"請輸入數字\");\r\n            return false;\r\n        }\r\n        if (/\\s/.test(str)) {\r\n            console.error(\"文字有空白\");\r\n            return false;\r\n        }\r\n        if (str.length != 6) {\r\n            console.error(\"驗證碼最少六碼\");\r\n            return false;\r\n        }\r\n        return true\r\n    }\r\n}\r\n"]}
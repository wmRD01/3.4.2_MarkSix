{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/ClientInfo/PanelClientInfo.ts"],"names":["assetManager","Button","Label","Sprite","SpriteFrame","_decorator","BaseComponent","Player","RequestGPG","EventMng","NotificationType","LobbyStateEvent","PublicData","PanelLoading","PublicModel","CreateFileSprite","EditMenu","PanelSystemMessage","SocketSetting","LangType","ccclass","property","PanelClientInfo","onLoad","show","getInstance","mapEvnet","get","PanelClient","on","EditUpdate","onEditUpData","setEvent","NextIssueID","resetButton","labelPhone","string","labelNickName","onEnable","startDelay","requestMyInfo","requesMyScore","stopDelay","setTimeout","instance","closeLoading","bind","onDisable","onEditTarget","e","customEventData","closeButton","Number","Nickname","emit","EditNickname","Phone","EditPhone","Email","EditEmail","str","type","checkStringNull","onSelectPhoto","onUploadAvatar","responError","_spriteFrame","file","fileData","FormData","append","Request","setMethod","Method","POST","deletContentType","setBody","setToken","gpgToken","fetchData","gpgUrlPlayApi","API","UploadAvatar","response","responseUploadAvatar","console","log","Status","Code","spritePlayer","spriteFrame","errorCode","showSingleConfirm","t","Game","Promise","resolve","reject","body","Body","NeedToken","MyInfo","sign","convertMD5","gpgApiKey","convert","URLSearchParams","toString","responseMyInfo","gpgInfo","data","photo","headPhoto","loadPicture","nickName","getplatform","split","replace","phoneNumber","url","loadRemote","err","image","error","message","createWithImage","MyScore","getDate","Date","today","sDate","getFullYear","getMonth","eDate","getMonthAllDay","convertSign","My_Score","responseMyScore","labelRank","rank","labelBetCount","betTimes","labelPointCount","totalScore","buttonEditNickname","node","active","buttonEditPicture"],"mappings":"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","sourcesContent":["import { absMax, assetManager, Button, EventTouch, ImageAsset, Label, Node, Sprite, SpriteFrame, sys, _decorator } from 'cc';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport Player from '../../../../Model/Player';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport CryptoES from 'crypto-es';\r\nimport EventMng from '../../../../Manager/EventMng';\r\nimport { NotificationType } from '../../../../Enum/NotificationType';\r\nimport { LobbyStateEvent } from '../../../../Enum/LobbyStateEvent';\r\nimport PublicData from '../../../../Model/PublicData';\r\nimport PanelLoading from '../../../NoClearNode/PanelLoading';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport CreateFileSprite from '../../../../Model/CreateFileSprite';\r\nimport { EditMenu } from '../../../../Enum/EditMenu';\r\nimport PanelSystemMessage from '../../../NoClearNode/PanelSystemMessage';\r\nimport SocketSetting from '../../../../Socket/SocketSetting';\r\nimport { LangType } from '../../../../Enum/LangType';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PanelClientInfo')\r\nexport default class PanelClientInfo extends BaseComponent {\r\n    //#region  propty\r\n    isNeedUpdate: boolean = true;\r\n    isLoading: boolean = false;\r\n    @property(Sprite)\r\n    spritePlayer: Sprite;\r\n    @property(Label)\r\n    labelPhone: Label\r\n    @property(Label)\r\n    labelNickName: Label\r\n    @property(Label)\r\n    labelBetCount: Label;\r\n    @property(Label)\r\n    labelPointCount: Label;\r\n    @property(Label)\r\n    labelRank: Label;\r\n\r\n    @property(Button)\r\n    buttonEditNickname: Button;\r\n    @property(Button)\r\n    buttonEditPicture: Button;\r\n\r\n    getplatform: string;\r\n\r\n    //#endregion\r\n    onLoad() {\r\n        super.onLoad()\r\n        this.show()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).on(LobbyStateEvent.EditUpdate, this.onEditUpData, this)\r\n        this.setEvent(LobbyStateEvent.NextIssueID, this.resetButton)\r\n        this.labelPhone.string = \"\"\r\n        this.labelNickName.string = \"\"\r\n    }\r\n    async onEnable() {\r\n        this.startDelay()\r\n        await this.requestMyInfo()\r\n        await this.requesMyScore()\r\n        if (this.stopDelay() < 1)\r\n            setTimeout(PanelLoading.instance.closeLoading.bind(PanelLoading.instance), 1000);\r\n        else\r\n            PanelLoading.instance.closeLoading()\r\n    }\r\n    onDisable() {\r\n        this.resetButton()\r\n    }\r\n    onEditTarget(e: EventTouch, customEventData?: string) {\r\n        this.closeButton()\r\n        switch (Number(customEventData)) {\r\n            case EditMenu.Nickname:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditNickname)\r\n                break;\r\n            case EditMenu.Phone:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditPhone)\r\n                break;\r\n            case EditMenu.Email:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditEmail)\r\n                break;\r\n        }\r\n    }\r\n    onEditUpData(str: string, type: EditMenu) {\r\n        if (!PublicModel.getInstance.checkStringNull(str)) {\r\n            switch (type) {\r\n                case EditMenu.Nickname:\r\n                    this.labelNickName.string = str\r\n                    break;\r\n                case EditMenu.Phone:\r\n                    this.labelPhone.string = str\r\n                    break;\r\n            }\r\n        }\r\n        this.resetButton()\r\n        PanelLoading.instance.closeLoading()\r\n    }\r\n    //#region UploadAvatar\r\n    onSelectPhoto() {\r\n        new CreateFileSprite(this.onUploadAvatar.bind(this), this.responError.bind(this))\r\n    }\r\n    async onUploadAvatar(_spriteFrame: SpriteFrame, file: File) {\r\n        // PublicModel.getInstance.convertByteToBinary(PublicModel.getInstance._base64ToBytes(base64))\r\n        let fileData = new FormData()\r\n        fileData.append('file', file)\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .deletContentType()\r\n            .setBody(fileData)\r\n            .setToken(Player.getInstance.gpgToken)\r\n            .fetchData(`${PublicData.getInstance.gpgUrlPlayApi}${RequestGPG.API.UploadAvatar}`, (response: ResponseGPG.UploadAvatar.DataClass) => {\r\n                this.responseUploadAvatar(response, _spriteFrame)\r\n            })\r\n    }\r\n    responseUploadAvatar(response: ResponseGPG.UploadAvatar.DataClass, _spriteFrame: SpriteFrame) {\r\n        console.log(\"圖片上傳成功?\", response);\r\n        if (response.Status.Code == \"0\") {\r\n            this.spritePlayer.spriteFrame = _spriteFrame\r\n            this.responError(\"047\")\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n    responError(errorCode: string) {\r\n        PanelSystemMessage.instance.showSingleConfirm(SocketSetting.t(errorCode, LangType.Game))\r\n    }\r\n    //#endregion\r\n    //#region  MyInfo\r\n    async requestMyInfo() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.MyInfo()\r\n            body.sign = PublicModel.getInstance.convertMD5(PublicData.getInstance.gpgApiKey)\r\n            let convert = new URLSearchParams(body).toString()\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${PublicData.getInstance.gpgUrlPlayApi}${RequestGPG.API.MyInfo}?${convert}`, this.responseMyInfo.bind(this))\r\n            resolve();\r\n        })\r\n    }\r\n    async responseMyInfo(response: ResponseGPG.MyInfo.DataClass) {\r\n        console.log(\"MyInfo\", response)\r\n        Player.getInstance.gpgInfo = response;\r\n        // response.data.photo\r\n        // console.log(Player.getInstance.gpgInfo);\r\n\r\n        // /*上傳圖片功能暫時隱藏 */\r\n        if (!PublicModel.getInstance.checkStringNull(response.data.photo.headPhoto))\r\n            await this.loadPicture(response.data.photo.headPhoto)\r\n        if (!PublicModel.getInstance.checkStringNull(response.data.nickName)) {\r\n            this.getplatform = response.data.nickName?.split(\"_\")[0]/**因為前面會有註冊會員的文字，要刪除掉 */\r\n            this.labelNickName.string = response.data.nickName.replace(`${this.getplatform}_`, \"\")\r\n        }\r\n        else\r\n            this.labelNickName.string = response.data.nickName\r\n        this.labelPhone.string = PublicModel.getInstance.checkStringNull(response.data.phoneNumber) ? \"\" : response.data.phoneNumber\r\n    }\r\n    async loadPicture(url: string) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            assetManager.loadRemote(url, (err, image: ImageAsset) => {\r\n                if (err) {\r\n                    console.error(err.message);\r\n                    return\r\n                }\r\n                this.spritePlayer.spriteFrame = SpriteFrame.createWithImage(image)\r\n                resolve()\r\n            })\r\n        })\r\n    }\r\n    //#endregion\r\n    //#region Betlog\r\n    async requesMyScore() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.MyScore()\r\n            const getDate = new Date(PublicData.getInstance.today)\r\n            body.sDate = `${getDate.getFullYear()}-${getDate.getMonth() + 1}-01`\r\n            body.eDate = `${getDate.getFullYear()}-${getDate.getMonth() + 1}-${PublicModel.getInstance.getMonthAllDay(PublicData.getInstance.today)}`\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.MyScore)\r\n            console.log(body);\r\n\r\n            let convert = new URLSearchParams(body).toString()\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${PublicData.getInstance.gpgUrlPlayApi}${RequestGPG.API.My_Score}?${convert}`, this.responseMyScore.bind(this))\r\n            resolve()\r\n        })\r\n    }\r\n    responseMyScore(response?: ResponseGPG.My_Score.DataClass) {\r\n        console.log(\"玩家紀錄\", response);\r\n        if (response.data) {\r\n            this.labelRank.string = response.data.rank.toString()\r\n            this.labelBetCount.string = response.data.betTimes.toString()\r\n            this.labelPointCount.string = response.data.totalScore.toString()\r\n        }\r\n        else {\r\n            this.labelRank.string = \"0\"\r\n            this.labelBetCount.string = \"0\"\r\n            this.labelPointCount.string = \"0\"\r\n        }\r\n    }\r\n    //#endregion\r\n    resetButton() {\r\n        this.buttonEditNickname.node.active = true\r\n        this.buttonEditPicture.node.active = true\r\n    }\r\n    closeButton() {\r\n        this.buttonEditPicture.node.active = false\r\n        this.buttonEditNickname.node.active = false\r\n    }\r\n}\r\n"]}
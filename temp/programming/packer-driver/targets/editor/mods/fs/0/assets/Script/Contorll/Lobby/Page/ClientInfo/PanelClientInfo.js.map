{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/ClientInfo/PanelClientInfo.ts"],"names":["Button","Label","Sprite","_decorator","BaseComponent","Player","RequestGPG","EventMng","NotificationType","LobbyStateEvent","PublicData","PanelLoading","PublicModel","CreateFileSprite","EditMenu","ccclass","property","PanelClientInfo","onLoad","show","getInstance","mapEvnet","get","PanelClient","on","EditUpdate","onEditUpData","labelEmail","string","labelPhone","labelNickName","onEnable","startDelay","requestMyInfo","requesMyScore","stopDelay","setTimeout","instance","closeLoading","bind","onDisable","resetButton","onEditTarget","e","customEventData","closeButton","Number","Nickname","emit","EditNickname","Phone","EditPhone","Email","EditEmail","str","type","checkStringNull","onSelectPhoto","onUploadAvatar","_spriteFrame","file","fileData","FormData","append","Request","setMethod","Method","POST","deletContentType","setBody","setToken","gpgToken","fetchData","gpgUrlPlayApi","API","UploadAvatar","response","responseUploadAvatar","console","log","Status","Code","spritePlayer","spriteFrame","Promise","resolve","reject","body","Body","NeedToken","MyInfo","sign","convertMD5","gpgApi","convert","URLSearchParams","toString","responseMyInfo","gpgInfo","data","nickName","getplatform","split","replace","buttonEditPhone","node","active","phoneNumber","buttonEditEmail","email","MyScore","getDate","Date","today","sDate","getFullYear","getMonth","eDate","getMonthAllDay","convertSign","My_Score","responseMyScore","labelRank","rank","labelBetCount","betTimes","labelPointCount","totalScore","buttonEditNickname"],"mappings":"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","sourcesContent":["import { absMax, assetManager, Button, EventTouch, ImageAsset, Label, Node, Sprite, SpriteFrame, sys, _decorator } from 'cc';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport Player from '../../../../Model/Player';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport CryptoES from 'crypto-es';\r\nimport EventMng from '../../../../Manager/EventMng';\r\nimport { NotificationType } from '../../../../Enum/NotificationType';\r\nimport { LobbyStateEvent } from '../../../../Enum/LobbyStateEvent';\r\nimport PublicData from '../../../../Model/PublicData';\r\nimport PanelLoading from '../../../NoClearNode/PanelLoading';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport CreateFileSprite from '../../../../Model/CreateFileSprite';\r\nimport { EditMenu } from '../../../../Enum/EditMenu';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PanelClientInfo')\r\nexport default class PanelClientInfo extends BaseComponent {\r\n    //#region  propty\r\n    isNeedUpdate: boolean = true;\r\n    isLoading: boolean = false;\r\n    @property(Sprite)\r\n    spritePlayer: Sprite;\r\n    @property(Label)\r\n    labelPhone: Label\r\n    @property(Label)\r\n    labelNickName: Label\r\n    @property(Label)\r\n    labelEmail: Label\r\n    @property(Label)\r\n    labelBetCount: Label;\r\n    @property(Label)\r\n    labelPointCount: Label;\r\n    @property(Label)\r\n    labelRank: Label;\r\n\r\n    @property(Button)\r\n    buttonEditNickname: Button;\r\n    @property(Button)\r\n    buttonEditPhone: Button;\r\n    @property(Button)\r\n    buttonEditEmail: Button;\r\n    @property(Button)\r\n    buttonEditPicture: Button;\r\n\r\n    getplatform: string;\r\n\r\n    //#endregion\r\n    onLoad() {\r\n        super.onLoad()\r\n        this.show()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).on(LobbyStateEvent.EditUpdate, this.onEditUpData, this)\r\n        this.labelEmail.string = \"\"\r\n        this.labelPhone.string = \"\"\r\n        this.labelNickName.string = \"\"\r\n    }\r\n    async onEnable() {\r\n        this.startDelay()\r\n        await this.requestMyInfo()\r\n        await this.requesMyScore()\r\n        if (this.stopDelay() < 1)\r\n            setTimeout(PanelLoading.instance.closeLoading.bind(PanelLoading.instance), 1000);\r\n        else\r\n            PanelLoading.instance.closeLoading()\r\n    }\r\n    onDisable() {\r\n        this.resetButton()\r\n    }\r\n    onEditTarget(e: EventTouch, customEventData?: string) {\r\n        this.closeButton()\r\n        switch (Number(customEventData)) {\r\n            case EditMenu.Nickname:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditNickname)\r\n                break;\r\n            case EditMenu.Phone:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditPhone)\r\n                break;\r\n            case EditMenu.Email:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditEmail)\r\n                break;\r\n        }\r\n    }\r\n    onEditUpData(str: string, type: EditMenu) {\r\n        if (!PublicModel.getInstance.checkStringNull(str)) {\r\n            switch (type) {\r\n                case EditMenu.Nickname:\r\n                    this.labelNickName.string = str\r\n                    break;\r\n                case EditMenu.Phone:\r\n                    this.labelPhone.string = str\r\n                    break;\r\n                case EditMenu.Email:\r\n                    this.labelEmail.string = str\r\n                    break;\r\n            }\r\n        }\r\n        this.resetButton()\r\n        PanelLoading.instance.closeLoading()\r\n    }\r\n    //#region UploadAvatar\r\n    onSelectPhoto() {\r\n        new CreateFileSprite(this.onUploadAvatar.bind(this))\r\n    }\r\n    async onUploadAvatar(_spriteFrame: SpriteFrame, file: File) {\r\n        // PublicModel.getInstance.convertByteToBinary(PublicModel.getInstance._base64ToBytes(base64))\r\n        let fileData = new FormData()\r\n        fileData.append('file', file)\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .deletContentType()\r\n            .setBody(fileData)\r\n            .setToken(Player.getInstance.gpgToken)\r\n            .fetchData(`${PublicData.getInstance.gpgUrlPlayApi}${RequestGPG.API.UploadAvatar}`, (response: ResponseGPG.UploadAvatar.DataClass) => {\r\n                this.responseUploadAvatar(response, _spriteFrame)\r\n            })\r\n    }\r\n    responseUploadAvatar(response: ResponseGPG.UploadAvatar.DataClass, _spriteFrame: SpriteFrame) {\r\n        console.log(\"圖片上傳成功?\", response);\r\n        if (response.Status.Code == \"0\")\r\n            this.spritePlayer.spriteFrame = _spriteFrame\r\n        else {\r\n\r\n        }\r\n    }\r\n    //#endregion\r\n    //#region  MyInfo\r\n    async requestMyInfo() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.MyInfo()\r\n            body.sign = PublicModel.getInstance.convertMD5(PublicData.getInstance.gpgApi)\r\n            let convert = new URLSearchParams(body).toString()\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${PublicData.getInstance.gpgUrlPlayApi}${RequestGPG.API.MyInfo}?${convert}`, this.responseMyInfo.bind(this))\r\n            resolve();\r\n        })\r\n    }\r\n    async responseMyInfo(response: ResponseGPG.MyInfo.DataClass) {\r\n        console.log(\"MyInfo\", response)\r\n        Player.getInstance.gpgInfo = response;\r\n        // response.data.photo\r\n        // console.log(Player.getInstance.gpgInfo);\r\n\r\n        /*上傳圖片功能暫時隱藏 */\r\n        // if (!PublicModel.getInstance.checkStringNull(response.data.photo.headPhoto))\r\n        //     assetManager.loadRemote(response.data.photo.headPhoto, (err, image: ImageAsset) => {\r\n        //         if (err) {\r\n        //             console.error(err.message);\r\n        //             return\r\n        //         }\r\n        //         this.spritePlayer.spriteFrame = SpriteFrame.createWithImage(image)\r\n\r\n        //     })\r\n        if (!PublicModel.getInstance.checkStringNull(response.data.nickName)) {\r\n            this.getplatform = response.data.nickName?.split(\"_\")[0]/**因為前面會有註冊會員的文字，要刪除掉 */\r\n            this.labelNickName.string = response.data.nickName.replace(`${this.getplatform}_`, \"\")\r\n        }\r\n        else\r\n            this.labelNickName.string = response.data.nickName\r\n        this.buttonEditPhone.node.active = PublicModel.getInstance.checkStringNull(response.data.phoneNumber);\r\n        this.labelPhone.string = PublicModel.getInstance.checkStringNull(response.data.phoneNumber) ? \"\" : response.data.phoneNumber\r\n        this.buttonEditEmail.node.active = PublicModel.getInstance.checkStringNull(response.data.email);\r\n        this.labelEmail.string = PublicModel.getInstance.checkStringNull(response.data.email) ? \"\" : response.data.email\r\n\r\n    }\r\n\r\n    //#region Betlog\r\n    async requesMyScore() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.MyScore()\r\n            const getDate = new Date(PublicData.getInstance.today)\r\n            body.sDate = `${getDate.getFullYear()}-${getDate.getMonth() + 1}-01`\r\n            body.eDate = `${getDate.getFullYear()}-${getDate.getMonth() + 1}-${PublicModel.getInstance.getMonthAllDay(PublicData.getInstance.today)}`\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.MyScore)\r\n            console.log(body);\r\n\r\n            let convert = new URLSearchParams(body).toString()\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${PublicData.getInstance.gpgUrlPlayApi}${RequestGPG.API.My_Score}?${convert}`, this.responseMyScore.bind(this))\r\n            resolve()\r\n        })\r\n    }\r\n    responseMyScore(response?: ResponseGPG.My_Score.DataClass) {\r\n        console.log(\"玩家紀錄\", response);\r\n        if (response.data) {\r\n            this.labelRank.string = response.data.rank.toString()\r\n            this.labelBetCount.string = response.data.betTimes.toString()\r\n            this.labelPointCount.string = response.data.totalScore.toString()\r\n            // this.labelMyPoint.string = response.data.totalScore.toString();\r\n        }\r\n        else {\r\n            this.labelRank.string = \"0\"\r\n            this.labelBetCount.string = \"0\"\r\n            this.labelPointCount.string = \"0\"\r\n        }\r\n    }\r\n    //#endregion\r\n    resetButton() {\r\n        this.buttonEditNickname.node.active = true\r\n        // this.buttonEditPicture.node.active = true\r\n        this.buttonEditPhone.node.active = PublicModel.getInstance.checkStringNull(this.labelPhone.string);\r\n        this.buttonEditEmail.node.active = PublicModel.getInstance.checkStringNull(this.labelEmail.string);\r\n    }\r\n    closeButton() {\r\n        // this.buttonEditPicturse.node.active = false\r\n        this.buttonEditNickname.node.active = false\r\n        this.buttonEditPhone.node.active = false\r\n        this.buttonEditEmail.node.active = false\r\n    }\r\n}\r\n"]}
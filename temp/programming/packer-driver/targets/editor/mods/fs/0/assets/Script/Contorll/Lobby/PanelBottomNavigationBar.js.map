{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/PanelBottomNavigationBar.ts"],"names":["Page","Button","Node","Sprite","UITransform","v3","_decorator","AssetType","NotificationType","PageAction","AssetMng","EventMng","BaseComponent","PublicData","PublicModel","ccclass","property","PanelBottomNavigationBar","Map","ActionDic","縮","onLoad","waitStateCheck","console","log","index","btns","length","_page","change","mapButton","set","circleY","getInstance","BaseViewHeight","nodeCircle","getComponent","height","onEnable","mapEvnet","get","on","ChangeTo","onMoveCircle","onDisable","off","onEmitMoveCircle","e","customEventData","emit","Number","error","currentIndex","lastIndex","size","waitButton","getX","to2DConvertOtherNodeSpaceAR","getButton","node","x","goTarget","startAction","Promise","resolve","reject","inter","setInterval","clearInterval","getCircleScale","getScale","actionDic","isAction","update","dt","speed","放","setPosition","has","setScale","oneSclaeVec3","constructor","_btn","_type","button","BG","getComponentInChildren","type","bool","sprite","spriteData","spriteFrame","AssetClass","data"],"mappings":"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","sourcesContent":["import { Button, Node, Sprite, UITransform, v3, Vec3, _decorator } from \"cc\";\r\nimport { AssetType } from \"../../Enum/AssetType\";\r\nimport { NotificationType } from \"../../Enum/NotificationType\";\r\nimport { PageAction } from \"../../Enum/PageAction\";\r\nimport { PageMenu } from \"../../Enum/PageMenu\";\r\nimport AssetMng from \"../../Manager/AssetMng\";\r\nimport ButtonMng from \"../../Manager/ButtonMng\";\r\nimport EventMng from \"../../Manager/EventMng\";\r\nimport BaseComponent from \"../../Model/ComponentBase\";\r\nimport PublicData from \"../../Model/PublicData\";\r\nimport PublicModel from \"../../Model/PublicModel\";\r\nimport PageControll from \"./PageControll\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PanelBottomNavigationBar')\r\nexport default class PanelBottomNavigationBar extends BaseComponent {\r\n    @property(Button)\r\n    btns: Button[] = []\r\n\r\n    @property(Node)\r\n    btnLayout: Node;\r\n    @property(Node)\r\n    nodeCircle: Node;\r\n    circleY: number;\r\n    mapButton: Map<number, Page> = new Map()\r\n    currentIndex: number = -1\r\n    lastIndex: number = -1\r\n\r\n    //#region 動畫參數\r\n    isAction: boolean = false\r\n    actionDic: ActionDic = ActionDic.縮;\r\n    @property\r\n    speed: number = 3\r\n    goTarget: Vec3;\r\n    getCircleScale: number\r\n    //#endregion\r\n    async onLoad() {\r\n        super.onLoad()\r\n        await AssetMng.waitStateCheck(AssetType.Sprite)\r\n        console.log(\"誰搶誰\");\r\n\r\n        // PageControll.instance.pageEvnet.on(PageAction.ChangeTo, this.onMoveCircle, this)\r\n        for (let index = 0; index < this.btns.length; index++) {\r\n            let _page = new Page(this.btns[index], index)\r\n            _page.change(false)\r\n            this.mapButton.set(index, _page)\r\n        }\r\n\r\n        this.circleY = -(PublicData.getInstance.BaseViewHeight / 2) + (this.nodeCircle.getComponent(UITransform).height / 2)\r\n    }\r\n    onEnable() {\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Page).on(PageAction.ChangeTo, this.onMoveCircle, this)\r\n    }\r\n    onDisable() {\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Page).off(PageAction.ChangeTo, this.onMoveCircle, this)\r\n    }\r\n\r\n    async onEmitMoveCircle(e: Event, customEventData?: string) {\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Page).emit(PageAction.ChangeTo, Number(customEventData))\r\n    }\r\n    async onMoveCircle(index: PageMenu) {\r\n        await AssetMng.waitStateCheck(AssetType.Sprite)\r\n        console.error(\"誰搶誰\");\r\n        if (this.currentIndex == Number(index)) return;\r\n        this.lastIndex = this.currentIndex\r\n        this.currentIndex = Number(index)\r\n        if (this.mapButton.size == 0)\r\n            await this.waitButton()\r\n        let getX = PublicModel.getInstance.to2DConvertOtherNodeSpaceAR(this.nodeCircle, this.getButton(this.currentIndex).node).x\r\n        this.goTarget = v3(getX, this.circleY)\r\n        this.startAction()\r\n\r\n    }\r\n\r\n    getButton(index: number) {\r\n        return this.mapButton.get(index).getButton()\r\n    }\r\n    async waitButton() {\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let inter = setInterval(() => {\r\n                if (this.mapButton.size != 0) {\r\n                    resolve()\r\n                    clearInterval(inter)\r\n                }\r\n            }, 500)\r\n        })\r\n    }\r\n    startAction() {\r\n        this.getCircleScale = this.nodeCircle.getScale().x\r\n        this.actionDic = ActionDic.縮\r\n        this.isAction = true\r\n    }\r\n    update(dt: number) {\r\n        if (this.isAction) {\r\n            switch (this.actionDic) {\r\n                case ActionDic.縮:\r\n                    this.getCircleScale = this.getCircleScale - (dt * this.speed)\r\n                    if (this.getCircleScale < 0) {\r\n                        this.getCircleScale = 0\r\n                        this.actionDic = ActionDic.放;\r\n                        this.nodeCircle.setPosition(this.goTarget)\r\n                        /**初始畫會是-1 就不做事情 */\r\n                        if (this.mapButton.has(this.lastIndex)) this.mapButton.get(this.lastIndex).change(false)\r\n                        this.mapButton.get(this.currentIndex).change(true)\r\n                    }\r\n                    break;\r\n                case ActionDic.放:\r\n                    this.getCircleScale = this.getCircleScale + (dt * this.speed)\r\n                    if (this.getCircleScale > 1) {\r\n                        this.getCircleScale = 1\r\n                        this.isAction = false\r\n                    }\r\n                    break;\r\n            }\r\n            this.nodeCircle.setScale(PublicModel.getInstance.oneSclaeVec3(this.getCircleScale))\r\n        }\r\n    }\r\n}\r\nenum ActionDic {\r\n    縮,\r\n    放\r\n}\r\n\r\nclass Page {\r\n    private button: Button\r\n    private BG: Sprite\r\n    private type: PageMenu\r\n    private spriteData: string[] = [\"icon_home\", \"icon_rank\", \"icon_bet\", \"icon_user\", \"icon_setting\"]\r\n    constructor(_btn: Button, _type: number) {\r\n        this.button = _btn;\r\n        this.BG = this.button.getComponentInChildren(Sprite);\r\n        this.type = _type\r\n    }\r\n    change(bool: boolean) {\r\n        let sprite: string = this.spriteData[this.type]\r\n        if (bool) sprite = sprite + \"_act\"\r\n        this.BG.spriteFrame = AssetMng.AssetClass.get(AssetType.Sprite).data.get(sprite)\r\n    }\r\n    getButton() {\r\n        return this.button\r\n    }\r\n}\r\n"]}
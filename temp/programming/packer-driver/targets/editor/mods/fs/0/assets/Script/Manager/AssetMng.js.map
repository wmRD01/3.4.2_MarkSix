{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Manager/AssetMng.ts"],"names":["AssetMng","MusicAsset","SpriteAsset","SpriteAtlasAsset","AssetType","PrefabAsset","Map","startLoad","AssetClass","set","Sprite","loadAsset","Music","SpriteAtlast","Prefab","loadLogoAsset","lang","loadLogo","checkState","type","get","checkAssetState","error","undefined","waitInit","Promise","resolve","reject","check","repet","setInterval","clearInterval","waitStateCheck","getClass"],"mappings":";;;iGAOMA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANCC,MAAAA,U;;AACAC,MAAAA,W;;AACAC,MAAAA,gB;;AACEC,MAAAA,S,iBAAAA,S;;AACFC,MAAAA,W;;;;;;;AAEDL,MAAAA,Q,GAAN,MAAMA,QAAN,CAAe;AAAA;AAAA,8CAC0B,IAAIM,GAAJ,EAD1B;;AAAA;AAAA;;AAIXC,QAAAA,SAAS,GAAG;AACR,eAAKC,UAAL,CAAgBC,GAAhB,CAAoB;AAAA;AAAA,sCAAUC,MAA9B,EAAsC;AAAA;AAAA,0CAAYC,SAAZ,EAAtC;AACA,eAAKH,UAAL,CAAgBC,GAAhB,CAAoB;AAAA;AAAA,sCAAUG,KAA9B,EAAqC;AAAA;AAAA,wCAAWD,SAAX,EAArC;AACA;AACA,eAAKH,UAAL,CAAgBC,GAAhB,CAAoB;AAAA;AAAA,sCAAUI,YAA9B,EAA4C;AAAA;AAAA,oDAAiBF,SAAjB,EAA5C;AACA,eAAKH,UAAL,CAAgBC,GAAhB,CAAoB;AAAA;AAAA,sCAAUK,MAA9B,EAAsC;AAAA;AAAA,0CAAYH,SAAZ,EAAtC,EALQ,CAMR;AACH;;AAEDI,QAAAA,aAAa,CAACC,IAAD,EAAe;AACxB;AAAA;AAAA,0CAAYC,QAAZ,CAAqBD,IAArB;AACH;;AACDE,QAAAA,UAAU,CAACC,IAAD,EAAkB;AACxB;AACA;AACA,cAAI;AACA,mBAAO,KAAKX,UAAL,CAAgBY,GAAhB,CAAoBD,IAApB,EAA0BE,eAAjC;AACH,WAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,mBAAOC,SAAP;AACH;AACJ,SAxBU,CA0BX;;;AACAC,QAAAA,QAAQ,CAACL,IAAD,EAAiC;AACrC,iBAAO,IAAIM,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,gBAAI,KAAKnB,UAAL,CAAgBY,GAAhB,CAAoBD,IAApB,KAA6BI,SAAjC,EAA4C,OAAOG,OAAO,EAAd;AAC5C,gBAAIE,KAAK,GAAG,KAAZ;AACA,gBAAIC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC1B,kBAAI,KAAKtB,UAAL,CAAgBY,GAAhB,CAAoBD,IAApB,KAA6BI,SAAjC,EAA4CK,KAAK,GAAG,IAAR;;AAC5C,kBAAIA,KAAJ,EAAW;AACPG,gBAAAA,aAAa,CAACF,KAAD,CAAb;AACAH,gBAAAA,OAAO;AACV;AACJ,aANsB,EAMpB,EANoB,CAAvB;AAOH,WAVM,CAAP;AAWH;;AACDM,QAAAA,cAAc,CAACb,IAAD,EAAiC;AAC3C,iBAAO,IAAIM,OAAJ,CAAmBC,OAAD,IAAuB;AAC5C,gBAAIO,QAAQ,GAAG,KAAKzB,UAAL,CAAgBY,GAAhB,CAAoBD,IAApB,CAAf;AACA,gBAAIc,QAAQ,CAACZ,eAAb,EAA8B,OAAOK,OAAO,EAAd;AAC9B,gBAAIE,KAAK,GAAG,KAAZ;AACA,gBAAIC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC1B,kBAAIG,QAAQ,CAACZ,eAAb,EAA8BO,KAAK,GAAG,IAAR;;AAC9B,kBAAIA,KAAJ,EAAW;AACPG,gBAAAA,aAAa,CAACF,KAAD,CAAb;AACAH,gBAAAA,OAAO;AACV;AACJ,aANsB,EAMpB,EANoB,CAAvB;AAOH,WAXM,CAAP;AAYH;;AArDU,O;;yBAwDA,IAAI1B,QAAJ,E","sourcesContent":["import IAsset from \"../Interface/IAsset\";\r\nimport MusicAsset from \"../Asset/MusicAsset\";\r\nimport SpriteAsset from \"../Asset/SpriteAsset\";\r\nimport SpriteAtlasAsset from \"../Asset/SpriteAtlasAsset\";\r\nimport { AssetType } from \"../Enum/AssetType\";\r\nimport PrefabAsset from \"../Asset/PrefabAsset\";\r\n\r\nclass AssetMng {\r\n    AssetClass: Map<AssetType, IAsset> = new Map();\r\n    // AssetClass: Array<IAsset> = []\r\n    isAllOK: boolean;\r\n    startLoad() {\r\n        this.AssetClass.set(AssetType.Sprite, SpriteAsset.loadAsset());\r\n        this.AssetClass.set(AssetType.Music, MusicAsset.loadAsset());\r\n        return\r\n        this.AssetClass.set(AssetType.SpriteAtlast, SpriteAtlasAsset.loadAsset());\r\n        this.AssetClass.set(AssetType.Prefab, PrefabAsset.loadAsset());\r\n        // resources.load()\r\n    }\r\n\r\n    loadLogoAsset(lang: string) {\r\n        SpriteAsset.loadLogo(lang)\r\n    }\r\n    checkState(type: AssetType) {\r\n        // console.log(type);\r\n        // console.log(this.AssetClass);\r\n        try {\r\n            return this.AssetClass.get(type).checkAssetState\r\n        } catch (error) {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    //避免發生位初始化時就尋訪參數\r\n    waitInit(type: AssetType): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (this.AssetClass.get(type) != undefined) return resolve()\r\n            let check = false\r\n            let repet = setInterval(() => {\r\n                if (this.AssetClass.get(type) != undefined) check = true\r\n                if (check) {\r\n                    clearInterval(repet);\r\n                    resolve();\r\n                }\r\n            }, 16)\r\n        })\r\n    }\r\n    waitStateCheck(type: AssetType): Promise<void> {\r\n        return new Promise<void>((resolve: Function) => {\r\n            let getClass = this.AssetClass.get(type)\r\n            if (getClass.checkAssetState) return resolve()\r\n            let check = false;\r\n            let repet = setInterval(() => {\r\n                if (getClass.checkAssetState) check = true\r\n                if (check) {\r\n                    clearInterval(repet);\r\n                    resolve();\r\n                }\r\n            }, 16)\r\n        })\r\n    }\r\n\r\n}\r\nexport default new AssetMng();"]}
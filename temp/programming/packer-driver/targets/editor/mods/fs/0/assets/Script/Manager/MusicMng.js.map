{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Manager/MusicMng.ts"],"names":["MusicMng","AudioSource","Node","random","sys","DataMusic","AssetType","CheckLoadingType","CheckLoading","GameData","PublicData","AssetMng","ItemType","init","waitStateCheck","Music","gameString","getInstance","gameID","contentId","audio_Music","addComponent","initValue","endWork","isMusic","localStorage","getItem","MusicBoolean","is_open_music","String","setItem","EffectBoolean","is_open_effect","MusicVolume","volMusic","Number","toString","EffectVolume","volEffect","switchEffect","switchMusic","musicVolSet","effectVolSet","getClip","name","AssetClass","get","data","_boolean","getMusicState","musicPlay","musicName","playLoop","isClickScreen","state","clip","musicStop","loop","play","stop","vol","_volMusic","volume","getEffectState","sequenceEffectPlay","array","index","length","sequenceEffect","effectName","Promise","resolve","reject","getRandom","checkEffectRandom","audio","getAudioSourcePool","node","targetOff","_volEffect","formatName","once","EventType","ENDED","putAudioSourcePool","effectPlay","audio_Effect","set","effectStopAll","forEach","audioSource","_effectName","clear","effectStop","split","number","has","audioSourcePool","size","getComponent","_audioSource","put","delete","onType"],"mappings":"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","sourcesContent":["import { AudioClip, AudioSource, Node, random, sys } from \"cc\";\r\nimport DataMusic from \"../Contorll/Data/DataMusic\";\r\nimport { AssetType } from \"../Enum/AssetType\";\r\nimport { CheckLoadingType } from \"../Enum/CheckLoadingType\";\r\nimport { EffectType } from \"../Enum/EffectType\";\r\nimport CheckLoading from \"../Model/CheckLoading\";\r\nimport GameData from \"../Model/GameData\";\r\nimport PublicData from \"../Model/PublicData\";\r\nimport AssetMng from \"./AssetMng\";\r\n\r\nenum ItemType {\r\n    MusicBoolean = \"_MusicBoolean\",\r\n    EffectBoolean = \"_EffectBoolean\",\r\n    MusicVolume = \"_MusicVolume\",\r\n    EffectVolume = \"_EffectVolume\",\r\n\r\n}\r\n\r\nclass MusicMng extends DataMusic {\r\n\r\n    async init(): Promise<void> {\r\n        await AssetMng.waitStateCheck(AssetType.Music)\r\n        this.gameString = GameData.getInstance.gameID + \"_\" + GameData.getInstance.contentId\r\n        this.audio_Music = new Node().addComponent(AudioSource);\r\n        this.initValue();\r\n        CheckLoading.getInstance.endWork(CheckLoadingType.isMusic)\r\n        // console.log(this.getEffectState());\r\n    }\r\n    // async init(): Promise<void> {\r\n    //     return new Promise<void>(async (resolve, reject) => {\r\n\r\n    //         await AssetMng.waitStateCheck(AssetType.Music)\r\n    //         this.gameString = GameData.getInstance.gameID + \"_\" + GameData.getInstance.contentId\r\n    //         this.audio_Music = new Node().addComponent(AudioSource);\r\n    //         this.initValue();\r\n\r\n    //         resolve()\r\n    //         // console.log(this.getEffectState());\r\n\r\n    //     })\r\n    // }\r\n\r\n    private initValue() {\r\n        //聲音布林初始化\r\n        if (sys.localStorage.getItem(this.gameString + ItemType.MusicBoolean) != null)\r\n            this.is_open_music = sys.localStorage.getItem(this.gameString + ItemType.MusicBoolean) == String(true) ? true : false\r\n        else\r\n            sys.localStorage.setItem(this.gameString + ItemType.MusicBoolean, String(this.is_open_music))\r\n        //音效布林初始化\r\n        if (sys.localStorage.getItem(this.gameString + ItemType.EffectBoolean) != null)\r\n            this.is_open_effect = sys.localStorage.getItem(this.gameString + ItemType.EffectBoolean) == String(true) ? true : false\r\n        else\r\n            sys.localStorage.setItem(this.gameString + ItemType.EffectBoolean, String(this.is_open_effect))\r\n        //聲音初始化\r\n        if (sys.localStorage.getItem(this.gameString + ItemType.MusicVolume) != null)\r\n            this.volMusic = Number(sys.localStorage.getItem(this.gameString + ItemType.MusicVolume))\r\n        else\r\n            sys.localStorage.setItem(this.gameString + ItemType.MusicVolume, this.volMusic.toString())\r\n        //音效初始化\r\n        if (sys.localStorage.getItem(this.gameString + ItemType.EffectVolume) != null)\r\n            this.volEffect = Number(sys.localStorage.getItem(this.gameString + ItemType.EffectVolume))\r\n        else\r\n            sys.localStorage.setItem(this.gameString + ItemType.EffectVolume, this.volEffect.toString())\r\n\r\n        this.switchEffect(this.is_open_effect)\r\n        this.switchMusic(this.is_open_music)\r\n        this.musicVolSet(this.volMusic)\r\n        this.effectVolSet(this.volEffect)\r\n\r\n    }\r\n    private getClip(name: string): AudioClip {\r\n        return AssetMng.AssetClass.get(AssetType.Music).data.get(name);\r\n    }\r\n\r\n    switchMusic(_boolean?: boolean): boolean {\r\n        this.is_open_music = _boolean != null ? _boolean : !this.is_open_music;\r\n        this.musicVolSet();\r\n        return this.getMusicState();\r\n    }\r\n\r\n    musicPlay(musicName: string, playLoop = true): void {\r\n        if (!PublicData.getInstance.isClickScreen) return\r\n\r\n\r\n        if (this.audio_Music.state === 1 && musicName === this.audio_Music.clip.name) return\r\n        this.musicStop();\r\n        this.audio_Music.clip = this.getClip(musicName);\r\n        this.audio_Music.loop = playLoop;\r\n        this.audio_Music.play()\r\n        // console.log(this.audio_Music.clip.name);\r\n\r\n    }\r\n\r\n    musicStop(): void {\r\n        this.audio_Music.stop();\r\n    }\r\n\r\n    musicVolSet(vol?: number): void {\r\n        if (vol) {\r\n            this._volMusic = vol;\r\n        }\r\n        this.audio_Music.volume = this.getMusicState() ? this._volMusic : 0;\r\n    }\r\n\r\n    getMusicState(): boolean {\r\n        return this.is_open_music;\r\n    }\r\n\r\n\r\n    switchEffect(_boolean?: boolean): boolean {\r\n        this.is_open_effect = _boolean != null ? _boolean : !this.is_open_effect\r\n        this.effectVolSet();\r\n        return this.getEffectState();\r\n    }\r\n\r\n\r\n    async sequenceEffectPlay(array: Array<EffectType>) {\r\n        if (!PublicData.getInstance.isClickScreen) return\r\n        for (let index = 0; index < array.length; index++) {\r\n            await this.sequenceEffect(array[index])\r\n        }\r\n    }\r\n    private async sequenceEffect(effectName: string) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            let getRandom = this.checkEffectRandom(effectName, random())\r\n            let audio: AudioSource = this.getAudioSourcePool()\r\n            audio.node.targetOff(audio.node)\r\n            audio.clip = this.getClip(effectName)\r\n            audio.volume = this.getEffectState() ? this._volEffect : 0\r\n            audio.play()\r\n            let formatName = `${effectName}:${getRandom}`\r\n            audio.node.once(AudioSource.EventType.ENDED, () => {\r\n                this.putAudioSourcePool(audio, formatName)\r\n                resolve()\r\n            }, this)\r\n        })\r\n    }\r\n    effectPlay(effectName: string, playLoop: boolean = false): void {\r\n        if (!PublicData.getInstance.isClickScreen) return\r\n        //撥放音樂\r\n        let getRandom = this.checkEffectRandom(effectName, random())\r\n        let audio: AudioSource = this.getAudioSourcePool()\r\n        audio.node.targetOff(audio.node)\r\n        audio.loop = playLoop\r\n        audio.clip = this.getClip(effectName)\r\n        audio.volume = this.getEffectState() ? this._volEffect : 0\r\n        audio.play()\r\n        let formatName = `${effectName}:${getRandom}`\r\n        //資料儲存\r\n        this.audio_Effect.set(formatName, audio)\r\n        if (!playLoop)\r\n            audio.node.once(AudioSource.EventType.ENDED, () => { this.putAudioSourcePool(audio, formatName) }, this)\r\n\r\n    }\r\n\r\n    effectStopAll(): void {\r\n        this.audio_Effect.forEach((audioSource, _effectName) => {\r\n            this.putAudioSourcePool(audioSource, _effectName)\r\n        })\r\n        this.audio_Effect.clear();//確認清乾淨\r\n    }\r\n\r\n    effectStop(effectName: string): void {\r\n        this.audio_Effect.forEach((audioSource, _effectName) => {\r\n            if (_effectName.split(\":\")[0] == effectName) {\r\n                this.putAudioSourcePool(audioSource, _effectName)\r\n            }\r\n        })\r\n    }\r\n\r\n    effectVolSet(vol?: number): void {\r\n        if (vol) {\r\n            this._volEffect = vol;\r\n        }\r\n        this.audio_Effect.forEach(audioSource => {\r\n            audioSource.volume = this.getEffectState() ? this._volEffect : 0;\r\n        });\r\n    }\r\n\r\n    getEffectState(): boolean {\r\n        return this.is_open_effect;\r\n    }\r\n\r\n    private checkEffectRandom(effectName: string, number: number) {\r\n        if (this.audio_Effect.has(`${effectName}:${number}}`))\r\n            return this.checkEffectRandom(effectName, random())\r\n        else\r\n            return number\r\n    }\r\n\r\n    private getAudioSourcePool() {\r\n        if (this.audioSourcePool.size() > 0) {\r\n            return this.audioSourcePool.get().getComponent(AudioSource);\r\n        }\r\n        else {\r\n            return new Node().addComponent(AudioSource)\r\n        }\r\n    }\r\n    private putAudioSourcePool(_audioSource: AudioSource, _effectName: string) {\r\n        _audioSource.stop()\r\n        this.audioSourcePool.put(_audioSource.node)\r\n        this.audio_Effect.delete(_effectName)\r\n    }\r\n\r\n}\r\n\r\nexport default new MusicMng();\r\n\r\nenum onType {\r\n\r\n}"]}
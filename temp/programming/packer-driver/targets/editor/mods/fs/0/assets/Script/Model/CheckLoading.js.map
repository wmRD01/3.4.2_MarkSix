{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Model/CheckLoading.ts"],"names":["CheckLoading","BaseSingleton","CheckLoadingType","constructor","Map","value","isNaN","Number","map_CheckList","set","checkAllEnd","Promise","resolve","reject","roop","setInterval","isOK","key","clearInterval","console","error","endWork","type","resetState","checkState","get"],"mappings":";;;+DAGqBA,Y;;;;;;;;;;;;;;;;;;;;AAHdC,MAAAA,a;;AACEC,MAAAA,gB,iBAAAA,gB;;;;;;;yBAEYF,Y,GAAN,MAAMA,YAAN,SAA2B;AAAA;AAAA,2CAA3B,CAAyD;AAEpEG,QAAAA,WAAW,GAAG;AACV;;AADU,iDADkC,IAAIC,GAAJ,EAClC;;AAEV,eAAK,MAAMC,KAAX;AAAA;AAAA,oDAAsC;AAClC,gBAAIC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAT,EAA0B;AAE1B,iBAAKG,aAAL,CAAmBC,GAAnB,CAAuBF,MAAM,CAACF,KAAD,CAA7B,EAAsC,KAAtC;AACH;AACJ;;AACgB,cAAXK,WAAW,GAAG;AAChB,iBAAO,IAAIC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,gBAAIC,IAAI,GAAGC,WAAW,CAAC,MAAM;AACzB,kBAAIC,IAAI,GAAG,IAAX;;AACA,mBAAK,MAAM,CAACC,GAAD,EAAMZ,KAAN,CAAX,IAA2B,KAAKG,aAAhC,EAA+C;AAC3C,oBAAIH,KAAK,IAAI,KAAb,EACIW,IAAI,GAAG,KAAP;AACP;;AACD,kBAAIA,IAAJ,EAAU;AACNE,gBAAAA,aAAa,CAACJ,IAAD,CAAb;AACAF,gBAAAA,OAAO;AACP;AACH;;AACDO,cAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AAEH,aAbqB,EAanB,GAbmB,CAAtB;AAcH,WAfM,CAAP;AAgBH;;AACDC,QAAAA,OAAO,CAACC,IAAD,EAAyB;AAC5B,eAAKd,aAAL,CAAmBC,GAAnB,CAAuBa,IAAvB,EAA6B,IAA7B;AACH;;AACDC,QAAAA,UAAU,CAACD,IAAD,EAAyB;AAC/B,eAAKd,aAAL,CAAmBC,GAAnB,CAAuBa,IAAvB,EAA6B,KAA7B;AACH;;AACDE,QAAAA,UAAU,CAACF,IAAD,EAAyB;AAC/B,iBAAO,KAAKd,aAAL,CAAmBiB,GAAnB,CAAuBH,IAAvB,CAAP;AACH;;AApCmE,O","sourcesContent":["import BaseSingleton from \"../../Patten/Singleton/BaseSingleton\";\r\nimport { CheckLoadingType } from \"../Enum/CheckLoadingType\";\r\n\r\nexport default class CheckLoading extends BaseSingleton<CheckLoading>() {\r\n    map_CheckList: Map<CheckLoadingType, boolean> = new Map()\r\n    constructor() {\r\n        super();\r\n        for (const value in CheckLoadingType) {\r\n            if (isNaN(Number(value))) break\r\n\r\n            this.map_CheckList.set(Number(value), false)\r\n        }\r\n    }\r\n    async checkAllEnd() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            let roop = setInterval(() => {\r\n                let isOK = true\r\n                for (const [key, value] of this.map_CheckList) {\r\n                    if (value == false)\r\n                        isOK = false\r\n                }\r\n                if (isOK) {\r\n                    clearInterval(roop)\r\n                    resolve()\r\n                    return\r\n                }\r\n                console.error(\"資料仔仔仔仔仔仔仔仔入中\");\r\n\r\n            }, 100)\r\n        })\r\n    }\r\n    endWork(type: CheckLoadingType) {\r\n        this.map_CheckList.set(type, true)\r\n    }\r\n    resetState(type: CheckLoadingType) {\r\n        this.map_CheckList.set(type, false)\r\n    }\r\n    checkState(type: CheckLoadingType) {\r\n        return this.map_CheckList.get(type)\r\n    }\r\n}"]}
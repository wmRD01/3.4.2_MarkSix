{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/%E6%97%A5%E7%AB%8B%E5%8C%85/assets/component/listView/ListViewNew.ts"],"names":["Component","EventHandler","instantiate","isValid","macro","UITransform","_decorator","PullScrollView","ListViewItemNew","ccclass","property","ListViewNew","type","Boolean","tooltip","visible","isPullUpdate","init","list","obj","initialled","DirectionVertical","dataList","totalCount","length","itemList","content","scrollView","contentUI","getComponent","updateTimer","updateInterval","lastContentPosY","lastContentPosX","lastContentPosyPageLoad","bufferZoneY","Math","ceil","spawnCount","colNum","itemHeight","spacingY","bufferZoneX","rowNum","itemWidth","spacingX","initialize","callBack","addPullScrollComp","jsPullScroll","node","addComponent","initForListView","refreshPullUpdate","refreshView","topUpdateCallback","emit","downUpdateCallback","removeAllItems","key","removeAllChildren","direction","height","i","item","itemPrefab","addChild","active","row","floor","col","x","setPosition","index","updateItem","push","width","y","getPositionInView","parent","worldPos","convertToWorldSpaceAR","position","viewPos","convertToNodeSpaceAR","update","dt","items","isDown","offset","newY","itemComp","isLeft","newX","updateData","isSplitLoad","notScrollToTop","NotScrollToTop","stopAutoScroll","updateDataAndSplitLoad","scrollToTop","data","scrollToLeft","updateHeightForData","updateDataNoChangeIndex","unschedule","schedule","REPEAT_FOREVER","viewHeight","viewWidth","onDestroy"],"mappings":"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","sourcesContent":["/* jshint esversion:6 */\n\nimport { Component, EventHandler, instantiate, isValid, macro, Node, Prefab, ScrollView, UITransform, _decorator } from \"cc\"\nimport PullScrollView from \"../scrollPull/PullScrollView\";\nimport ListViewItemNew from \"./ListViewItemNew\";\n\n/**\n * 仅调用一次\n * @param content 錨點需要設置為0.5；\n * @param item 需要繼承ListViewItemNew；\n */\nconst { ccclass, property } = _decorator;\n@ccclass('PaenlFunctionButton')\nexport default class ListViewNew extends Component {\n    scrollView: ScrollView;\n    itemPrefab: Prefab;//item预制体 预制挂的脚本要继承ListViewItem\n    direction: number = 1;  //1代表豎屏\n    spawnCount: number = 0; // 实际创建的项数量\n\n    spacingY: number = 0; // 纵向间隔\n    spacingX: number = 0; // 横向间隔\n\n    itemHeight: number = 0; // item的高度\n    itemWidth: number = 0; // item的高度\n    colNum: number = 1; // 纵向布局时的列数\n    rowNum: number = 1; // 横向布局时的行数\n    @property({ type: Boolean, tooltip: \"是否打开上拉、下拉刷新\", })\n    isPullUpdate: boolean = false;\n    //@ts-ignore\n    @property({ type: EventHandler, tooltip: \"顶部下拉刷新回调事件，不传默认关闭下拉刷新\", visible: () => { return this.isPullUpdate } })\n    //@ts-ignore\n    topUpdateCallback: EventHandler;\n    //@ts-ignore\n    @property({ type: EventHandler, tooltip: \"底部上拉刷新回调事件，不传默认关闭上拉刷新\", visible: () => { return this.isPullUpdate } })\n    downUpdateCallback: EventHandler;\n\n    DirectionVertical = 1; //1為豎屏 其他為橫屏\n    initialled = false;\n    obj;\n    dataList = [];\n    totalCount: number;\n    itemList = [];// 存储实际创建的项数组\n    content: Node;\n    updateTimer = 0;\n    updateInterval = 0.05;\n    lastContentPosY = 0; // 使用这个变量来判断滚动操作是向上还是向下\n    lastContentPosX = 0;\n    lastContentPosyPageLoad = 0; //这个属性是特殊场景上用，加载更多的最后恢复的位置（在上拉过程中会重置lastContentPosY，所有不准确）\n\n    bufferZoneY;\n    bufferZoneX;\n    callBack;\n    jsPullScroll;\n\n    contentUI: UITransform;\n    /**\n    * 仅调用一次\n    * @param list 列表数据\n    * @param obj 额外数据\n    */\n    init(list, obj) {\n        if (this.initialled) {\n            return;\n        }\n        this.DirectionVertical = 1; //1為豎屏 其他為橫屏\n        this.initialled = false;\n        this.obj = obj;\n        this.dataList = list || [];\n        this.totalCount = this.dataList.length;\n        this.itemList = [];// 存储实际创建的项数组\n        this.content = this.scrollView.content;\n        this.contentUI = this.content.getComponent(UITransform);\n        this.updateTimer = 0;\n        this.updateInterval = 0.05;\n        this.lastContentPosY = 0; // 使用这个变量来判断滚动操作是向上还是向下\n        this.lastContentPosX = 0;\n        this.lastContentPosyPageLoad = 0; //这个属性是特殊场景上用，加载更多的最后恢复的位置（在上拉过程中会重置lastContentPosY，所有不准确）\n        // 设定缓冲矩形的大小为实际创建项的高度累加，当某项超出缓冲矩形时，则更新该项的显示内容\n        this.bufferZoneY = Math.ceil(this.spawnCount / this.colNum) * (this.itemHeight + this.spacingY) / 2;\n        // 设定缓冲矩形的大小为实际创建项的宽度累加，当某项超出缓冲矩形时，则更新该项的显示内容\n        this.bufferZoneX = Math.ceil(this.spawnCount / this.rowNum) * (this.itemWidth + this.spacingX) / 2;\n        this.initialize();\n        this.initialled = true;\n        this.callBack = null;\n        this.addPullScrollComp();\n    }\n\n    // 添加上下拉刷新组件\n    addPullScrollComp() {\n        if (this.isPullUpdate) {\n            // let PullScrollView = require(\"PullScrollView\");\n            this.jsPullScroll = this.node.addComponent(PullScrollView);\n            this.jsPullScroll.initForListView(this);\n        }\n    }\n\n    // 高度改变时更新上下拉的高度\n    refreshPullUpdate() {\n        if (this.jsPullScroll) {\n            this.jsPullScroll.refreshView(\n                //@ts-ignore\n                () => { this.topUpdateCallback.emit(); },\n                //@ts-ignore\n                () => { this.downUpdateCallback.emit(); }\n            );\n        }\n    }\n\n    removeAllItems() {\n        for (const key in this.itemList) {\n            if (this.itemList[key]) {\n                this.itemList[key] = null;\n            }\n        }\n        this.itemList = [];\n        if (this.content) {\n            this.content.removeAllChildren();\n        }\n    }\n\n    // 列表初始化\n    initialize() {\n        // 获取整个列表的高度\n        if (this.direction == this.DirectionVertical) {\n            this.contentUI.height = Math.ceil(this.totalCount / this.colNum) * (this.itemHeight + this.spacingY) + this.spacingY;\n            for (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\n                let item = instantiate(this.itemPrefab);\n                this.content.addChild(item);\n                item.active = true;\n                //设置该item的坐标（注意父节点content的Anchor坐标是(0.5, 1)，所以item的y坐标总是负值）\n                let row = Math.floor(i / this.colNum);\n                let col = i % this.colNum;\n                let x = (this.itemWidth + this.spacingX) * (-(this.colNum - 1) * 0.5 + col);\n                item.setPosition(x, -this.itemHeight * (0.5 + row) - this.spacingY * (row + 1));\n                item.getComponent(ListViewItemNew).index = i;\n                item.getComponent(ListViewItemNew).updateItem(i, this.dataList[i], this.obj);\n                this.itemList.push(item);\n            }\n        } else {\n            this.contentUI.width = Math.ceil(this.totalCount / this.rowNum) * (this.itemWidth + this.spacingX) + this.spacingX;\n            for (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\n                let item = instantiate(this.itemPrefab);\n                this.content.addChild(item);\n                item.active = true;\n                // 设置该item的坐标（注意父节点content的Anchor坐标是(0, 0.5)，所以item的x坐标总是正值）\n                let col = Math.floor(i / this.rowNum);\n                let row = i % this.rowNum;\n                let y = (this.itemHeight + this.spacingY) * ((this.rowNum - 1) * 0.5 - row);\n                item.setPosition(this.itemWidth * (0.5 + col) + this.spacingX * (col + 1), y);\n                item.getComponent(ListViewItemNew).index = i;\n                item.getComponent(ListViewItemNew).updateItem(i, this.dataList[i], this.obj);\n                this.itemList.push(item);\n            }\n        }\n\n    }\n\n    // 返回item在ScrollView空间的坐标值\n    getPositionInView(item) {\n        if (isValid(item) && isValid(item.parent)) {\n            let worldPos = item.parent.convertToWorldSpaceAR(item.position);\n            let viewPos = this.scrollView.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);\n            return viewPos;\n        }\n    }\n\n    // 每帧调用一次。根据滚动位置动态更新item的坐标和显示(所以spawnCount可以比totalCount少很多)\n    update(dt) {\n        if (!this.initialled) {\n            return;\n        }\n        this.updateTimer += dt;\n        if (this.updateTimer < this.updateInterval || (this.itemList && this.itemList.length <= 0)) {\n            // console.log(\"updateTimer ========return\");\n            return; // 我们不需要每帧都做计算\n        }\n        this.updateTimer = 0;\n        let items = this.itemList;\n\n        if (this.direction == this.DirectionVertical) {\n            // 如果当前content的y坐标小于上次记录值，则代表往下滚动，否则往上。\n            let isDown = this.content.position.y < this.lastContentPosY;\n            // 实际创建项占了多高（即它们的高度累加）\n            let offset = (this.itemHeight + this.spacingY) * Math.ceil(this.spawnCount / this.colNum);\n            let newY = 0;\n\n            // 遍历数组，更新item的位置和显示\n            for (let i = 0; i < items.length; ++i) {\n                let viewPos = this.getPositionInView(items[i]);\n                if (isDown) {\n                    // 提前计算出该item的新的y坐标\n                    newY = items[i].y + offset;\n                    // 如果往下滚动时item已经超出缓冲矩形，且newY未超出content上边界，\n                    // 则更新item的坐标（即上移了一个offset的位置），同时更新item的显示内容\n                    if (viewPos.y < -this.bufferZoneY && newY < 0) {\n                        items[i].y = newY;\n                        let itemComp = items[i].getComponent(ListViewItemNew);\n                        let index = itemComp.index - items.length; // 更新index及数据下标\n                        itemComp.index = index;\n                        itemComp.updateItem(index, this.dataList[index], this.obj);\n                    }\n                } else {\n                    // 提前计算出该item的新的y坐标\n                    newY = items[i].y - offset;\n                    // 如果往上滚动时item已经超出缓冲矩形，且newY未超出content下边界，\n                    // 则更新item的坐标（即下移了一个offset的位置），同时更新item的显示内容\n                    if (viewPos.y > this.bufferZoneY && newY > -this.contentUI.height) {\n                        items[i].y = newY;\n                        let itemComp = items[i].getComponent(ListViewItemNew);\n                        let index = itemComp.index + items.length; // 更新index及数据下标\n                        itemComp.index = index;\n                        itemComp.updateItem(index, this.dataList[index], this.obj);\n                        this.lastContentPosyPageLoad = this.content.position.y\n                    }\n                }\n            }\n            // 更新lastContentPosY和总项数显示\n            this.lastContentPosY = this.content.position.y;\n        } else {\n            // 如果当前content的x坐标小于上次记录值，则代表往左滚动，否则往右。\n            let isLeft = this.content.position.x < this.lastContentPosX;\n            // 实际创建项占了多高（即它们的宽度累加）\n            let offset = (this.itemWidth + this.spacingX) * Math.ceil(this.spawnCount / this.rowNum);\n            let newX = 0;\n            // 遍历数组，更新item的位置和显示\n            for (let i = 0; i < items.length; ++i) {\n                let viewPos = this.getPositionInView(items[i]);\n                if (isLeft) {\n                    // 提前计算出该item的新的y坐标\n                    newX = items[i].x + offset;\n                    // 如果往左滚动时item已经超出缓冲矩形，且newX未超出content右边界，\n                    // 则更新item的坐标（即右移了一个offset的位置），同时更新item的显示内容\n                    if (viewPos.x < -this.bufferZoneX && newX < this.contentUI.width) {\n                        items[i].x = newX;\n                        let itemComp = items[i].getComponent(ListViewItemNew);\n                        let index = itemComp.index + items.length; // 更新index及数据下标\n                        itemComp.index = index;\n                        itemComp.updateItem(index, this.dataList[index], this.obj);\n                    }\n                } else {\n                    // 提前计算出该item的新的y坐标\n                    newX = items[i].x - offset;\n                    // 如果往右滚动时item已经超出缓冲矩形，且newY未超出content左边界，\n                    // 则更新item的坐标（即左移了一个offset的位置），同时更新item的显示内容\n                    if (viewPos.x > this.bufferZoneX && newX > 0) {\n                        items[i].x = newX;\n                        let itemComp = items[i].getComponent(ListViewItemNew);\n                        let index = itemComp.index - items.length; // 更新index及数据下标\n                        itemComp.index = index;\n                        itemComp.updateItem(index, this.dataList[index], this.obj);\n                    }\n                }\n            }\n            // 更新lastContentPosY和总项数显示\n            this.lastContentPosX = this.content.position.x;\n        }\n\n    }\n\n    //更新列表内数据\n    updateData(list, isSplitLoad, notScrollToTop) {\n        this.dataList = list;\n        let NotScrollToTop = this.dataList && this.dataList.length > this.spawnCount;\n        this.scrollView.stopAutoScroll();\n        if (isSplitLoad) {\n            this.updateDataAndSplitLoad(this.dataList);\n            return;\n        }\n        // \n        if (this.direction == this.DirectionVertical) {\n            if (!notScrollToTop || !NotScrollToTop) this.scrollView.scrollToTop();\n            for (let i = 0; i < this.itemList.length; i++) {\n                let row = Math.floor(i / this.colNum);\n                this.itemList[i].y = -this.itemHeight * (0.5 + row) - this.spacingY * (row + 1);\n                let itemComp = this.itemList[i].getComponent(ListViewItemNew);\n                let data = this.dataList[i];\n                itemComp.index = i;\n                itemComp.updateItem(i, data, this.obj);\n            }\n            this.contentUI.height = Math.ceil(this.dataList.length / this.colNum) * (this.itemHeight + this.spacingY) + this.spacingY;\n        } else {\n            if (!notScrollToTop || !NotScrollToTop) this.scrollView.scrollToLeft();\n            for (let i = 0; i < this.itemList.length; i++) {\n                let col = Math.floor(i / this.rowNum);\n                this.itemList[i].x = this.itemWidth * (0.5 + col) + this.spacingX * (col + 1);\n                let itemComp = this.itemList[i].getComponent(ListViewItemNew);\n                let data = this.dataList[i];\n                itemComp.index = i;\n                itemComp.updateItem(i, data, this.obj);\n            }\n            this.contentUI.width = Math.ceil(this.dataList.length / this.rowNum) * (this.itemWidth + this.spacingX) + this.spacingX;\n        }\n\n        this.updateHeightForData();\n    }\n\n    updateDataNoChangeIndex(list) {\n        if (!list || list.length <= 0) {\n            //@ts-ignore\n            this.dataList.content.x = 0;\n            return;\n        }\n        this.dataList = list;\n        for (let i = 0; i < this.itemList.length; i++) {\n            let itemComp = this.itemList[i].getComponent(ListViewItemNew);\n            let data = this.dataList[itemComp.index];\n            itemComp.updateItem(itemComp.index, data, list);\n        }\n        this.contentUI.width = Math.ceil(this.dataList.length / this.rowNum) * (this.itemWidth + this.spacingX) + this.spacingX;\n    }\n\n    // 更新列表内数据,分帧加载。\n    updateDataAndSplitLoad(list) {\n        this.initialled = false;\n        this.dataList = list;\n        this.scrollView.stopAutoScroll();\n        if (this.callBack) {\n\n            this.unschedule(this.callBack);\n        }\n        if (this.direction == this.DirectionVertical) {\n            let i = 0;\n            this.scrollView.scrollToTop();\n            this.contentUI.height = 0;\n            this.callBack = () => {\n                if (i >= this.itemList.length || !isValid(this.content)) {\n                    this.unschedule(this.callBack);\n                    this.callBack = null;\n                    this.initialled = true;\n                    if (this.content) this.contentUI.height = Math.ceil(this.dataList.length / this.colNum) * (this.itemHeight + this.spacingY) + this.spacingY;\n                    return;\n                }\n                let row = Math.floor(i / this.colNum);\n                this.itemList[i].y = -this.itemHeight * (0.5 + row) - this.spacingY * (row + 1);\n                let itemComp = this.itemList[i].getComponent(ListViewItemNew);\n                let data = this.dataList[i];\n                itemComp.index = i;\n                itemComp.updateItem(i, data, this.obj);\n                i++;\n            };\n        } else {\n            let i = 0;\n            this.scrollView.scrollToLeft();\n            this.contentUI.width = 0;\n            this.callBack = () => {\n                if (i >= this.itemList.length || !isValid(this.content)) {\n                    this.unschedule(this.callBack);\n                    this.callBack = null;\n                    this.initialled = true;\n                    if (this.content) this.contentUI.width = Math.ceil(this.dataList.length / this.rowNum) * (this.itemWidth + this.spacingX) + this.spacingX;\n                    return;\n                }\n                let col = Math.floor(i / this.rowNum);\n                this.itemList[i].x = this.itemWidth * (0.5 + col) + this.spacingX * (col + 1);\n                let itemComp = this.itemList[i].getComponent(ListViewItemNew);\n                itemComp.index = i;\n                let data = this.dataList[i];\n                itemComp.updateItem(i, data, this.obj);\n                i++;\n            };\n        }\n\n        this.schedule(this.callBack, 0.02, macro.REPEAT_FOREVER);\n    }\n\n    updateHeightForData(data?) {\n        if (data) {\n            this.dataList = data;\n        }\n        if (this.dataList) {\n            let length = this.dataList.length;\n            if (this.direction == this.DirectionVertical) {\n                // 计算真实高度\n                this.contentUI.height = Math.ceil(length / this.colNum) * (this.itemHeight + this.spacingY) + this.spacingY;\n                // 设置最小高度，使其能滚动\n                let viewHeight = this.content.parent.getComponent(UITransform).height;\n                if (this.contentUI.height < viewHeight) {\n                    this.contentUI.height = viewHeight;\n                }\n            } else {\n                // 计算真实宽度\n                this.contentUI.width = Math.ceil(length / this.rowNum) * (this.itemWidth + this.spacingX) + this.spacingX;\n                // 设置最小宽度，使其能滚动\n                let viewWidth = this.content.parent.getComponent(UITransform).width;\n                if (this.contentUI.width < viewWidth) {\n                    this.contentUI.width = viewWidth;\n                }\n            }\n        }\n\n        this.refreshPullUpdate();\n    }\n\n    onDestroy() {\n        //clearInterval(this.IntervalId);\n    }\n\n}\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/enc-base64url.js"],"names":["parseLoop","Base64url","stringify","wordArray","urlSafe","words","sigBytes","map","_safeMap","_map","clamp","base64Chars","i","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","reverseMap","_reverseMap","charCodeAt","paddingIndex","indexOf"],"mappings":";;;;;;AAIEA,MAAAA,S,gBAAAA,S;;;AAGF;AACA;AACA;2BACaC,S,GAAY;AACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,SAAS,CAACC,SAAD,EAAYC,OAAO,GAAG,IAAtB,EAA4B;AACnC;AACA,gBAAM;AAAEC,YAAAA,KAAF;AAASC,YAAAA;AAAT,cAAsBH,SAA5B;AACA,gBAAMI,GAAG,GAAGH,OAAO,GAAG,KAAKI,QAAR,GAAmB,KAAKC,IAA3C,CAHmC,CAKnC;;AACAN,UAAAA,SAAS,CAACO,KAAV,GANmC,CAQnC;;AACA,gBAAMC,WAAW,GAAG,EAApB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAApB,EAA8BM,CAAC,IAAI,CAAnC,EAAsC;AACpC,kBAAMC,KAAK,GAAIR,KAAK,CAACO,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAxD;AACA,kBAAME,KAAK,GAAIT,KAAK,CAAEO,CAAC,GAAG,CAAL,KAAY,CAAb,CAAL,KAA0B,KAAM,CAACA,CAAC,GAAG,CAAL,IAAU,CAAX,GAAgB,CAAhD,GAAsD,IAApE;AACA,kBAAMG,KAAK,GAAIV,KAAK,CAAEO,CAAC,GAAG,CAAL,KAAY,CAAb,CAAL,KAA0B,KAAM,CAACA,CAAC,GAAG,CAAL,IAAU,CAAX,GAAgB,CAAhD,GAAsD,IAApE;AAEA,kBAAMI,OAAO,GAAIH,KAAK,IAAI,EAAV,GAAiBC,KAAK,IAAI,CAA1B,GAA+BC,KAA/C;;AAEA,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAG,CAAL,IAAYL,CAAC,GAAGK,CAAC,GAAG,IAAR,GAAeX,QAA3C,EAAsDW,CAAC,IAAI,CAA3D,EAA8D;AAC5DN,cAAAA,WAAW,CAACO,IAAZ,CAAiBX,GAAG,CAACY,MAAJ,CAAYH,OAAO,KAAM,KAAK,IAAIC,CAAT,CAAd,GAA8B,IAAzC,CAAjB;AACD;AACF,WApBkC,CAsBnC;;;AACA,gBAAMG,WAAW,GAAGb,GAAG,CAACY,MAAJ,CAAW,EAAX,CAApB;;AACA,cAAIC,WAAJ,EAAiB;AACf,mBAAOT,WAAW,CAACU,MAAZ,GAAqB,CAA5B,EAA+B;AAC7BV,cAAAA,WAAW,CAACO,IAAZ,CAAiBE,WAAjB;AACD;AACF;;AAED,iBAAOT,WAAW,CAACW,IAAZ,CAAiB,EAAjB,CAAP;AACD,SA/CsB;;AAiDvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,KAAK,CAACC,SAAD,EAAYpB,OAAO,GAAG,IAAtB,EAA4B;AAC/B;AACA,cAAIqB,eAAe,GAAGD,SAAS,CAACH,MAAhC;AACA,gBAAMd,GAAG,GAAGH,OAAO,GAAG,KAAKI,QAAR,GAAmB,KAAKC,IAA3C;AACA,cAAIiB,UAAU,GAAG,KAAKC,WAAtB;;AAEA,cAAI,CAACD,UAAL,EAAiB;AACf,iBAAKC,WAAL,GAAmB,EAAnB;AACAD,YAAAA,UAAU,GAAG,KAAKC,WAAlB;;AACA,iBAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,GAAG,CAACc,MAAxB,EAAgCJ,CAAC,IAAI,CAArC,EAAwC;AACtCS,cAAAA,UAAU,CAACnB,GAAG,CAACqB,UAAJ,CAAeX,CAAf,CAAD,CAAV,GAAgCA,CAAhC;AACD;AACF,WAZ8B,CAc/B;;;AACA,gBAAMG,WAAW,GAAGb,GAAG,CAACY,MAAJ,CAAW,EAAX,CAApB;;AACA,cAAIC,WAAJ,EAAiB;AACf,kBAAMS,YAAY,GAAGL,SAAS,CAACM,OAAV,CAAkBV,WAAlB,CAArB;;AACA,gBAAIS,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBJ,cAAAA,eAAe,GAAGI,YAAlB;AACD;AACF,WArB8B,CAuB/B;;;AACA,iBAAO7B,SAAS,CAACwB,SAAD,EAAYC,eAAZ,EAA6BC,UAA7B,CAAhB;AACD,SAzFsB;;AA2FvBjB,QAAAA,IAAI,EAAE,mEA3FiB;AA6FvBD,QAAAA,QAAQ,EAAE;AA7Fa,O","sourcesContent":["import {\n  WordArray,\n} from './core.js';\nimport {\n  parseLoop,\n} from './enc-base64.js'\n\n/**\n * Base64url encoding strategy.\n */\nexport const Base64url = {\n  /**\n   * Converts a word array to a Base64url string.\n   *\n   * @param {WordArray} wordArray The word array.\n   * \n   * @param {boolean} urlSafe Whether to use url safe.\n   *\n   * @return {string} The Base64url string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray, urlSafe = true) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n    const map = urlSafe ? this._safeMap : this._map;\n\n    // Clamp excess bits\n    wordArray.clamp();\n\n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      const byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n      const byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n      const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n      for (let j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j += 1) {\n        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n      }\n    }\n\n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64url string to a word array.\n   *\n   * @param {string} base64Str The Base64url string.\n   * \n   * @param {boolean} urlSafe Whether to use url safe.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str, urlSafe = true) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = urlSafe ? this._safeMap : this._map;\n    let reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    }\n\n    // Ignore padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    }\n\n    // Convert\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\n  _safeMap: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n};\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/evpkdf.js"],"names":["EvpKDFAlgo","Base","WordArray","MD5Algo","constructor","cfg","Object","assign","keySize","hasher","iterations","compute","password","salt","block","create","derivedKey","derivedKeyWords","words","length","update","finalize","reset","i","concat","sigBytes","EvpKDF"],"mappings":";;;gCAUaA,U;;;;;;AATXC,MAAAA,I,gBAAAA,I;AACAC,MAAAA,S,gBAAAA,S;;AAEOC,MAAAA,O,iBAAAA,O;;;AAET;AACA;AACA;AACA;4BACaH,U,GAAN,MAAMA,UAAN,SAAyBC,IAAzB,CAA8B;AACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,QAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,eAAKA,GAAL,GAAWC,MAAM,CAACC,MAAP,CACT,IAAIN,IAAJ,EADS,EAET;AACEO,YAAAA,OAAO,EAAE,MAAM,EADjB;AAEEC,YAAAA,MAAM,EAAEN,OAFV;AAGEO,YAAAA,UAAU,EAAE;AAHd,WAFS,EAOTL,GAPS,CAAX;AASD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,QAAAA,OAAO,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACtB,cAAIC,KAAJ,CADsB,CAGtB;;AACA,gBAAM;AAAET,YAAAA;AAAF,cAAU,IAAhB,CAJsB,CAMtB;;AACA,gBAAMI,MAAM,GAAGJ,GAAG,CAACI,MAAJ,CAAWM,MAAX,EAAf,CAPsB,CAStB;;AACA,gBAAMC,UAAU,GAAGd,SAAS,CAACa,MAAV,EAAnB,CAVsB,CAYtB;;AACA,gBAAME,eAAe,GAAGD,UAAU,CAACE,KAAnC;AACA,gBAAM;AAAEV,YAAAA,OAAF;AAAWE,YAAAA;AAAX,cAA0BL,GAAhC,CAdsB,CAgBtB;;AACA,iBAAOY,eAAe,CAACE,MAAhB,GAAyBX,OAAhC,EAAyC;AACvC,gBAAIM,KAAJ,EAAW;AACTL,cAAAA,MAAM,CAACW,MAAP,CAAcN,KAAd;AACD;;AACDA,YAAAA,KAAK,GAAGL,MAAM,CAACW,MAAP,CAAcR,QAAd,EAAwBS,QAAxB,CAAiCR,IAAjC,CAAR;AACAJ,YAAAA,MAAM,CAACa,KAAP,GALuC,CAOvC;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,UAApB,EAAgCa,CAAC,IAAI,CAArC,EAAwC;AACtCT,cAAAA,KAAK,GAAGL,MAAM,CAACY,QAAP,CAAgBP,KAAhB,CAAR;AACAL,cAAAA,MAAM,CAACa,KAAP;AACD;;AAEDN,YAAAA,UAAU,CAACQ,MAAX,CAAkBV,KAAlB;AACD;;AACDE,UAAAA,UAAU,CAACS,QAAX,GAAsBjB,OAAO,GAAG,CAAhC;AAEA,iBAAOQ,UAAP;AACD;;AAhFkC,O;AAmFrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;wBACaU,M,GAAS,CAACd,QAAD,EAAWC,IAAX,EAAiBR,GAAjB,KAAyBL,UAAU,CAACe,MAAX,CAAkBV,GAAlB,EAAuBM,OAAvB,CAA+BC,QAA/B,EAAyCC,IAAzC,C","sourcesContent":["import {\n  Base,\n  WordArray,\n} from './core.js';\nimport { MD5Algo } from './md5.js';\n\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\nexport class EvpKDFAlgo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n    this.cfg = Object.assign(\n      new Base(),\n      {\n        keySize: 128 / 32,\n        hasher: MD5Algo,\n        iterations: 1,\n      },\n      cfg,\n    );\n  }\n\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n  compute(password, salt) {\n    let block;\n\n    // Shortcut\n    const { cfg } = this;\n\n    // Init hasher\n    const hasher = cfg.hasher.create();\n\n    // Initial values\n    const derivedKey = WordArray.create();\n\n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const { keySize, iterations } = cfg;\n\n    // Generate key\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n      block = hasher.update(password).finalize(salt);\n      hasher.reset();\n\n      // Iterations\n      for (let i = 1; i < iterations; i += 1) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n\n      derivedKey.concat(block);\n    }\n    derivedKey.sigBytes = keySize * 4;\n\n    return derivedKey;\n  }\n}\n\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\nexport const EvpKDF = (password, salt, cfg) => EvpKDFAlgo.create(cfg).compute(password, salt);\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/index.js"],"names":["Base","WordArray","Hex","Latin1","Utf8","BufferedBlockAlgorithm","Hasher","X64Word","X64WordArray","Cipher","StreamCipher","BlockCipherMode","CBC","Pkcs7","BlockCipher","CipherParams","OpenSSLFormatter","SerializableCipher","OpenSSLKdf","PasswordBasedCipher","Utf16","Utf16BE","Utf16LE","Base64","Base64url","HMAC","MD5Algo","MD5","HmacMD5","SHA1Algo","SHA1","HmacSHA1","SHA224Algo","SHA224","HmacSHA224","SHA256Algo","SHA256","HmacSHA256","SHA384Algo","SHA384","HmacSHA384","SHA512Algo","SHA512","HmacSHA512","SHA3Algo","SHA3","HmacSHA3","RIPEMD160Algo","RIPEMD160","HmacRIPEMD160","PBKDF2Algo","PBKDF2","EvpKDFAlgo","EvpKDF","AESAlgo","AES","DESAlgo","DES","TripleDESAlgo","TripleDES","RabbitAlgo","Rabbit","RabbitLegacyAlgo","RabbitLegacy","RC4Algo","RC4","RC4DropAlgo","RC4Drop","BlowfishAlgo","Blowfish","CFB","CTR","CTRGladman","ECB","OFB","AnsiX923","Iso10126","Iso97971","NoPadding","ZeroPadding","HexFormatter","lib","x64","Word","enc","algo","mode","pad","format","OpenSSL","kdf"],"mappings":"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","sourcesContent":["import {\n  Base,\n  WordArray,\n  Hex,\n  Latin1,\n  Utf8,\n  BufferedBlockAlgorithm,\n  Hasher,\n} from './core.js';\nimport {\n  X64Word,\n  X64WordArray,\n} from './x64-core.js';\nimport {\n  Cipher,\n  StreamCipher,\n  BlockCipherMode,\n  CBC,\n  Pkcs7,\n  BlockCipher,\n  CipherParams,\n  OpenSSLFormatter,\n  SerializableCipher,\n  OpenSSLKdf,\n  PasswordBasedCipher,\n} from './cipher-core.js';\n\nimport { Utf16, Utf16BE, Utf16LE } from './enc-utf16.js';\nimport { Base64 } from './enc-base64.js';\nimport { Base64url } from './enc-base64url.js';\nimport { HMAC } from './hmac.js';\nimport { MD5Algo, MD5, HmacMD5 } from './md5.js';\nimport { SHA1Algo, SHA1, HmacSHA1 } from './sha1.js';\nimport { SHA224Algo, SHA224, HmacSHA224 } from './sha224.js';\nimport { SHA256Algo, SHA256, HmacSHA256 } from './sha256.js';\nimport { SHA384Algo, SHA384, HmacSHA384 } from './sha384.js';\nimport { SHA512Algo, SHA512, HmacSHA512 } from './sha512.js';\nimport { SHA3Algo, SHA3, HmacSHA3 } from './sha3.js';\nimport { RIPEMD160Algo, RIPEMD160, HmacRIPEMD160 } from './ripemd160.js';\nimport { PBKDF2Algo, PBKDF2 } from './pbkdf2.js';\nimport { EvpKDFAlgo, EvpKDF } from './evpkdf.js';\nimport { AESAlgo, AES } from './aes.js';\nimport {\n  DESAlgo,\n  DES,\n  TripleDESAlgo,\n  TripleDES,\n} from './tripledes.js';\nimport { RabbitAlgo, Rabbit } from './rabbit.js';\nimport { RabbitLegacyAlgo, RabbitLegacy } from './rabbit-legacy.js';\nimport {\n  RC4Algo,\n  RC4,\n  RC4DropAlgo,\n  RC4Drop,\n} from './rc4.js';\nimport { BlowfishAlgo, Blowfish } from './blowfish.js';\nimport { CFB } from './mode-cfb.js';\nimport { CTR } from './mode-ctr.js';\nimport { CTRGladman } from './mode-ctr-gladman.js';\nimport { ECB } from './mode-ecb.js';\nimport { OFB } from './mode-ofb.js';\nimport { AnsiX923 } from './pad-ansix923.js';\nimport { Iso10126 } from './pad-iso10126.js';\nimport { Iso97971 } from './pad-iso97971.js';\nimport { NoPadding } from './pad-nopadding.js';\nimport { ZeroPadding } from './pad-zeropadding.js';\nimport { HexFormatter } from './format-hex.js';\n\nexport default {\n  lib: {\n    Base,\n    WordArray,\n    BufferedBlockAlgorithm,\n    Hasher,\n    Cipher,\n    StreamCipher,\n    BlockCipherMode,\n    BlockCipher,\n    CipherParams,\n    SerializableCipher,\n    PasswordBasedCipher,\n  },\n\n  x64: {\n    Word: X64Word,\n    WordArray: X64WordArray,\n  },\n\n  enc: {\n    Hex,\n    Latin1,\n    Utf8,\n    Utf16,\n    Utf16BE,\n    Utf16LE,\n    Base64,\n    Base64url,\n  },\n\n  algo: {\n    HMAC,\n    MD5: MD5Algo,\n    SHA1: SHA1Algo,\n    SHA224: SHA224Algo,\n    SHA256: SHA256Algo,\n    SHA384: SHA384Algo,\n    SHA512: SHA512Algo,\n    SHA3: SHA3Algo,\n    RIPEMD160: RIPEMD160Algo,\n\n    PBKDF2: PBKDF2Algo,\n    EvpKDF: EvpKDFAlgo,\n\n    AES: AESAlgo,\n    DES: DESAlgo,\n    TripleDES: TripleDESAlgo,\n    Rabbit: RabbitAlgo,\n    RabbitLegacy: RabbitLegacyAlgo,\n    RC4: RC4Algo,\n    RC4Drop: RC4DropAlgo,\n    Blowfish: BlowfishAlgo,\n  },\n\n  mode: {\n    CBC,\n    CFB,\n    CTR,\n    CTRGladman,\n    ECB,\n    OFB,\n  },\n\n  pad: {\n    Pkcs7,\n    AnsiX923,\n    Iso10126,\n    Iso97971,\n    NoPadding,\n    ZeroPadding,\n  },\n\n  format: {\n    OpenSSL: OpenSSLFormatter,\n    Hex: HexFormatter,\n  },\n\n  kdf: {\n    OpenSSL: OpenSSLKdf,\n  },\n\n  MD5,\n  HmacMD5,\n  SHA1,\n  HmacSHA1,\n  SHA224,\n  HmacSHA224,\n  SHA256,\n  HmacSHA256,\n  SHA384,\n  HmacSHA384,\n  SHA512,\n  HmacSHA512,\n  SHA3,\n  HmacSHA3,\n  RIPEMD160,\n  HmacRIPEMD160,\n\n  PBKDF2,\n  EvpKDF,\n\n  AES,\n  DES,\n  TripleDES,\n  Rabbit,\n  RabbitLegacy,\n  RC4,\n  RC4Drop,\n  Blowfish,\n};\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/sha256.js"],"names":["SHA256Algo","WordArray","Hasher","H","K","isPrime","n","sqrtN","Math","sqrt","factor","getFractionalBits","nPrime","W","_doReset","_hash","slice","_doProcessBlock","M","offset","_H","words","a","b","c","d","e","f","g","h","i","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","_doFinalize","data","_data","dataWords","nBitsTotal","_nDataBytes","nBitsLeft","sigBytes","floor","length","_process","clone","call","SHA256","_createHelper","HmacSHA256","_createHmacHelper"],"mappings":"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","sourcesContent":["import {\n  WordArray,\n  Hasher,\n} from './core.js';\n\n// Initialization and round constants tables\nconst H = [];\nconst K = [];\n\n// Compute constants\nconst isPrime = (n) => {\n  const sqrtN = Math.sqrt(n);\n  for (let factor = 2; factor <= sqrtN; factor += 1) {\n    if (!(n % factor)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst getFractionalBits = n => ((n - (n | 0)) * 0x100000000) | 0;\n\nlet n = 2;\nlet nPrime = 0;\nwhile (nPrime < 64) {\n  if (isPrime(n)) {\n    if (nPrime < 8) {\n      H[nPrime] = getFractionalBits(n ** (1 / 2));\n    }\n    K[nPrime] = getFractionalBits(n ** (1 / 3));\n\n    nPrime += 1;\n  }\n\n  n += 1;\n}\n\n// Reusable object\nconst W = [];\n\n/**\n * SHA-256 hash algorithm.\n */\nexport class SHA256Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray(H.slice(0));\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcut\n    const _H = this._hash.words;\n\n    // Working variables\n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7];\n\n    // Computation\n    for (let i = 0; i < 64; i += 1) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const gamma0x = W[i - 15];\n        const gamma0 = ((gamma0x << 25) | (gamma0x >>> 7))\n          ^ ((gamma0x << 14) | (gamma0x >>> 18))\n          ^ (gamma0x >>> 3);\n\n        const gamma1x = W[i - 2];\n        const gamma1 = ((gamma1x << 15) | (gamma1x >>> 17))\n          ^ ((gamma1x << 13) | (gamma1x >>> 19))\n          ^ (gamma1x >>> 10);\n\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n\n      const ch = (e & f) ^ (~e & g);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n\n      const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n      const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));\n\n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n\n      h = g;\n      g = f;\n      f = e;\n      e = (d + t1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (t1 + t2) | 0;\n    }\n\n    // Intermediate hash value\n    _H[0] = (_H[0] + a) | 0;\n    _H[1] = (_H[1] + b) | 0;\n    _H[2] = (_H[2] + c) | 0;\n    _H[3] = (_H[3] + d) | 0;\n    _H[4] = (_H[4] + e) | 0;\n    _H[5] = (_H[5] + f) | 0;\n    _H[6] = (_H[6] + g) | 0;\n    _H[7] = (_H[7] + h) | 0;\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Return final computed hash\n    return this._hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA256('message');\n *     var hash = CryptoJS.SHA256(wordArray);\n */\nexport const SHA256 = Hasher._createHelper(SHA256Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA256(message, key);\n */\nexport const HmacSHA256 = Hasher._createHmacHelper(SHA256Algo);\n"]}
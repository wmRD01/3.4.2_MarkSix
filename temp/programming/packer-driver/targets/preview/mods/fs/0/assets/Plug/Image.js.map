{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/Image.ts"],"names":["Image","cc","transformTextureToSpriteAtlas","plist","imageAsset","info","frames","atlas","SpriteAtlas","spriteFrames","key","texture","Texture2D","image","frame","rotated","sourceSize","offsetStr","textureRect","format","originalWidth","originalHeight","offsetX","offsetY","x","y","width","height","offset","textureRotated","spriteSourceSize","spriteOffset","sprite","SpriteFrame","reset","originalSize","parseSize","rect","parseRect","parseVec2","isRotate","triangles","vertices","parseVertices","verticesUV","parseTriangles","u","v","i","length","push","name","path","mainFileName","rectStr","replace","BRACE_REGEX","arr","split","Rect","parseFloat","sizeStr","slice","Size","vec2Str","Vec2","trianglesStr","map","verticesStr"],"mappings":"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","sourcesContent":["import * as cc from \"cc\";\r\n\r\nexport default class Image {\r\n\r\n    private static BRACE_REGEX = /[\\{\\}]/g;\r\n\r\n    static transformTextureToSpriteAtlas(plist: cc.Asset, imageAsset: cc.ImageAsset): cc.SpriteAtlas {\r\n        let info = plist[\"_nativeAsset\"][\"metadata\"];\r\n        let frames = plist[\"_nativeAsset\"][\"frames\"];\r\n\r\n        let atlas = new cc.SpriteAtlas();\r\n        // console.log(atlas);\r\n\r\n        let spriteFrames = atlas[\"spriteFrames\"];\r\n\r\n        // cc.log(plist);\r\n\r\n        for (let key in frames) {\r\n            let texture = new cc.Texture2D()\r\n            texture.image = imageAsset\r\n            let frame = frames[key];\r\n            let rotated = false, sourceSize, offsetStr, textureRect;\r\n            if (info.format === 0) {\r\n                rotated = false;\r\n                sourceSize = `{${frame.originalWidth},${frame.originalHeight}}`;\r\n                offsetStr = `{${frame.offsetX},${frame.offsetY}}`;\r\n                textureRect = `{{${frame.x},${frame.y}},{${frame.width},${frame.height}}}`;\r\n            } else if (info.format === 1 || info.format === 2) {\r\n                rotated = frame.rotated;\r\n                sourceSize = frame.sourceSize;\r\n                offsetStr = frame.offset;\r\n                textureRect = frame.frame;\r\n            } else if (info.format === 3) {\r\n                rotated = frame.textureRotated;\r\n                sourceSize = frame.spriteSourceSize;\r\n                offsetStr = frame.spriteOffset;\r\n                textureRect = frame.textureRect;\r\n            }\r\n\r\n            var sprite = new cc.SpriteFrame();\r\n            // console.log(sprite);\r\n\r\n            sprite.reset({\r\n                originalSize: this.parseSize(sourceSize),\r\n                rect: this.parseRect(textureRect),\r\n                offset: this.parseVec2(offsetStr),\r\n                isRotate: !!rotated,\r\n                texture: texture,\r\n            });\r\n            if (frame.triangles) {\r\n                let vertices = this.parseVertices(frame.vertices);\r\n                let verticesUV = this.parseVertices(frame.verticesUV);\r\n                //@ts-ignore\r\n                sprite[\"vertices\"] = {\r\n                    triangles: this.parseTriangles(frame.triangles),\r\n                    x: [],\r\n                    y: [],\r\n                    u: [],\r\n                    v: []\r\n                };\r\n\r\n                for (let i = 0; i < vertices.length; i += 2) {\r\n                    sprite[\"vertices\"].x.push(vertices[i]);\r\n                    sprite[\"vertices\"].y.push(vertices[i + 1]);\r\n                }\r\n                for (let i = 0; i < verticesUV.length; i += 2) {\r\n                    sprite[\"vertices\"].u.push(verticesUV[i]);\r\n                    sprite[\"vertices\"].v.push(verticesUV[i + 1]);\r\n                }\r\n            }\r\n            let name = cc.path.mainFileName(key);\r\n            sprite.name = name\r\n\r\n            spriteFrames[name] = sprite;\r\n        }\r\n        return atlas;\r\n    }\r\n\r\n    private static parseRect(rectStr) {\r\n        rectStr = rectStr.replace(this.BRACE_REGEX, '');\r\n        let arr = rectStr.split(',');\r\n        return new cc.Rect(\r\n            parseFloat(arr[0] || 0),\r\n            parseFloat(arr[1] || 0),\r\n            parseFloat(arr[2] || 0),\r\n            parseFloat(arr[3] || 0),\r\n        );\r\n    }\r\n\r\n    private static parseSize(sizeStr) {\r\n        sizeStr = sizeStr.slice(1, -1);\r\n        let arr = sizeStr.split(',');\r\n        let width = parseFloat(arr[0]);\r\n        let height = parseFloat(arr[1]);\r\n        return new cc.Size(width, height);\r\n    }\r\n\r\n    private static parseVec2(vec2Str) {\r\n        vec2Str = vec2Str.slice(1, -1);\r\n        var arr = vec2Str.split(',');\r\n        var x = parseFloat(arr[0]);\r\n        var y = parseFloat(arr[1]);\r\n        return new cc.Vec2(x, y);\r\n    }\r\n\r\n    private static parseTriangles(trianglesStr) {\r\n        return trianglesStr.split(' ').map(parseFloat);\r\n    }\r\n\r\n    private static parseVertices(verticesStr) {\r\n        return verticesStr.split(' ').map(parseFloat);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/AES.ts"],"names":["AES","Cipher","BlockCipher","PasswordBasedCipher","SerializableCipher","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","computeLookupTables","d","i","x","xi","sx","x2","x4","x8","t","RCON","constructor","props","_props","_doReset","_nRounds","_keyPriorReset","_key","key","keyWords","words","keySize","nSigBytes","nRounds","ksRows","keySchedule","_keySchedule","ksRow","_invKeySchedule","invKsRow","encryptBlock","offset","_doCryptBlock","decryptBlock","subMix0","subMix1","subMix2","subMix3","sBox","s0","s1","s2","s3","round","_s0","_s1","_s2","_s3","t0","t1","t2","t3","createEncryptor","transformMode","ENC_TRANSFORM_MODE","createDecryptor","DEC_TRANSFORM_MODE","encrypt","message","Error","decrypt","cipherParams"],"mappings":"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","sourcesContent":["import {Cipher, CipherProps, PropsWithKey} from \"./lib/algorithm/cipher/Cipher\";\nimport type {Word32Array} from \"./lib/Word32Array\";\nimport {BlockCipher, BlockCipherProps} from \"./lib/algorithm/cipher/BlockCipher\";\nimport {PasswordBasedCipher} from \"./lib/algorithm/cipher/PasswordBasedCipher\";\nimport {SerializableCipher} from \"./lib/algorithm/cipher/SerializableCipher\";\nimport type {CipherParams} from \"./lib/algorithm/cipher/CipherParams\";\n\n// Lookup tables\nconst SBOX: number[] = [];\nconst INV_SBOX: number[] = [];\nconst SUB_MIX_0: number[] = [];\nconst SUB_MIX_1: number[] = [];\nconst SUB_MIX_2: number[] = [];\nconst SUB_MIX_3: number[] = [];\nconst INV_SUB_MIX_0: number[] = [];\nconst INV_SUB_MIX_1: number[] = [];\nconst INV_SUB_MIX_2: number[] = [];\nconst INV_SUB_MIX_3: number[] = [];\n\n(function computeLookupTables() {\n  // Compute double table\n  const d: number[] = [];\n  for (let i = 0; i < 256; i++) {\n    if (i < 128) {\n      d[i] = i << 1;\n    } else {\n      d[i] = (i << 1) ^ 0x11b;\n    }\n  }\n  \n  // Walk GF(2^8)\n  let x = 0;\n  let xi = 0;\n  for (let i = 0; i < 256; i++) {\n    // Compute sbox\n    let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n    SBOX[x] = sx;\n    INV_SBOX[sx] = x;\n    \n    // Compute multiplication\n    const x2 = d[x];\n    const x4 = d[x2];\n    const x8 = d[x4];\n    \n    // Compute sub bytes, mix columns tables\n    let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n    SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n    SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n    SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n    SUB_MIX_3[x] = t;\n    \n    // Compute inv sub bytes, inv mix columns tables\n    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n    INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n    INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n    INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n    INV_SUB_MIX_3[sx] = t;\n    \n    // Compute next counter\n    if (!x) {\n      x = xi = 1;\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]];\n      xi ^= d[d[xi]];\n    }\n  }\n}());\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\nexport interface AESProps extends BlockCipherProps {\n}\n\nexport class AES extends BlockCipher {\n  public static readonly keySize = 256/32;\n  protected _props: PropsWithKey<AESProps>;\n  protected _nRounds: number = 0;\n  protected _keyPriorReset: Word32Array|undefined;\n  protected _keySchedule: number[] = [];\n  protected _invKeySchedule: number[] = [];\n  \n  public constructor(props: PropsWithKey<AESProps>) {\n    super(props);\n    this._props = props;\n    \n    this._doReset();\n  }\n  \n  protected _doReset() {\n    let t;\n  \n    // Skip reset of nRounds has been set before and key did not change\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    }\n  \n    // Shortcuts\n    const key = this._keyPriorReset = this._key;\n    const keyWords = key.words;\n    const keySize = key.nSigBytes / 4;\n  \n    // Compute number of rounds\n    const nRounds = this._nRounds = keySize + 6;\n  \n    // Compute number of key schedule rows\n    const ksRows = (nRounds + 1) * 4;\n  \n    // Compute key schedule\n    const keySchedule: number[] = this._keySchedule = [];\n    for (let ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      }\n      else {\n        t = keySchedule[ksRow - 1];\n      \n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = (t << 8) | (t >>> 24);\n        \n          // Sub word\n          t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n        \n          // Mix Rcon\n          t ^= RCON[(ksRow / keySize) | 0] << 24;\n        }\n        else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n        }\n      \n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    }\n  \n    // Compute inv key schedule\n    this._invKeySchedule = [];\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      const ksRow = ksRows - invKsRow;\n      \n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      }\n      else {\n        t = keySchedule[ksRow - 4];\n      }\n    \n      if (invKsRow < 4 || ksRow <= 4) {\n        this._invKeySchedule[invKsRow] = t;\n      }\n      else {\n        this._invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n          INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n      }\n    }\n  }\n  \n  public encryptBlock(words: number[], offset: number) {\n    this._doCryptBlock(words, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n  }\n  \n  public decryptBlock(words: number[], offset: number) {\n    // Swap 2nd and 4th rows\n    let t = words[offset + 1];\n    words[offset + 1] = words[offset + 3];\n    words[offset + 3] = t;\n  \n    this._doCryptBlock(words, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n  \n    // Inv swap 2nd and 4th rows\n    t = words[offset + 1];\n    words[offset + 1] = words[offset + 3];\n    words[offset + 3] = t;\n  }\n  \n  protected _doCryptBlock(\n    words: number[],\n    offset: number,\n    keySchedule: number[],\n    subMix0: number[],\n    subMix1: number[],\n    subMix2: number[],\n    subMix3: number[],\n    sBox: number[],\n  ){\n    // Shortcut\n    const nRounds = this._nRounds;\n  \n    // Get input, add round key\n    let s0 = words[offset]     ^ keySchedule[0];\n    let s1 = words[offset + 1] ^ keySchedule[1];\n    let s2 = words[offset + 2] ^ keySchedule[2];\n    let s3 = words[offset + 3] ^ keySchedule[3];\n  \n    // Key schedule row counter\n    let ksRow = 4;\n  \n    // Rounds\n    for (let round = 1; round < nRounds; round++) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const _s0 = subMix0[s0 >>> 24] ^ subMix1[(s1 >>> 16) & 0xff]\n        ^ subMix2[(s2 >>> 8) & 0xff] ^ subMix3[s3 & 0xff] ^ keySchedule[ksRow++];\n      const _s1 = subMix0[s1 >>> 24] ^ subMix1[(s2 >>> 16) & 0xff]\n        ^ subMix2[(s3 >>> 8) & 0xff] ^ subMix3[s0 & 0xff] ^ keySchedule[ksRow++];\n      const _s2 = subMix0[s2 >>> 24] ^ subMix1[(s3 >>> 16) & 0xff]\n        ^ subMix2[(s0 >>> 8) & 0xff] ^ subMix3[s1 & 0xff] ^ keySchedule[ksRow++];\n      const _s3 = subMix0[s3 >>> 24] ^ subMix1[(s0 >>> 16) & 0xff]\n        ^ subMix2[(s1 >>> 8) & 0xff] ^ subMix3[s2 & 0xff] ^ keySchedule[ksRow++];\n    \n      // Update state\n      s0 = _s0;\n      s1 = _s1;\n      s2 = _s2;\n      s3 = _s3;\n    }\n  \n    // Shift rows, sub bytes, add round key\n    const t0 = ((sBox[s0 >>> 24] << 24) | (sBox[(s1 >>> 16) & 0xff] << 16)\n      | (sBox[(s2 >>> 8) & 0xff] << 8) | sBox[s3 & 0xff]) ^ keySchedule[ksRow++];\n    const t1 = ((sBox[s1 >>> 24] << 24) | (sBox[(s2 >>> 16) & 0xff] << 16)\n      | (sBox[(s3 >>> 8) & 0xff] << 8) | sBox[s0 & 0xff]) ^ keySchedule[ksRow++];\n    const t2 = ((sBox[s2 >>> 24] << 24) | (sBox[(s3 >>> 16) & 0xff] << 16)\n      | (sBox[(s0 >>> 8) & 0xff] << 8) | sBox[s1 & 0xff]) ^ keySchedule[ksRow++];\n    const t3 = ((sBox[s3 >>> 24] << 24) | (sBox[(s0 >>> 16) & 0xff] << 16)\n      | (sBox[(s1 >>> 8) & 0xff] << 8) | sBox[s2 & 0xff]) ^ keySchedule[ksRow++];\n  \n    // Set output\n    words[offset]     = t0;\n    words[offset + 1] = t1;\n    words[offset + 2] = t2;\n    words[offset + 3] = t3;\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new AES({...props, key, transformMode: Cipher.ENC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new AES({...props, key, transformMode: Cipher.DEC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Encrypt a message with key\n   * \n   * @param {Word32Array|string} message\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = AES.encrypt(\"test\", \"pass\");\n   */\n  public static encrypt(message: Word32Array|string, key: Word32Array|string, props?: Partial<AESProps>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.encrypt(AES, message, key, props);\n    }\n    \n    if(key.nSigBytes % 4 !== 0){\n      throw new Error(\"Key size must be multiple of 32bit/4byte/1word\");\n    }\n    return SerializableCipher.encrypt(AES, message, key, props);\n  }\n  \n  /**\n   * Encrypt a encrypted message with key\n   *\n   * @param {CipherParams|string} cipherParams\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = AES.decrypt(cipherProps, \"pass\");\n   */\n  public static decrypt(cipherParams: CipherParams|string, key: Word32Array|string, props?: Partial<AESProps>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.decrypt(AES, cipherParams, key, props);\n    }\n  \n    if(key.nSigBytes % 4 !== 0){\n      throw new Error(\"Key size must be multiple of 32bit/4byte/1word\");\n    }\n    return SerializableCipher.decrypt(AES, cipherParams, key, props);\n  }\n}\n"]}
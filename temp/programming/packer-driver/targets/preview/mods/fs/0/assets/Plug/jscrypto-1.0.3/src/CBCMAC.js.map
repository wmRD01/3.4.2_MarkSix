{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/CBCMAC.ts"],"names":["CBCMAC","plainText","associatedData","key","iv","tagLength","props","Cipher","K","parse","N","A","P","t","mac","Utf8","Word32Array","AES","CCM"],"mappings":";;;;;AAUO,WAASA,MAAT,CACLC,SADK,EAELC,cAFK,EAGLC,GAHK,EAILC,EAJK,EAKLC,SALK,EAMLC,KANK,EAON;AACC,QAAMC,MAAM,GAAID,KAAK,IAAIA,KAAK,CAACC,MAAhB,GAA0BD,KAAK,CAACC,MAAhC;AAAA;AAAA,kBAAf;AACA,QAAMC,CAAC,GAAG,OAAOL,GAAP,KAAe,QAAf,GAA0B;AAAA;AAAA,sBAAKM,KAAL,CAAWN,GAAX,CAA1B,GAA4CA,GAAtD;AACA,QAAMO,CAAC,GAAGN,EAAE,GAAGA,EAAH,GAAQ;AAAA;AAAA,oCAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAApB;AACA,QAAMO,CAAC,GAAG,OAAOT,cAAP,KAA0B,QAA1B,GAAqC;AAAA;AAAA,sBAAKO,KAAL,CAAWP,cAAX,CAArC,GAAkEA,cAA5E;AACA,QAAMU,CAAC,GAAG,OAAOX,SAAP,KAAqB,QAArB,GAAgC;AAAA;AAAA,sBAAKQ,KAAL,CAAWR,SAAX,CAAhC,GAAwDA,SAAlE;AACA,QAAMY,CAAC,GAAGR,SAAS,IAAI,EAAvB;AAEA,WAAO;AAAA;AAAA,oBAAIS,GAAJ,CAAQP,MAAR,EAAgBC,CAAhB,EAAmBE,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;oBAhBeb,M;;;;;;;;AAVRe,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,G,iBAAAA,G;;AACAC,MAAAA,G,iBAAAA,G","sourcesContent":["import {Utf8} from \"./lib/encoder/Utf8\";\nimport {Word32Array} from \"./lib/Word32Array\";\nimport {AES} from \"./AES\";\nimport {CCM} from \"./mode/CCM\";\nimport {BlockCipher} from \"./lib/algorithm/cipher/BlockCipher\";\n\nexport type CBCMACProps = {\n  Cipher: typeof BlockCipher;\n};\n\nexport function CBCMAC(\n  plainText: Word32Array|string,\n  associatedData: Word32Array|string,\n  key: Word32Array|string,\n  iv: Word32Array|null,\n  tagLength?: number,\n  props?: Partial<CBCMACProps>,\n){\n  const Cipher = (props && props.Cipher) ? props.Cipher : AES;\n  const K = typeof key === \"string\" ? Utf8.parse(key) : key;\n  const N = iv ? iv : new Word32Array([0, 0]);\n  const A = typeof associatedData === \"string\" ? Utf8.parse(associatedData) : associatedData;\n  const P = typeof plainText === \"string\" ? Utf8.parse(plainText) : plainText;\n  const t = tagLength || 16;\n  \n  return CCM.mac(Cipher, K, N, A, P, t);\n}"]}
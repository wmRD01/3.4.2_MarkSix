{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/DES3.ts"],"names":["DES3","SerializableCipher","BlockCipher","Cipher","DES","Word32Array","PasswordBasedCipher","constructor","props","_props","TripleDES","_get3DES","_des1","_des2","_des3","key","_key","keyWords","words","length","Error","key1","slice","key2","key3","des1","createEncryptor","des2","des3","_doReset","encryptBlock","offset","decryptBlock","transformMode","ENC_TRANSFORM_MODE","createDecryptor","DEC_TRANSFORM_MODE","encrypt","message","decrypt","cipherText"],"mappings":"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","sourcesContent":["import {SerializableCipher} from \"./lib/algorithm/cipher/SerializableCipher\";\nimport {BlockCipher, BlockCipherProps} from \"./lib/algorithm/cipher/BlockCipher\";\nimport {Cipher, CipherProps, PropsWithKey} from \"./lib/algorithm/cipher/Cipher\";\nimport {DES} from \"./DES\";\nimport {Word32Array} from \"./lib/Word32Array\";\nimport {PasswordBasedCipher} from \"./lib/algorithm/cipher/PasswordBasedCipher\";\nimport {CipherParams} from \"./lib/algorithm/cipher/CipherParams\";\n\nexport interface DES3Props extends BlockCipherProps {}\n\nexport class DES3 extends BlockCipher {\n  public static readonly keySize = 192/32;\n  public static readonly ivSize = 64/32;\n  protected _blockSize = 64/32;\n  protected _des1: DES;\n  protected _des2: DES;\n  protected _des3: DES;\n  \n  public constructor(props: PropsWithKey<DES3Props>) {\n    super(props);\n    this._props = props;\n    \n    const TripleDES = this._get3DES();\n    \n    // Create DES instances\n    this._des1 = TripleDES[0];\n    this._des2 = TripleDES[1];\n    this._des3 = TripleDES[2];\n  }\n  \n  protected _get3DES(){\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    // Make sure the key length is valid (64, 128 or >= 192 bit)\n    if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n      throw new Error(\"Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.\");\n    }\n    \n    // Extend the key according to the keying options defined in 3DES standard\n    const key1 = keyWords.slice(0, 2);\n    const key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n    const key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n    \n    // Create DES instances\n    const des1 = DES.createEncryptor(new Word32Array(key1));\n    const des2 = DES.createEncryptor(new Word32Array(key2));\n    const des3 = DES.createEncryptor(new Word32Array(key3));\n    return [des1, des2, des3];\n  }\n  \n  protected _doReset() {\n    const TripleDES = this._get3DES();\n    // Create DES instances\n    this._des1 = TripleDES[0];\n    this._des2 = TripleDES[1];\n    this._des3 = TripleDES[2];\n  }\n  \n  public encryptBlock(words: number[], offset: number) {\n    this._des1.encryptBlock(words, offset);\n    this._des2.decryptBlock(words, offset);\n    this._des3.encryptBlock(words, offset);\n  }\n  \n  public decryptBlock(words: number[], offset: number) {\n    this._des3.decryptBlock(words, offset);\n    this._des2.encryptBlock(words, offset);\n    this._des1.decryptBlock(words, offset);\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = DES3.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new DES3({...props, key, transformMode: Cipher.ENC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = DES3.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<CipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new DES3({...props, key, transformMode: Cipher.DEC_TRANSFORM_MODE});\n  }\n  \n  /**\n   * Encrypt a message with key\n   *\n   * @param {Word32Array|string} message\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = DES3.encrypt(\"test\", \"pass\");\n   */\n  public static encrypt(message: Word32Array|string, key: Word32Array|string, props?: Partial<DES3Props>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.encrypt(DES3, message, key, props);\n    }\n    return SerializableCipher.encrypt(DES3, message, key, props);\n  }\n  \n  /**\n   * Encrypt a encrypted message with key\n   *\n   * @param {CipherParams} cipherText\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = DES3.decrypt(cipherProps, \"pass\");\n   */\n  public static decrypt(cipherText: CipherParams, key: Word32Array|string, props?: Partial<DES3Props>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.decrypt(DES3, cipherText, key, props);\n    }\n    return SerializableCipher.decrypt(DES3, cipherText, key, props);\n  }\n}\n"]}
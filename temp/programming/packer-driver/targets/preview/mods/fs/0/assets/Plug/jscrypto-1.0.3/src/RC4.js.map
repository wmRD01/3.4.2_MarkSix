{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/RC4.ts"],"names":["RC4","StreamCipher","PasswordBasedCipher","SerializableCipher","constructor","props","_props","_doReset","key","_key","keyWords","words","keySigBytes","nSigBytes","S","i","j","keyByteIndex","keyByte","t","_doProcessBlock","offset","generateKeyStreamWord","keyStreamWord","n","createEncryptor","createDecryptor","encrypt","message","decrypt","cipherText"],"mappings":"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","sourcesContent":["import {PropsWithKey} from \"./lib/algorithm/cipher/Cipher\";\nimport type {Word32Array} from \"./lib/Word32Array\";\nimport {StreamCipher, StreamCipherProps} from \"./lib/algorithm/cipher/StreamCipher\";\nimport {PasswordBasedCipher} from \"./lib/algorithm/cipher/PasswordBasedCipher\";\nimport {SerializableCipher} from \"./lib/algorithm/cipher/SerializableCipher\";\nimport {CipherParams} from \"./lib/algorithm/cipher/CipherParams\";\n\nexport interface RC4Props extends StreamCipherProps {\n}\n\nexport class RC4 extends StreamCipher {\n  public static readonly ivSize = 0;\n  public static readonly keySize = 256/32;\n  protected _props: PropsWithKey<RC4Props>;\n  protected S: number[] = [];\n  protected i: number = 0;\n  protected j: number = 0;\n  \n  public constructor(props: PropsWithKey<RC4Props>) {\n    super(props);\n    this._props = props;\n    \n    this._doReset();\n  }\n  \n  protected _doReset() {\n    // Shortcuts\n    const key = this._key;\n    const keyWords = key.words;\n    const keySigBytes = key.nSigBytes;\n  \n    // Init sbox\n    this.S = [];\n    for (let i = 0; i < 256; i++) {\n      this.S[i] = i;\n    }\n  \n    // Key setup\n    for (let i = 0, j = 0; i < 256; i++) {\n      const keyByteIndex = i % keySigBytes;\n      const keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n    \n      j = (j + this.S[i] + keyByte) % 256;\n    \n      // Swap\n      const t = this.S[i];\n      this.S[i] = this.S[j];\n      this.S[j] = t;\n    }\n  \n    // Counters\n    this.i = this.j = 0;\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    words[offset] ^= this.generateKeyStreamWord();\n  }\n  \n  protected generateKeyStreamWord(){\n    // Shortcuts\n    const S = this.S;\n    let i = this.i;\n    let j = this.j;\n  \n    // Generate keyStream word\n    let keyStreamWord = 0;\n    for (let n = 0; n < 4; n++) {\n      i = (i + 1) % 256;\n      j = (j + S[i]) % 256;\n    \n      // Swap\n      const t = S[i];\n      S[i] = S[j];\n      S[j] = t;\n    \n      keyStreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n    }\n  \n    // Update counters\n    this.i = i;\n    this.j = j;\n  \n    return keyStreamWord;\n  }\n  \n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = RC4.createEncryptor(keyWordArray);\n   */\n  public static createEncryptor(key: Word32Array, props?: Partial<StreamCipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new RC4({...props, key});\n  }\n  \n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {Word32Array} key The key.\n   * @param {Partial<CipherProps>?} props (Optional) The configuration options to use for this operation.\n   * @return {Cipher} A cipher instance.\n   * @example\n   *   var cipher = RC4.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  public static createDecryptor(key: Word32Array, props?: Partial<StreamCipherProps>){\n    props = typeof props === \"undefined\" ? {} : props;\n    return new RC4({...props, key});\n  }\n  \n  /**\n   * Encrypt a message with key\n   * \n   * @param {Word32Array|string} message\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = RC4.encrypt(\"test\", \"pass\");\n   */\n  public static encrypt(message: Word32Array|string, key: Word32Array|string, props?: Partial<RC4Props>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.encrypt(RC4, message, key, props);\n    }\n    return SerializableCipher.encrypt(RC4, message, key, props);\n  }\n  \n  /**\n   * Encrypt a encrypted message with key\n   *\n   * @param {CipherParams} cipherText\n   * @param {Word32Array|string} key\n   * @param {Partial<AESProps>?} props\n   * @example\n   *   var encryptedMessage = RC4.decrypt(cipherProps, \"pass\");\n   */\n  public static decrypt(cipherText: CipherParams, key: Word32Array|string, props?: Partial<RC4Props>){\n    if(typeof key === \"string\"){\n      return PasswordBasedCipher.decrypt(RC4, cipherText, key, props);\n    }\n    return SerializableCipher.decrypt(RC4, cipherText, key, props);\n  }\n}\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/SHA1.ts"],"names":["SHA1","Hasher","Word32Array","W","constructor","props","_props","hash","_hash","clone","_doReset","_doProcessBlock","words","offset","H","a","b","c","d","e","i","n","t","_doFinalize","dataWords","_data","nBitsTotal","_nBytes","nBitsLeft","nSigBytes","Math","floor","length","_process","blockSize","_blockSize","data","nBytes","message","finalize"],"mappings":"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","sourcesContent":["import {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA1Props extends HasherProps {\n  hash: Word32Array;\n}\n\n// Reusable object\nconst W: number[] = [];\n\nexport class SHA1 extends Hasher {\n  protected _props?: Partial<SHA1Props>;\n  private _hash: Word32Array = new Word32Array([\n    0x67452301, 0xefcdab89,\n    0x98badcfe, 0x10325476,\n    0xc3d2e1f0\n  ]);\n  \n  public constructor(props?: SHA1Props) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word32Array([\n      0x67452301, 0xefcdab89,\n      0x98badcfe, 0x10325476,\n      0xc3d2e1f0\n    ]);\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    const H = this._hash.words;\n  \n    // Working variables\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n  \n    // Computation\n    for(let i=0;i<80;i++){\n      if (i < 16) {\n        W[i] = words[offset + i] | 0;\n      }\n      else {\n        const n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n        W[i] = (n << 1) | (n >>> 31);\n      }\n    \n      let t = ((a << 5) | (a >>> 27)) + e + W[i];\n      if (i < 20) {\n        t += ((b & c) | (~b & d)) + 0x5a827999;\n      }\n      else if (i < 40) {\n        t += (b ^ c ^ d) + 0x6ed9eba1;\n      }\n      else if (i < 60) {\n        t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n      }\n      else /* if (i < 80) */ {\n        t += (b ^ c ^ d) - 0x359d3e2a;\n      }\n    \n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n  \n    // Intermediate hash value\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n    H[4] = (H[4] + e) | 0;\n  }\n  \n  protected _doFinalize(): Word32Array {\n    // Shortcuts\n    const dataWords = this._data.words;\n  \n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = this._data.nSigBytes * 8;\n  \n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    this._data.nSigBytes = dataWords.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Return final computed hash\n    return this._hash;\n  }\n  \n  public clone(){\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA1(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA1Props){\n    return new SHA1(props).finalize(message);\n  }\n}\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/SHA256.ts"],"names":["SHA256","isPrime","n","sqrtN","Math","sqrt","factor","getFractionalBits","Hasher","Word32Array","H","K","computeRoundConstants","nPrime","pow","W","constructor","props","slice","_props","hash","_hash","clone","_doReset","_doProcessBlock","words","offset","_H","a","b","c","d","e","f","g","h","i","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","_doFinalize","_data","nBitsTotal","_nBytes","nBitsLeft","nSigBytes","floor","length","_process","blockSize","_blockSize","data","nBytes","message","finalize"],"mappings":"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","sourcesContent":["import {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA256Props extends HasherProps {\n  hash: Word32Array;\n}\n\n// Hash values\nconst H: number[] = [];\n// Round constants\nconst K: number[] = [];\n\nfunction isPrime(n: number){\n  const sqrtN = Math.sqrt(n);\n  for(let factor=2;factor<=sqrtN;factor++){\n    if(!(n % factor)){\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getFractionalBits(n: number) {\n  return ((n - (n | 0)) * 0x100000000) | 0;\n}\n\n(function computeRoundConstants(){\n  let n = 2;\n  let nPrime = 0;\n  while(nPrime < 64){\n    if(isPrime(n)){\n      if(nPrime < 8){\n        H[nPrime] = getFractionalBits(Math.pow(n, 1/2));\n      }\n      K[nPrime] = getFractionalBits(Math.pow(n, 1/3));\n      nPrime++;\n    }\n    n++;\n  }\n})();\n\n// Reusable object\nconst W: number[] = [];\n\nexport class SHA256 extends Hasher {\n  protected _props?: Partial<SHA256Props>;\n  protected _hash: Word32Array = new Word32Array(H.slice(0));\n  \n  public constructor(props?: SHA256Props) {\n    super(props);\n    this._props = props;\n    if(props && typeof props.hash !== \"undefined\"){\n      this._hash = props.hash.clone();\n    }\n  }\n  \n  protected _doReset() {\n    this._hash = new Word32Array(H.slice(0));\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    const _H = this._hash.words;\n    \n    let a = _H[0];\n    let b = _H[1];\n    let c = _H[2];\n    let d = _H[3];\n    let e = _H[4];\n    let f = _H[5];\n    let g = _H[6];\n    let h = _H[7];\n    \n    for(let i=0;i<64;i++){\n      if(i < 16){\n        W[i] = words[offset + i] | 0;\n      }\n      else{\n        const gamma0x = W[i-15];\n        const gamma0 = ((gamma0x << 25) | (gamma0x >>> 7))\n          ^ ((gamma0x << 14) | (gamma0x >>> 18))\n          ^ (gamma0x >>> 3);\n  \n        const gamma1x = W[i - 2];\n        const gamma1  = ((gamma1x << 15) | (gamma1x >>> 17))\n          ^ ((gamma1x << 13) | (gamma1x >>> 19))\n          ^ (gamma1x >>> 10);\n  \n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n  \n      const ch  = (e & f) ^ (~e & g);\n      const maj = (a & b) ^ (a & c) ^ (b & c);\n  \n      const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n      const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n  \n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n  \n      h = g;\n      g = f;\n      f = e;\n      e = (d + t1) | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = (t1 + t2) | 0;\n    }\n  \n    // Intermediate hash value\n    _H[0] = (_H[0] + a) | 0;\n    _H[1] = (_H[1] + b) | 0;\n    _H[2] = (_H[2] + c) | 0;\n    _H[3] = (_H[3] + d) | 0;\n    _H[4] = (_H[4] + e) | 0;\n    _H[5] = (_H[5] + f) | 0;\n    _H[6] = (_H[6] + g) | 0;\n    _H[7] = (_H[7] + h) | 0;\n  }\n  \n  protected _doFinalize(): Word32Array {\n    const words = this._data.words;\n    const nBitsTotal = this._nBytes * 8;\n    const nBitsLeft = this._data.nSigBytes * 8;\n  \n    // Add padding\n    words[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n    words[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    words[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    this._data.nSigBytes = words.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Return final computed hash\n    return this._hash;\n  }\n  \n  public clone() {\n    const props = {hash: this._hash, blockSize: this._blockSize, data: this._data, nBytes: this._nBytes};\n    return new SHA256(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA256Props){\n    return new SHA256(props).finalize(message);\n  }\n}\n"]}
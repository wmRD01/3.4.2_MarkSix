{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/SHA3.ts"],"names":["SHA3","Word64","Hasher","Word32Array","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","computeConstants","x","y","t","newX","newY","p","q","LFSR","i","roundConstantMsw","roundConstantLsw","j","bitPosition","T","constructor","props","_props","outputLength","includes","Error","_outputLength","state","_state","map","s","clone","length","_blockSize","_doReset","_doProcessBlock","words","offset","nBlockSizeLanes","W2i","W2i1","high","low","round","tMsw","tLsw","l","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","lane","roundConstant","_doFinalize","data","_data","dataWords","nBitsLeft","nSigBytes","blockSizeBits","blockSize","Math","ceil","_process","outputLengthBytes","outputLengthLanes","hashWords","push","nBytes","_nBytes","hash","message","finalize"],"mappings":"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","sourcesContent":["// Constants tables\nimport {Word64} from \"./lib/Word64Array\";\nimport {Hasher, HasherProps} from \"./lib/algorithm/Hasher\";\nimport {Word32Array} from \"./lib/Word32Array\";\n\nexport interface SHA3Props extends HasherProps {\n  state: Word64[];\n  outputLength: number;\n}\n\nconst RHO_OFFSETS: number[] = [];\nconst PI_INDEXES: number[]  = [];\nconst ROUND_CONSTANTS: Word64[] = [];\n\n// Compute Constants\n(function computeConstants() {\n  // Compute rho offset constants\n  let x = 1;\n  let y = 0;\n  for (let t = 0; t < 24; t++) {\n    RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n    \n    const newX = y % 5;\n    const newY = (2 * x + 3 * y) % 5;\n    x = newX;\n    y = newY;\n  }\n  \n  // Compute pi index constants\n  for (let p = 0; p < 5; p++) {\n    for (let q = 0; q < 5; q++) {\n      PI_INDEXES[p + 5 * q] = q + ((2 * p + 3 * q) % 5) * 5;\n    }\n  }\n  \n  // Compute round constants\n  let LFSR = 0x01;\n  for (let i = 0; i < 24; i++) {\n    let roundConstantMsw = 0;\n    let roundConstantLsw = 0;\n    \n    for (let j = 0; j < 7; j++) {\n      if (LFSR & 0x01) {\n        const bitPosition = (1 << j) - 1;\n        if (bitPosition < 32) {\n          roundConstantLsw ^= 1 << bitPosition;\n        } else /* if (bitPosition >= 32) */ {\n          roundConstantMsw ^= 1 << (bitPosition - 32);\n        }\n      }\n      \n      // Compute next LFSR\n      if (LFSR & 0x80) {\n        // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n        LFSR = (LFSR << 1) ^ 0x71;\n      } else {\n        LFSR <<= 1;\n      }\n    }\n    \n    ROUND_CONSTANTS[i] = new Word64(roundConstantMsw, roundConstantLsw);\n  }\n}());\n\n// Reusable objects for temporary values\nconst T: Word64[] = [];\n(function () {\n  for(let i = 0; i < 25; i++) {\n    T[i] = new Word64(0, 0);\n  }\n}());\n\nexport class SHA3 extends Hasher {\n  protected _props?: Partial<SHA3Props>;\n  protected _blockSize = 1024/32;\n  protected _state: Word64[] = []\n  protected _outputLength: number = 512;\n  \n  public constructor(props?: Partial<SHA3Props>) {\n    super(props);\n    this._props = props;\n    \n    if(props){\n      if(typeof props.outputLength !== \"undefined\"){\n        if(![224,256,384,512].includes(props.outputLength)){\n          throw new Error(\"Unsupported output length.\");\n        }\n        this._outputLength = props.outputLength;\n      }\n      if(typeof props.state !== \"undefined\"){\n        this._state = props.state.map(s => s.clone());\n      }\n    }\n    \n    if(this._state.length === 0){\n      for(let i=0;i<25;i++){\n        this._state[i] = new Word64(0, 0);\n      }\n    }\n    \n    this._blockSize = (1600 - 2*this._outputLength) / 32;\n  }\n  \n  protected _doReset() {\n    this._state = [];\n    for(let i=0;i<25;i++){\n      this._state[i] = new Word64(0, 0);\n    }\n    this._blockSize = (1600 - 2*this._outputLength) / 32;\n  }\n  \n  protected _doProcessBlock(words: number[], offset: number) {\n    // Shortcuts\n    const state = this._state;\n    const nBlockSizeLanes = this._blockSize / 2;\n  \n    // Absorb\n    for(let i = 0; i < nBlockSizeLanes; i++) {\n      // Shortcuts\n      let W2i  = words[offset + 2 * i];\n      let W2i1 = words[offset + 2 * i + 1];\n    \n      // Swap endian\n      W2i = (\n        (((W2i << 8)  | (W2i >>> 24)) & 0x00ff00ff) |\n        (((W2i << 24) | (W2i >>> 8))  & 0xff00ff00)\n      );\n      W2i1 = (\n        (((W2i1 << 8)  | (W2i1 >>> 24)) & 0x00ff00ff) |\n        (((W2i1 << 24) | (W2i1 >>> 8))  & 0xff00ff00)\n      );\n    \n      // Absorb message into state\n      state[i].high ^= W2i1;\n      state[i].low  ^= W2i;\n    }\n  \n    // Rounds\n    for (let round = 0; round < 24; round++) {\n      // Theta\n      for (let x = 0; x < 5; x++) {\n        // Mix column lanes\n        let tMsw = 0;\n        let tLsw = 0;\n        for (let y = 0; y < 5; y++) {\n          const l = state[x + 5 * y];\n          tMsw ^= l.high;\n          tLsw ^= l.low;\n        }\n      \n        // Temporary values\n        const Tx = T[x];\n        Tx.high = tMsw;\n        Tx.low  = tLsw;\n      }\n      for (let x = 0; x < 5; x++) {\n        // Shortcuts\n        const Tx4 = T[(x + 4) % 5];\n        const Tx1 = T[(x + 1) % 5];\n        const Tx1Msw = Tx1.high;\n        const Tx1Lsw = Tx1.low;\n      \n        // Mix surrounding columns\n        const tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n        const tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n        for (let y = 0; y < 5; y++) {\n          const l = state[x + 5 * y];\n          l.high ^= tMsw;\n          l.low  ^= tLsw;\n        }\n      }\n    \n      // Rho Pi\n      for (let laneIndex = 1; laneIndex < 25; laneIndex++) {\n        let tMsw: number;\n        let tLsw: number;\n      \n        // Shortcuts\n        const laneMsw = state[laneIndex].high;\n        const laneLsw = state[laneIndex].low;\n        const rhoOffset = RHO_OFFSETS[laneIndex];\n      \n        // Rotate lanes\n        if (rhoOffset < 32) {\n          tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n          tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n        } else /* if (rhoOffset >= 32) */ {\n          tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n          tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n        }\n      \n        // Transpose lanes\n        const TPiLane = T[PI_INDEXES[laneIndex]];\n        TPiLane.high = tMsw;\n        TPiLane.low  = tLsw;\n      }\n    \n      // Rho pi at x = y = 0\n      const T0 = T[0];\n      const state0 = state[0];\n      T0.high = state0.high;\n      T0.low  = state0.low;\n    \n      // Chi\n      for (let x = 0; x < 5; x++) {\n        for (let y = 0; y < 5; y++) {\n          // Shortcuts\n          const laneIndex = x + 5 * y;\n          const l = state[laneIndex];\n          const TLane = T[laneIndex];\n          const Tx1Lane = T[((x + 1) % 5) + 5 * y];\n          const Tx2Lane = T[((x + 2) % 5) + 5 * y];\n        \n          // Mix rows\n          l.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n          l.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n        }\n      }\n    \n      // Iota\n      const lane = state[0];\n      const roundConstant = ROUND_CONSTANTS[round];\n      lane.high ^= roundConstant.high;\n      lane.low  ^= roundConstant.low;\n    }\n  }\n  \n  protected _doFinalize(): Word32Array {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsLeft = data.nSigBytes * 8;\n    const blockSizeBits = this.blockSize * 32;\n  \n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n    dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n    data.nSigBytes = dataWords.length * 4;\n  \n    // Hash final blocks\n    this._process();\n  \n    // Shortcuts\n    const state = this._state;\n    const outputLengthBytes = this._outputLength / 8;\n    const outputLengthLanes = outputLengthBytes / 8;\n  \n    // Squeeze\n    const hashWords = [];\n    for (let i = 0; i < outputLengthLanes; i++) {\n      // Shortcuts\n      const lane = state[i];\n      let laneMsw = lane.high;\n      let laneLsw = lane.low;\n    \n      // Swap endian\n      laneMsw = (\n        (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n        (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n      );\n      laneLsw = (\n        (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n        (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n      );\n    \n      // Squeeze state to retrieve hash\n      hashWords.push(laneLsw);\n      hashWords.push(laneMsw);\n    }\n  \n    // Return final computed hash\n    return new Word32Array(hashWords, outputLengthBytes);\n  }\n  \n  public clone(){\n    const props = {\n      outputLength: this._outputLength,\n      state: this._state,\n      blockSize: this._blockSize,\n      data: this._data,\n      nBytes: this._nBytes,\n    };\n    return new SHA3(props);\n  }\n  \n  public static hash(message: Word32Array|string, props?: SHA3Props){\n    return new SHA3(props).finalize(message);\n  }\n}"]}
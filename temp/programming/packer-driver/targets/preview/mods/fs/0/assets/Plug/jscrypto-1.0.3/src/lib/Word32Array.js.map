{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/Word32Array.ts"],"names":["Word32Array","Hex","random","constructor","words","nSignificantBytes","Array","isArray","_words","_nSignificantBytes","length","slice","nSigBytes","uint8Array","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","e","Error","byteLen","w","i","n","toString","encoder","stringify","toUint8Array","nB","concat","N","clamp","b","Math","ceil","clone","nBytes","push"],"mappings":"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","sourcesContent":["import type {IEncoder} from \"./type\";\nimport {Hex} from \"./encoder/Hex\";\nimport {random} from \"./random\";\n\ntype ByteArray = ArrayBuffer | Uint8Array | Int8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array |\nUint32Array | Float32Array | Float64Array;\n\n/**\n * An array of 32bit words\n */\nexport class Word32Array {\n  private readonly _words: number[];\n  private _nSignificantBytes: number;\n  \n  /**\n   * Initializes a newly created word array.\n   * \n   * ByteArray Support thanks to\n   * https://github.com/entronad/crypto-es/blob/master/lib/core.js\n   * MIT License Copyright(c) LIN Chen\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} nSignificantBytes (Optional) The number of significant bytes in the words.\n   * @example\n   *   var words = new Word32Array();\n   *   var words = new Word32Array([0x00010203, 0x04050607]);\n   *   var words = new Word32Array([0x00010203, 0x04050607], 6);\n   *   // Cloning wordArray can be done like below.\n   *   var clone = (new Word32Array([0x00010203, 0x04050607])).clone();\n   *   // or\n   *   var clone = new Word32Array(new Word32Array([0x00010203, 0x04050607]));\n   */\n  public constructor(words?: number[]|Word32Array|ByteArray|unknown, nSignificantBytes?: number) {\n    if(Array.isArray(words) || !words){\n      this._words = Array.isArray(words) ? words : [];\n      this._nSignificantBytes = typeof nSignificantBytes === \"number\" ? nSignificantBytes : this._words.length * 4;\n      return;\n    }\n    else if(words instanceof Word32Array){\n      this._words = words.words.slice();\n      this._nSignificantBytes = words.nSigBytes;\n      return;\n    }\n  \n    let uint8Array: Uint8Array|undefined;\n    // IE9 does not implement TypedArray. So catch exception for that case.\n    try{\n      if(words instanceof ArrayBuffer){\n        uint8Array = new Uint8Array(words);\n      }\n      else if(\n        words instanceof Uint8Array\n        || words instanceof Int8Array\n        || words instanceof Uint8ClampedArray\n        || words instanceof Int16Array\n        || words instanceof Uint16Array\n        || words instanceof Int32Array\n        || words instanceof Uint32Array\n        || words instanceof Float32Array\n        || words instanceof Float64Array\n      ){\n        uint8Array = new Uint8Array(words.buffer, words.byteOffset, words.byteLength);\n      }\n    }\n    catch(e){\n      throw new Error(\"Invalid argument\");\n    }\n    \n    if(!uint8Array){\n      throw new Error(\"Invalid argument\");\n    }\n    \n    const byteLen = uint8Array.byteLength;\n    const w: number[] = [];\n    for(let i=0;i<byteLen;i++){\n      w[i>>>2] |= uint8Array[i] << (24 - (i%4) * 8);\n    }\n    \n    this._words = w;\n    this._nSignificantBytes = byteLen;\n  }\n  \n  public get nSigBytes(){\n    return this._nSignificantBytes;\n  }\n  \n  /**\n   * Set significant bytes\n   * @param {number} n - significant bytes\n   */\n  public set nSigBytes(n: number){\n    this._nSignificantBytes = n;\n  }\n  \n  /**\n   * Get raw reference of internal words.\n   * Modification of this raw array will affect internal words.\n   */\n  public get words(){\n    return this._words;\n  }\n  \n  /**\n   * Converts this word array to a string.\n   *\n   * @param {IEncoder?} encoder The encoding strategy to use. Default: CryptoJS.enc.Hex\n   * @return {string} The stringified word array.\n   * @example\n   *   var string = wordArray + '';\n   *   var string = wordArray.toString();\n   *   var string = wordArray.toString(Utf8);\n   */\n  public toString(encoder?: IEncoder){\n    if(!encoder){\n      return Hex.stringify(this);\n    }\n    return encoder.stringify(this);\n  }\n  \n  /**\n   * Converts this 32bit word array to Uint8Array\n   * \n   * @return {Uint8Array} Unsigned int 8bit array\n   * @example\n   *   var word = new Word32Array([0x00102030]);\n   *   var uint8 = word.toUint8Array(); // Uint8Array(4) [ 0, 16, 32, 48 ]\n   */\n  public toUint8Array(){\n    const words = this._words;\n    const nB = this._nSignificantBytes;\n    const uint8Array = new Uint8Array(nB);\n    \n    for(let i=0;i<nB;i++){\n      uint8Array[i] = (words[i>>>2] >>> (24 - (i%4) * 8)) & 0xff;\n    }\n    \n    return uint8Array;\n  }\n  \n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {Word32Array} w The word array to append.\n   * @return {Word32Array} This word array.\n   * @example\n   *   wordArray1.concat(wordArray2);\n   */\n  public concat(w: Word32Array){\n    const words = w.words.slice();\n    const N = w.nSigBytes;\n    \n    this.clamp();\n  \n    if(this._nSignificantBytes % 4){\n      // Copy one byte at a time\n      for(let i=0;i<N;i++){\n        const b = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        this._words[(this._nSignificantBytes + i) >>> 2] |= b << (24 - ((this._nSignificantBytes + i) % 4) * 8);\n      }\n    }\n    else {\n      // Copy one word at a time\n      for(let i=0;i<N;i+=4) {\n        this._words[(this._nSignificantBytes + i) >>> 2] = words[i >>> 2];\n      }\n    }\n    \n    this._nSignificantBytes += N;\n  \n    // Chainable\n    return this;\n  }\n  \n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *   wordArray.clamp();\n   */\n  public clamp(){\n    const n = this._nSignificantBytes;\n    this._words[n >>> 2] &= 0xffffffff << (32 - (n % 4) * 8);\n    this._words.length = Math.ceil(n / 4);\n  }\n  \n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {Word32Array} The clone.\n   * @example\n   *   var clone = word32Array.clone();\n   */\n  public clone(){\n    return new Word32Array(this._words.slice(), this._nSignificantBytes);\n  }\n  \n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   * @return {Word32Array} The random word array.\n   * @static\n   * @example\n   *   var wordArray = Word32Array.random(16);\n   */\n  public static random(nBytes: number){\n    const words: number[] = [];\n    \n    for(let i=0;i<nBytes;i+=4){\n      words.push(random());\n    }\n    \n    return new Word32Array(words, nBytes);\n  }\n}\n"]}
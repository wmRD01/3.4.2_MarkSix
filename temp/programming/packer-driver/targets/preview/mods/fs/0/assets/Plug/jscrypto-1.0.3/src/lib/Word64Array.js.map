{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/Word64Array.ts"],"names":["Word64","Word64Array","Hex","Word32Array","constructor","high","low","clone","words","nSignificantBytes","_words","_nSignificantBytes","length","nSigBytes","n","to32","words32","i","word64","push","toString","encoder","stringify","slice"],"mappings":";;;gDAIaA,M,EAiBAC,W;;;;;;;;;;;;;;;;;;;;;;;;;;;AApBLC,MAAAA,G,iBAAAA,G;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;wBAEKH,M,GAAN,MAAMA,MAAN,CAAa;AAIXI,QAAAA,WAAW,CAACC,IAAD,EAAeC,GAAf,EAA4B;AAAA;;AAAA;;AAC5C,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKC,GAAL,GAAWA,GAAX;AACD;;AAEMC,QAAAA,KAAK,GAAE;AACZ,iBAAO,IAAIP,MAAJ,CAAW,KAAKK,IAAhB,EAAsB,KAAKC,GAA3B,CAAP;AACD;;AAXiB,O;AAcpB;AACA;AACA;;;6BACaL,W,GAAN,MAAMA,WAAN,CAAkB;AAIvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACSG,QAAAA,WAAW,CAACI,KAAD,EAAmBC,iBAAnB,EAA+C;AAAA;;AAAA;;AAC/D,eAAKC,MAAL,GAAcF,KAAK,IAAI,EAAvB;AACA,eAAKG,kBAAL,GAA0B,OAAOF,iBAAP,KAA6B,QAA7B,GAAwCA,iBAAxC,GAA4D,KAAKC,MAAL,CAAYE,MAAZ,GAAqB,CAA3G;AACD;;AAEmB,YAATC,SAAS,GAAE;AACpB,iBAAO,KAAKF,kBAAZ;AACD;AAED;AACF;AACA;AACA;;;AACsB,YAATE,SAAS,CAACC,CAAD,EAAW;AAC7B,eAAKH,kBAAL,GAA0BG,CAA1B;AACD;AAED;AACF;AACA;AACA;;;AACkB,YAALN,KAAK,GAAE;AAChB,iBAAO,KAAKE,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSK,QAAAA,IAAI,GAAE;AACX,cAAMC,OAAiB,GAAG,EAA1B;;AACA,eAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKP,MAAL,CAAYE,MAA1B,EAAiCK,CAAC,EAAlC,EAAqC;AACnC,gBAAMC,MAAM,GAAG,KAAKR,MAAL,CAAYO,CAAZ,CAAf;AACAD,YAAAA,OAAO,CAACG,IAAR,CAAaD,MAAM,CAACb,IAApB;AACAW,YAAAA,OAAO,CAACG,IAAR,CAAaD,MAAM,CAACZ,GAApB;AACD;;AACD,iBAAO;AAAA;AAAA,0CAAgBU,OAAhB,EAAyB,KAAKL,kBAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSS,QAAAA,QAAQ,CAACC,OAAD,EAAoB;AACjC,cAAG,CAACA,OAAJ,EAAY;AACV,mBAAO;AAAA;AAAA,4BAAIC,SAAJ,CAAc,KAAKP,IAAL,EAAd,CAAP;AACD;;AACD,iBAAOM,OAAO,CAACC,SAAR,CAAkB,KAAKP,IAAL,EAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACSR,QAAAA,KAAK,GAAE;AACZ,cAAMC,KAAK,GAAG,KAAKE,MAAL,CAAYa,KAAZ,EAAd;;AACA,eAAI,IAAIN,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACT,KAAK,CAACI,MAApB,EAA2BK,CAAC,EAA5B,EAA+B;AAC7BT,YAAAA,KAAK,CAACS,CAAD,CAAL,GAAWT,KAAK,CAACS,CAAD,CAAL,CAASV,KAAT,EAAX;AACD;;AACD,iBAAO,IAAIN,WAAJ,CAAgBO,KAAhB,EAAuB,KAAKG,kBAA5B,CAAP;AACD;;AAzFsB,O","sourcesContent":["import type {IEncoder} from \"./type\";\nimport {Hex} from \"./encoder/Hex\";\nimport {Word32Array} from \"./Word32Array\";\n\nexport class Word64 {\n  public high: number;\n  public low: number;\n  \n  public constructor(high: number, low: number) {\n    this.high = high;\n    this.low = low;\n  }\n  \n  public clone(){\n    return new Word64(this.high, this.low);\n  }\n}\n\n/**\n * An array of 64bit words\n */\nexport class Word64Array {\n  private readonly _words: Word64[];\n  private _nSignificantBytes: number;\n  \n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 64-bit words.\n   * @param {number} nSignificantBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *   var wordArray = new Word64Array();\n   *   var wordArray = new Word64Array([new Word64(0x00010203, 0x04050607)]);\n   *   var wordArray = new Word46Array([new Word64(0x00010203, 0x04050607)], 6);\n   */\n  public constructor(words?: Word64[], nSignificantBytes?: number) {\n    this._words = words || [];\n    this._nSignificantBytes = typeof nSignificantBytes === \"number\" ? nSignificantBytes : this._words.length * 8;\n  }\n  \n  public get nSigBytes(){\n    return this._nSignificantBytes;\n  }\n  \n  /**\n   * Set significant bytes\n   * @param {number} n - significant bytes\n   */\n  public set nSigBytes(n: number){\n    this._nSignificantBytes = n;\n  }\n  \n  /**\n   * Get raw reference of internal words.\n   * Modification of this raw array will affect internal words.\n   */\n  public get words(){\n    return this._words;\n  }\n  \n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {Word32Array} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n  public to32(){\n    const words32: number[] = [];\n    for(let i=0;i<this._words.length;i++){\n      const word64 = this._words[i];\n      words32.push(word64.high);\n      words32.push(word64.low);\n    }\n    return new Word32Array(words32, this._nSignificantBytes);\n  }\n  \n  /**\n   * Converts this word array to a string.\n   *\n   * @param {IEncoder?} encoder The encoding strategy to use. Default: CryptoJS.enc.Hex\n   * @return {string} The stringified word array.\n   * @example\n   *   var string = wordArray + '';\n   *   var string = wordArray.toString();\n   *   var string = wordArray.toString(Utf8);\n   */\n  public toString(encoder?: IEncoder){\n    if(!encoder){\n      return Hex.stringify(this.to32());\n    }\n    return encoder.stringify(this.to32());\n  }\n  \n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {Word64Array} The clone.\n   * @example\n   *   var clone = wordArray.clone();\n   */\n  public clone(){\n    const words = this._words.slice();\n    for(let i=0;i<words.length;i++){\n      words[i] = words[i].clone();\n    }\n    return new Word64Array(words, this._nSignificantBytes);\n  }\n}\n"]}
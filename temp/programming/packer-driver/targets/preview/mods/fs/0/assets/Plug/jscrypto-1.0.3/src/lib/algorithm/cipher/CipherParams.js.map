{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/CipherParams.ts"],"names":["CipherParams","OpenSSLFormatter","constructor","cp","cipherText","key","iv","salt","Algorithm","mode","padding","blockSize","formatter","toString","stringify"],"mappings":";;;gDAoBaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAfLC,MAAAA,gB,iBAAAA,gB;;;;;;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;8BACaD,Y,GAAN,MAAMA,YAAN,CAAmB;AAWxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACSE,QAAAA,WAAW,CAACC,EAAD,EAA6B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAC7C,cAAGA,EAAH,EAAM;AACJ,iBAAKC,UAAL,GAAkBD,EAAE,CAACC,UAArB;AACA,iBAAKC,GAAL,GAAWF,EAAE,CAACE,GAAd;AACA,iBAAKC,EAAL,GAAUH,EAAE,CAACG,EAAb;AACA,iBAAKC,IAAL,GAAYJ,EAAE,CAACI,IAAf;AACA,iBAAKC,SAAL,GAAiBL,EAAE,CAACK,SAApB;AACA,iBAAKC,IAAL,GAAYN,EAAE,CAACM,IAAf;AACA,iBAAKC,OAAL,GAAeP,EAAE,CAACO,OAAlB;AACA,iBAAKC,SAAL,GAAiBR,EAAE,CAACQ,SAApB;AACA,iBAAKC,SAAL,GAAiBT,EAAE,CAACS,SAAH;AAAA;AAAA,qDAAjB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSC,QAAAA,QAAQ,CAACD,SAAD,EAAuB;AACpC,iBAAO,CAACA,SAAS,IAAI,KAAKA,SAAnB,EAA8BE,SAA9B,CAAwC,IAAxC,CAAP;AACD;;AAvDuB,O","sourcesContent":["import type {Word32Array} from \"../../Word32Array\";\nimport type {BlockCipherMode} from \"./mode/BlockCipherMode\";\nimport type {Pad} from \"./pad/type\";\nimport type {Formatter} from \"./formatter/type\";\nimport type {Cipher} from \"./Cipher\";\nimport {OpenSSLFormatter} from \"./formatter/OpenSSLFormatter\";\n\n/**\n * A collection of cipher parameters.\n *\n * @property {Word32Array} ciphertext The raw ciphertext.\n * @property {Word32Array} key The key to this ciphertext.\n * @property {Word32Array} iv The IV used in the ciphering operation.\n * @property {Word32Array} salt The salt used with a key derivation function.\n * @property {typeof Cipher} algorithm The cipher algorithm.\n * @property {BlockCipherMode} mode The block mode used in the ciphering operation.\n * @property {Pad} padding The padding scheme used in the ciphering operation.\n * @property {number} blockSize The block size of the cipher.\n * @property {Formatter} formatter The default formatting strategy to convert this cipher params object to a string.\n */\nexport class CipherParams {\n  public cipherText?: Word32Array;\n  public key?: Word32Array;\n  public iv?: Word32Array;\n  public salt?: Word32Array;\n  public Algorithm?: typeof Cipher;\n  public mode?: BlockCipherMode;\n  public padding?: Pad;\n  public blockSize?: number;\n  public formatter: Formatter = OpenSSLFormatter;\n  \n  /**\n   * Initializes a newly created cipher params object.\n   *\n   * @param {Partial<CipherParams>} cp An object with any of the possible cipher parameters.\n   * @example\n   *   var cipherParams = new CipherParams({\n   *       ciphertext: ciphertextWordArray,\n   *       key: keyWordArray,\n   *       iv: ivWordArray,\n   *       salt: saltWordArray,\n   *       algorithm: AES,\n   *       mode: CBC,\n   *       padding: PKCS7,\n   *       blockSize: 4,\n   *       formatter: OpenSSLFormatter\n   *     });\n   */\n  public constructor(cp?: Partial<CipherParams>) {\n    if(cp){\n      this.cipherText = cp.cipherText;\n      this.key = cp.key;\n      this.iv = cp.iv;\n      this.salt = cp.salt;\n      this.Algorithm = cp.Algorithm;\n      this.mode = cp.mode;\n      this.padding = cp.padding;\n      this.blockSize = cp.blockSize;\n      this.formatter = cp.formatter || OpenSSLFormatter;\n    }\n  }\n  \n  /**\n   * Converts this cipher params object to a string.\n   *\n   * @param {Formatter?} formatter (Optional) The formatting strategy to use.\n   * @return {string} The stringified cipher params.\n   * @throws Error If neither the formatter nor the default formatter is set.\n   * @example\n   *   var string = cipherParams + '';\n   *   var string = cipherParams.toString();\n   *   var string = cipherParams.toString(OpenSSLFormatter);\n   */\n  public toString(formatter?: Formatter){\n    return (formatter || this.formatter).stringify(this);\n  }\n}"]}
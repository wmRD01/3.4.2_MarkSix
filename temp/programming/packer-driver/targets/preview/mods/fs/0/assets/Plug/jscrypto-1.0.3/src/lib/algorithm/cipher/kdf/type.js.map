{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/kdf/type.ts"],"names":["BaseKDFModule","constructor","props","_props","compute","password","salt","Error","getKey"],"mappings":";;;8BAgCaA,a;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAAAA,a,GAAN,MAAMA,aAAN,CAAuE;AAGrEC,QAAAA,WAAW,CAACC,KAAD,EAAqB;AAAA;;AACrC,eAAKC,MAAL,GAAcD,KAAd;AACD;;AAEME,QAAAA,OAAO,CAACC,QAAD,EAA+BC,IAA/B,EAAsE;AAClF,gBAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAEmB,eAANC,MAAM,CAClBH,QADkB,EAElBC,IAFkB,EAGlBJ,KAHkB,EAIL;AACb,gBAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAjB2E,O","sourcesContent":["import type {Hasher} from \"../../Hasher\";\nimport type {CipherParams} from \"../CipherParams\";\nimport type {Word32Array} from \"../../../Word32Array\";\n\nexport interface KDFParams extends Pick<CipherParams, \"toString\"> {\n  key: Word32Array;\n  iv: Word32Array;\n  salt: Word32Array;\n}\n\nexport interface KDFProps {\n  kdfModule: typeof BaseKDFModule;\n  kdfHasher: typeof Hasher;\n  kdfIterations: number;\n}\n\nexport interface KDF {\n  execute: (\n    password: Word32Array|string,\n    keySize: number,\n    ivSize: number,\n    salt?: Word32Array,\n    props?: Partial<KDFProps>,\n  ) => KDFParams;\n}\n\nexport interface BaseKDFModuleProps {\n  keySize: number;\n  Hasher: typeof Hasher;\n  iterations: number;\n}\n\nexport class BaseKDFModule<P extends BaseKDFModuleProps = BaseKDFModuleProps> {\n  protected _props?: Partial<P>;\n  \n  public constructor(props?: Partial<P>) {\n    this._props = props;\n  }\n  \n  public compute(password: Word32Array|string, salt: Word32Array|string): Word32Array {\n    throw new Error(\"Not implemented\");\n  }\n  \n  public static getKey<P2 extends BaseKDFModuleProps>(\n    password: Word32Array|string,\n    salt: Word32Array|string,\n    props?: Partial<P2>\n  ): Word32Array {\n    throw new Error(\"Not implemented\");\n  }\n}\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/mode/CTR.ts"],"names":["CTR","BlockCipherMode","constructor","props","createEncryptor","Encryptor","createDecryptor","Decryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keyStream","encryptBlock","i"],"mappings":";;;+CAKaA,G;;;;;;;;;;;;;;;;;;;;AALLC,MAAAA,e,iBAAAA,e;;;;;;;AAER;AACA;AACA;qBACaD,G,GAAN,MAAMA,GAAN;AAAA;AAAA,8CAAkC;AAGvC;AACF;AACA;;AAqCE;AACF;AACA;AAGSE,QAAAA,WAAW,CAACC,KAAD,EAA8B;AAC9C,gBAAMA,KAAN;;AAD8C,4CA9CjB,EA8CiB;AAE/C;AAED;AACF;AACA;AACA;AACA;AACA;;;AAC+B,eAAfC,eAAe,CAACD,KAAD,EAA6B;AACxD,iBAAO,IAAIH,GAAG,CAACK,SAAR,CAAkBF,KAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAC+B,eAAfG,eAAe,CAACH,KAAD,EAA6B;AACxD,iBAAO,IAAIH,GAAG,CAACO,SAAR,CAAkBJ,KAAlB,CAAP;AACD;;AArEsC,O;;sBAA5BH,G,eAM2B,MAAMK,SAAN,SAAwBL,GAAxB,CAA4B;AAChE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACWQ,QAAAA,YAAY,CAACC,KAAD,EAAkBC,MAAlB,EAAiC;AAClD;AACA,cAAMC,MAAM,GAAG,KAAKC,OAApB;AACA,cAAMC,SAAS,GAAGF,MAAM,CAACE,SAAzB;AACA,cAAMC,EAAE,GAAG,KAAKC,GAAhB;AACA,cAAIC,OAAO,GAAG,KAAKC,QAAnB,CALkD,CAOlD;;AACA,cAAIH,EAAJ,EAAQ;AACNE,YAAAA,OAAO,GAAG,KAAKC,QAAL,GAAgBH,EAAE,CAACL,KAAH,CAASS,KAAT,CAAe,CAAf,CAA1B,CADM,CAGN;;AACA,iBAAKH,GAAL,GAAWI,SAAX;AACD;;AACD,cAAMC,SAAS,GAAGJ,OAAO,CAACE,KAAR,CAAc,CAAd,CAAlB;AACAP,UAAAA,MAAM,CAACU,YAAP,CAAoBD,SAApB,EAA+B,CAA/B,EAfkD,CAiBlD;;AACAJ,UAAAA,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAA0BG,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAAyB,CAA1B,GAA+B,CAAxD,CAlBkD,CAoBlD;;AACA,eAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;AAClCb,YAAAA,KAAK,CAACC,MAAM,GAAGY,CAAV,CAAL,IAAqBF,SAAS,CAACE,CAAD,CAA9B;AACD;AACF;;AAjC+D,O;;sBANvDtB,G,eA6C2BA,GAAG,CAACK,S","sourcesContent":["import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\n/**\n * Output Feedback Block mode\n */\nexport class CTR extends BlockCipherMode {\n  protected _counter: number[] = [];\n  \n  /**\n   * CTR encryptor.\n   */\n  public static Encryptor: typeof CTR = class Encryptor extends CTR {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher\n      const blockSize = cipher.blockSize;\n      const iv = this._iv;\n      let counter = this._counter;\n  \n      // Generate keyStream\n      if (iv) {\n        counter = this._counter = iv.words.slice(0);\n    \n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      }\n      const keyStream = counter.slice(0);\n      cipher.encryptBlock(keyStream, 0);\n  \n      // Increment counter\n      counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n  \n      // Encrypt\n      for (let i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keyStream[i];\n      }\n    }\n  };\n  \n  /**\n   * CTR decryptor.\n   */\n  public static Decryptor: typeof CTR = CTR.Encryptor;\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = CTR.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new CTR.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = CTR.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new CTR.Decryptor(props);\n  }\n}"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/algorithm/cipher/mode/OFB.ts"],"names":["OFB","BlockCipherMode","constructor","props","createEncryptor","Encryptor","createDecryptor","Decryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","keyStream","_keyStream","slice","undefined","encryptBlock","i"],"mappings":";;;+CAKaA,G;;;;;;;;;;;;;;;;;;;;AALLC,MAAAA,e,iBAAAA,e;;;;;;;AAER;AACA;AACA;qBACaD,G,GAAN,MAAMA,GAAN;AAAA;AAAA,8CAAkC;AAGvC;AACF;AACA;;AAiCE;AACF;AACA;AAGSE,QAAAA,WAAW,CAACC,KAAD,EAA8B;AAC9C,gBAAMA,KAAN;;AAD8C,8CA1Cf,EA0Ce;AAE/C;AAED;AACF;AACA;AACA;AACA;AACA;;;AAC+B,eAAfC,eAAe,CAACD,KAAD,EAA6B;AACxD,iBAAO,IAAIH,GAAG,CAACK,SAAR,CAAkBF,KAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAC+B,eAAfG,eAAe,CAACH,KAAD,EAA6B;AACxD,iBAAO,IAAIH,GAAG,CAACO,SAAR,CAAkBJ,KAAlB,CAAP;AACD;;AAjEsC,O;;sBAA5BH,G,eAM2B,MAAMK,SAAN,SAAwBL,GAAxB,CAA4B;AAChE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACWQ,QAAAA,YAAY,CAACC,KAAD,EAAkBC,MAAlB,EAAiC;AAClD;AACA,cAAMC,MAAM,GAAG,KAAKC,OAApB;AACA,cAAMC,SAAS,GAAGF,MAAM,CAACE,SAAzB;AACA,cAAMC,EAAE,GAAG,KAAKC,GAAhB;AACA,cAAIC,SAAS,GAAG,KAAKC,UAArB,CALkD,CAOlD;;AACA,cAAIH,EAAJ,EAAQ;AACNE,YAAAA,SAAS,GAAG,KAAKC,UAAL,GAAkBH,EAAE,CAACL,KAAH,CAASS,KAAT,CAAe,CAAf,CAA9B,CADM,CAGN;;AACA,iBAAKH,GAAL,GAAWI,SAAX;AACD;;AACDR,UAAAA,MAAM,CAACS,YAAP,CAAoBJ,SAApB,EAA+B,CAA/B,EAdkD,CAgBlD;;AACA,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAApB,EAA+BQ,CAAC,EAAhC,EAAoC;AAClCZ,YAAAA,KAAK,CAACC,MAAM,GAAGW,CAAV,CAAL,IAAqBL,SAAS,CAACK,CAAD,CAA9B;AACD;AACF;;AA7B+D,O;;sBANvDrB,G,eAyC2BA,GAAG,CAACK,S","sourcesContent":["import {BlockCipherMode, BlockCipherModeProps} from \"./BlockCipherMode\";\n\n/**\n * Output Feedback Block mode\n */\nexport class OFB extends BlockCipherMode {\n  protected _keyStream: number[] = [];\n  \n  /**\n   * OFB encryptor.\n   */\n  public static Encryptor: typeof OFB = class Encryptor extends OFB {\n    /**\n     * Processes the data block at offset.\n     *\n     * @param {number[]} words The data words to operate on.\n     * @param {number} offset The offset where the block starts.\n     * @example\n     *   mode.processBlock(data.words, offset);\n     */\n    public processBlock(words: number[], offset: number){\n      // Shortcuts\n      const cipher = this._cipher\n      const blockSize = cipher.blockSize;\n      const iv = this._iv;\n      let keyStream = this._keyStream;\n  \n      // Generate key stream\n      if (iv) {\n        keyStream = this._keyStream = iv.words.slice(0);\n    \n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      }\n      cipher.encryptBlock(keyStream, 0);\n  \n      // Encrypt\n      for (let i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keyStream[i];\n      }\n    }\n  };\n  \n  /**\n   * OFB decryptor.\n   */\n  public static Decryptor: typeof OFB = OFB.Encryptor;\n  \n  public constructor(props: BlockCipherModeProps) {\n    super(props);\n  }\n  \n  /**\n   * Creates this mode for encryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = OFB.createEncryptor(cipher, iv.words);\n   */\n  public static createEncryptor(props: BlockCipherModeProps){\n    return new OFB.Encryptor(props);\n  }\n  \n  /**\n   * Creates this mode for decryption.\n   * @param {BlockCipherModeProps} props\n   * @example\n   *   var mode = OFB.createDecryptor(cipher, iv.words);\n   */\n  public static createDecryptor(props: BlockCipherModeProps){\n    return new OFB.Decryptor(props);\n  }\n}"]}
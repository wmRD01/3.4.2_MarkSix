{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/encoder/Hex.ts"],"names":["Word32Array","Hex","stringify","w","nSig","nSigBytes","words","hexChars","i","byte","push","toString","join","parse","hexStr","Len","length","Error","test","parseInt","substr"],"mappings":";;;;;;;;;;;;;;;;;;;AACQA,MAAAA,W,iBAAAA,W;;;;;;;qBAEKC,G,GAAgB;AAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,SAAS,CAACC,CAAD,EAAgB;AACvB,cAAMC,IAAI,GAAGD,CAAC,CAACE,SAAf;AACA,cAAMC,KAAK,GAAGH,CAAC,CAACG,KAAhB;AACA,cAAMC,QAAkB,GAAG,EAA3B;;AAEA,eAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,IAAd,EAAmBI,CAAC,EAApB,EAAuB;AACrB,gBAAMC,IAAI,GAAIH,KAAK,CAACE,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAvD;AACAD,YAAAA,QAAQ,CAACG,IAAT,CAAc,CAACD,IAAI,KAAK,CAAV,EAAaE,QAAb,CAAsB,EAAtB,CAAd;AACAJ,YAAAA,QAAQ,CAACG,IAAT,CAAc,CAACD,IAAI,GAAG,IAAR,EAAcE,QAAd,CAAuB,EAAvB,CAAd;AACD;;AAED,iBAAOJ,QAAQ,CAACK,IAAT,CAAc,EAAd,CAAP;AACD,SArB0B;;AAuB3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAAAA,KAAK,CAACC,MAAD,EAAgB;AACnB,cAAMC,GAAG,GAAGD,MAAM,CAACE,MAAnB;;AACA,cAAGD,GAAG,GAAG,CAAN,KAAY,CAAf,EAAiB;AACf,kBAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD,WAFD,MAGK,IAAG,CAAC,iBAAiBC,IAAjB,CAAsBJ,MAAtB,CAAJ,EAAkC;AACrC,kBAAM,IAAIG,KAAJ,0BAAiCH,MAAjC,CAAN;AACD;;AACD,cAAMR,KAAe,GAAG,EAAxB;;AAEA,eAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACO,GAAd,EAAkBP,CAAC,IAAE,CAArB,EAAuB;AACrBF,YAAAA,KAAK,CAACE,CAAC,KAAK,CAAP,CAAL,IAAkBW,QAAQ,CAACL,MAAM,CAACM,MAAP,CAAcZ,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,IAAsC,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAvE;AACD;;AAED,iBAAO;AAAA;AAAA,0CAAgBF,KAAhB,EAAuBS,GAAG,GAAG,CAA7B,CAAP;AACD;;AA9C0B,O","sourcesContent":["import type {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\nexport const Hex: IEncoder = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The hex string.\n   * @example\n   *   var hexString = Hex.stringify(new Word32Array([0x293892], 6));\n   */\n  stringify(w: Word32Array){\n    const nSig = w.nSigBytes;\n    const words = w.words;\n    const hexChars: string[] = [];\n    \n    for(let i=0;i<nSig;i++){\n      const byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((byte >>> 4).toString(16));\n      hexChars.push((byte & 0x0f).toString(16));\n    }\n    \n    return hexChars.join(\"\");\n  },\n  \n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   var wordArray = Hex.parse(hexString);\n   */\n  parse(hexStr: string){\n    const Len = hexStr.length;\n    if(Len % 2 !== 0){\n      throw new Error(\"Hex string count must be even\");\n    }\n    else if(!/^[a-fA-F0-9]+$/.test(hexStr)){\n      throw new Error(`Invalid Hex string: ${hexStr}`);\n    }\n    const words: number[] = [];\n    \n    for(let i=0;i<Len;i+=2){\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n    \n    return new Word32Array(words, Len / 2);\n  }\n}\n"]}
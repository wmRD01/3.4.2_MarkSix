{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/src/lib/encoder/Utf16.ts"],"names":["swapEndian","word","Word32Array","Utf16BE","stringify","w","words","sigBytes","nSigBytes","utf16Chars","i","codePoint","push","String","fromCharCode","join","parse","utf16Str","utf16StrLength","length","charCodeAt","Utf16LE","Utf16"],"mappings":"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","sourcesContent":["import type {IEncoder} from \"../type\";\nimport {Word32Array} from \"../Word32Array\";\n\n/**\n * UTF-16 BE encoding strategy.\n */\nexport const Utf16BE: IEncoder = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The UTF-16 BE string.\n   * @example\n   *   var utf16String = Utf16.stringify(new Word32Array([0x293892]));\n   */\n  stringify(w: Word32Array){\n    // Shortcuts\n    const words = w.words;\n    const sigBytes = w.nSigBytes;\n  \n    // Convert\n    const utf16Chars = [];\n    for(let i=0;i<sigBytes;i+=2){\n      const codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n  \n    return utf16Chars.join(\"\");\n  },\n  \n  /**\n   * Converts a UTF-16 BE string to a word array.\n   * @param {string} utf16Str The UTF-16 BE string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   const wordArray = Utf16.parse(utf16String);\n   */\n  parse(utf16Str: string){\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n  \n    // Convert\n    const words: number[] = [];\n    for (let i = 0; i < utf16StrLength; i++) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n    }\n  \n    return new Word32Array(words, utf16StrLength * 2);\n  }\n}\n\nfunction swapEndian(word: number){\n  return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n}\n\n/**\n * UTF-16 LE encoding strategy.\n */\nexport const Utf16LE: IEncoder = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {Word32Array} w An array of 32-bit words.\n   * @return {string} The UTF-16 LE string.\n   * @example\n   *   var utf16String = Utf16.stringify(new Word32Array([0x293892]));\n   */\n  stringify(w: Word32Array){\n    // Shortcuts\n    const words = w.words;\n    const sigBytes = w.nSigBytes;\n    \n    // Convert\n    const utf16Chars: string[] = [];\n    for(let i=0;i<sigBytes;i+=2){\n      const codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n    \n    return utf16Chars.join(\"\");\n  },\n  \n  /**\n   * Converts a UTF-16 LE string to a word array.\n   * @param {string} utf16Str The UTF-16 LE string.\n   * @return {Word32Array} The word array.\n   * @example\n   *   const wordArray = Utf16.parse(utf16String);\n   */\n  parse(utf16Str: string){\n    // Shortcut\n    const utf16StrLength = utf16Str.length;\n    \n    // Convert\n    const words: number[] = [];\n    for(let i=0;i<utf16StrLength;i++){\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n    }\n    \n    return new Word32Array(words, utf16StrLength * 2);\n  }\n}\n\nexport const Utf16 = Utf16BE;\n"]}
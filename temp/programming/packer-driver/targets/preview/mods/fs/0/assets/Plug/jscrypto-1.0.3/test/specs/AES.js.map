{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/AES.js"],"names":["expect","require","Word32Array","Hex","Utf8","mode","ECB","CBC","pad","NoPadding","Pkcs7","SHA256","SerializableCipher","PasswordBasedCipher","AES","describe","it","expectedResult","message","parse","key","props","padding","encrypt","cipherText","toString","to","be","encryptedMessage","decrypt","encryptedData","aes","createEncryptor","ciphertext1","process","ciphertext2","ciphertext3","ciphertext4","finalize","concat","iv","expectedMessage","expectedKey","expectedIv","random","nBytes","words","i","push","hash"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,cAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,cAAM;AACJC,YAAAA,WADI;AAEJC,YAAAA,GAFI;AAGJC,YAAAA,IAHI;AAIJC,YAAAA,IAAI,EAAE;AAACC,cAAAA,GAAD;AAAMC,cAAAA;AAAN,aAJF;AAKJC,YAAAA,GAAG,EAAE;AAACC,cAAAA,SAAD;AAAYC,cAAAA;AAAZ,aALD;AAMJC,YAAAA,MANI;AAOJC,YAAAA,kBAPI;AAQJC,YAAAA,mBARI;AASJC,YAAAA;AATI,cAUFb,OAAO,CAAC,kBAAD,CAVX;;AAYAc,UAAAA,QAAQ,CAAC,KAAD,EAAQ,YAAU;AACxBC,YAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAU;AACxC,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMC,OAAO,GAAGf,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAhB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACAT,cAAAA,MAAM,CAACc,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAU;AACxC,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMC,OAAO,GAAGf,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAhB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kDAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACAT,cAAAA,MAAM,CAACc,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAU;AACxC,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMC,OAAO,GAAGf,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAhB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kEAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACAT,cAAAA,MAAM,CAACc,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BC,KAA1B,EAAiCG,UAAjC,CAA4CC,QAA5C,EAAD,CAAN,CAA+DC,EAA/D,CAAkEC,EAAlE,CAAqEV,cAArE;AACD,aANC,CAAF;AAQAD,YAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAU;AACxC,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMW,gBAAgB,GAAGzB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAzB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACAT,cAAAA,MAAM,CAACc,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAU;AACxC,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMW,gBAAgB,GAAGzB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAzB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kDAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACAT,cAAAA,MAAM,CAACc,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAOAD,YAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAU;AACxC,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMW,gBAAgB,GAAGzB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAzB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kEAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACAT,cAAAA,MAAM,CAACc,GAAG,CAACe,OAAJ,CAAY;AAACL,gBAAAA,UAAU,EAAEI;AAAb,eAAZ,EAA4CR,GAA5C,EAAiDC,KAAjD,EAAwDI,QAAxD,EAAD,CAAN,CAA2EC,EAA3E,CAA8EC,EAA9E,CAAiFV,cAAjF;AACD,aANC,CAAF;AAQAD,YAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAU;AAC1C,kBAAME,OAAO,GAAG,SAAhB;AACA,kBAAME,GAAG,GAAG,KAAZ;AAEA,kBAAMU,aAAa,GAAGhB,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0BK,QAA1B,EAAtB;AACAzB,cAAAA,MAAM,CAACc,GAAG,CAACe,OAAJ,CAAYC,aAAZ,EAA2BV,GAA3B,EAAgCK,QAAhC,CAAyCrB,IAAzC,CAAD,CAAN,CAAuDsB,EAAvD,CAA0DC,EAA1D,CAA6DT,OAA7D;AACD,aANC,CAAF;AAQAF,YAAAA,EAAE,CAAC,iBAAD,EAAoB,YAAU;AAC9B,kBAAMC,cAAc,GAAG,kCAAvB;AACA,kBAAMG,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAZ;AACA,kBAAME,KAAK,GAAG;AAAChB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAd;AACA,kBAAMsB,GAAG,GAAGjB,GAAG,CAACkB,eAAJ,CAAoBZ,GAApB,EAAyBC,KAAzB,CAAZ;AAEA,kBAAMY,WAAW,GAAGF,GAAG,CAACG,OAAJ,CAAY/B,GAAG,CAACgB,KAAJ,CAAU,cAAV,CAAZ,CAApB;AACA,kBAAMgB,WAAW,GAAGJ,GAAG,CAACG,OAAJ,CAAY/B,GAAG,CAACgB,KAAJ,CAAU,YAAV,CAAZ,CAApB;AACA,kBAAMiB,WAAW,GAAGL,GAAG,CAACG,OAAJ,CAAY/B,GAAG,CAACgB,KAAJ,CAAU,YAAV,CAAZ,CAApB;AACA,kBAAMkB,WAAW,GAAGN,GAAG,CAACO,QAAJ,EAApB;AAEAtC,cAAAA,MAAM,CAACiC,WAAW,CAACM,MAAZ,CAAmBJ,WAAnB,EAAgCI,MAAhC,CAAuCH,WAAvC,EAAoDG,MAApD,CAA2DF,WAA3D,EAAwEZ,QAAxE,EAAD,CAAN,CAA2FC,EAA3F,CAA8FC,EAA9F,CAAiGV,cAAjG;AACD,aAZC,CAAF;AAcAD,YAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAU;AACnC,kBAAME,OAAO,GAAGf,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAhB;AACA,kBAAMC,GAAG,GAAGjB,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAZ;AACA,kBAAMqB,EAAE,GAAGrC,GAAG,CAACgB,KAAJ,CAAU,kCAAV,CAAX;AAEA,kBAAMsB,eAAe,GAAGvB,OAAO,CAACO,QAAR,EAAxB;AACA,kBAAMiB,WAAW,GAAGtB,GAAG,CAACK,QAAJ,EAApB;AACA,kBAAMkB,UAAU,GAAGH,EAAE,CAACf,QAAH,EAAnB;AAEAX,cAAAA,GAAG,CAACS,OAAJ,CAAYL,OAAZ,EAAqBE,GAArB,EAA0B;AAAEoB,gBAAAA;AAAF,eAA1B;AAEAxC,cAAAA,MAAM,CAACkB,OAAO,CAACO,QAAR,EAAD,CAAN,CAA2BC,EAA3B,CAA8BC,EAA9B,CAAiCc,eAAjC;AACAzC,cAAAA,MAAM,CAACoB,GAAG,CAACK,QAAJ,EAAD,CAAN,CAAuBC,EAAvB,CAA0BC,EAA1B,CAA6Be,WAA7B;AACA1C,cAAAA,MAAM,CAACwC,EAAE,CAACf,QAAH,EAAD,CAAN,CAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BgB,UAA5B;AACD,aAdC,CAAF;AAgBA3B,YAAAA,EAAE,CAAC,aAAD,EAAgB,YAAU;AAC1B;AACA,kBAAM4B,MAAM,GAAG1C,WAAW,CAAC0C,MAA3B,CAF0B,CAI1B;;AACA1C,cAAAA,WAAW,CAAC0C,MAAZ,GAAqB,UAAUC,MAAV,EAAkB;AACrC,oBAAMC,KAAK,GAAG,EAAd;;AACA,qBAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,MAAd,EAAqBE,CAAC,IAAE,CAAxB,EAA0B;AACxBD,kBAAAA,KAAK,CAACE,IAAN,CAAW,CAAC,UAAD,CAAX;AACD;;AAED,uBAAO,IAAI9C,WAAJ,CAAgB4C,KAAhB,EAAuBD,MAAvB,CAAP;AACD,eAPD,CAL0B,CAc1B;;;AACA7C,cAAAA,MAAM,CAACc,GAAG,CAACS,OAAJ,CAAY,UAAZ,EAAwBZ,MAAM,CAACsC,IAAP,CAAY,MAAZ,CAAxB,EAA6C;AAAC5C,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAA7C,EAA8Ee,UAA9E,CAAyFC,QAAzF,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACSb,GAAG,CAACkB,eAAJ,CAAoBrB,MAAM,CAACsC,IAAP,CAAY,MAAZ,CAApB,EAAyC;AAAC5C,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAzC,EAA0E6B,QAA1E,CAAmF,UAAnF,EAA+Fb,QAA/F,EADT;AAGAzB,cAAAA,MAAM,CAACc,GAAG,CAACS,OAAJ,CAAY,UAAZ,EAAwBZ,MAAM,CAACsC,IAAP,CAAY,MAAZ,CAAxB,EAA6C;AAAC5C,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAA7C,EAA8EgB,QAA9E,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACSf,kBAAkB,CAACW,OAAnB,CAA2BT,GAA3B,EAAgC,UAAhC,EAA4CH,MAAM,CAACsC,IAAP,CAAY,MAAZ,CAA5C,EAAiE;AAAC5C,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAjE,EAAkGgB,QAAlG,EADT;AAGAzB,cAAAA,MAAM,CAACc,GAAG,CAACS,OAAJ,CAAY,UAAZ,EAAwB,MAAxB,EAAgC;AAAClB,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAAhC,EAAiEgB,QAAjE,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACSd,mBAAmB,CAACU,OAApB,CAA4BT,GAA5B,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD;AAACT,gBAAAA,IAAI,EAAEC,GAAP;AAAYgB,gBAAAA,OAAO,EAAEb;AAArB,eAArD,EAAsFgB,QAAtF,EADT,EArB0B,CAwB1B;;AACAvB,cAAAA,WAAW,CAAC0C,MAAZ,GAAqBA,MAArB;AACD,aA1BC,CAAF;AA2BD,WA9GO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Word32Array,\n  Hex,\n  Utf8,\n  mode: {ECB, CBC},\n  pad: {NoPadding, Pkcs7},\n  SHA256,\n  SerializableCipher,\n  PasswordBasedCipher,\n  AES,\n} = require(\"../../test/build\");\n\ndescribe(\"aes\", function(){\n  it(\"test encrypt key size 128\", function(){\n    const expectedResult = \"69c4e0d86a7b0430d8cdb78070b4c55a\";\n    const message = Hex.parse(\"00112233445566778899aabbccddeeff\");\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(AES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt key size 192\", function(){\n    const expectedResult = \"dda97ca4864cdfe06eaf70a0ec0d7191\";\n    const message = Hex.parse(\"00112233445566778899aabbccddeeff\");\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f1011121314151617\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(AES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  it(\"test encrypt key size 256\", function(){\n    const expectedResult = \"8ea2b7ca516745bfeafc49904b496089\";\n    const message = Hex.parse(\"00112233445566778899aabbccddeeff\");\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(AES.encrypt(message, key, props).cipherText.toString()).to.be(expectedResult);\n  });\n  \n  it(\"test decrypt key size 128\", function(){\n    const expectedResult = \"00112233445566778899aabbccddeeff\";\n    const encryptedMessage = Hex.parse(\"69c4e0d86a7b0430d8cdb78070b4c55a\");\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(AES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt key size 192\", function(){\n    const expectedResult = \"00112233445566778899aabbccddeeff\";\n    const encryptedMessage = Hex.parse(\"dda97ca4864cdfe06eaf70a0ec0d7191\");\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f1011121314151617\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(AES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  it(\"test decrypt key size 256\", function(){\n    const expectedResult = \"00112233445566778899aabbccddeeff\";\n    const encryptedMessage = Hex.parse(\"8ea2b7ca516745bfeafc49904b496089\");\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\");\n    const props = {mode: ECB, padding: NoPadding};\n    expect(AES.decrypt({cipherText: encryptedMessage}, key, props).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test encrypt/decrypt string\", function(){\n    const message = \"message\";\n    const key = \"key\";\n    \n    const encryptedData = AES.encrypt(message, key).toString();\n    expect(AES.decrypt(encryptedData, key).toString(Utf8)).to.be(message);\n  });\n  \n  it(\"test multi part\", function(){\n    const expectedResult = \"69c4e0d86a7b0430d8cdb78070b4c55a\";\n    const key = Hex.parse(\"000102030405060708090a0b0c0d0e0f\");\n    const props = {mode: ECB, padding: NoPadding};\n    const aes = AES.createEncryptor(key, props);\n  \n    const ciphertext1 = aes.process(Hex.parse('001122334455'));\n    const ciphertext2 = aes.process(Hex.parse('66778899aa'));\n    const ciphertext3 = aes.process(Hex.parse('bbccddeeff'));\n    const ciphertext4 = aes.finalize();\n    \n    expect(ciphertext1.concat(ciphertext2).concat(ciphertext3).concat(ciphertext4).toString()).to.be(expectedResult);\n  });\n  \n  it(\"test input integrity\", function(){\n    const message = Hex.parse('00112233445566778899aabbccddeeff');\n    const key = Hex.parse('000102030405060708090a0b0c0d0e0f');\n    const iv = Hex.parse('101112131415161718191a1b1c1d1e1f');\n  \n    const expectedMessage = message.toString();\n    const expectedKey = key.toString();\n    const expectedIv = iv.toString();\n  \n    AES.encrypt(message, key, { iv });\n  \n    expect(message.toString()).to.be(expectedMessage);\n    expect(key.toString()).to.be(expectedKey);\n    expect(iv.toString()).to.be(expectedIv);\n  });\n  \n  it(\"test helper\", function(){\n    // Save original random method\n    const random = Word32Array.random;\n  \n    // Replace random method with one that returns a predictable value\n    Word32Array.random = function (nBytes) {\n      const words = [];\n      for(let i=0;i<nBytes;i+=4){\n        words.push([0x11223344]);\n      }\n    \n      return new Word32Array(words, nBytes);\n    };\n  \n    // Test\n    expect(AES.encrypt(\"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).cipherText.toString())\n      .to.be(AES.createEncryptor(SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).finalize(\"Hi There\").toString());\n    \n    expect(AES.encrypt(\"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).toString())\n      .to.be(SerializableCipher.encrypt(AES, \"Hi There\", SHA256.hash(\"Jefe\"), {mode: ECB, padding: NoPadding}).toString());\n    \n    expect(AES.encrypt(\"Hi There\", \"Jefe\", {mode: ECB, padding: NoPadding}).toString())\n      .to.be(PasswordBasedCipher.encrypt(AES, \"Hi There\", \"Jefe\", {mode: ECB, padding: NoPadding}).toString());\n  \n    // Restore random method\n    Word32Array.random = random;\n  });\n});\n"]}
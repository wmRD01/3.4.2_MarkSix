{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/kdf/EvpKDF.js"],"names":["expect","require","Hex","EvpKDF","Word32Array","describe","it","expectedValue","getKey","keySize","toString","to","be","password","salt","expectedPassword","expectedSalt","compute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,cAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,cAAM;AACJC,YAAAA,GADI;AAEJC,YAAAA,MAFI;AAGJC,YAAAA;AAHI,cAIFH,OAAO,CAAC,qBAAD,CAJX;;AAMAI,UAAAA,QAAQ,CAAC,YAAD,EAAe,YAAU;AAC/BC,YAAAA,EAAE,CAAC,aAAD,EAAgB,YAAU;AAC1B,kBAAMC,aAAa,GAAG,kGAAtB;AACAP,cAAAA,MAAM,CAACG,MAAM,CAACK,MAAP,CAAc,UAAd,EAA0B,UAA1B,EAAsC;AAACC,gBAAAA,OAAO,EAAE,CAAC,MAAI,GAAL,IAAU;AAApB,eAAtC,EAA+DC,QAA/D,EAAD,CAAN,CAAkFC,EAAlF,CAAqFC,EAArF,CAAwFL,aAAxF;AACD,aAHC,CAAF;AAKAD,YAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAU;AACnC,kBAAMO,QAAQ,GAAG,IAAIT,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAjB;AACA,kBAAMU,IAAI,GAAG,IAAIV,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAb;AAEA,kBAAMW,gBAAgB,GAAGF,QAAQ,CAACH,QAAT,EAAzB;AACA,kBAAMM,YAAY,GAAGF,IAAI,CAACJ,QAAL,EAArB;AAEAP,cAAAA,MAAM,CAACK,MAAP,CAAcK,QAAd,EAAwBC,IAAxB;AAEAd,cAAAA,MAAM,CAACa,QAAQ,CAACH,QAAT,EAAD,CAAN,CAA4BC,EAA5B,CAA+BC,EAA/B,CAAkCG,gBAAlC;AACAf,cAAAA,MAAM,CAACc,IAAI,CAACJ,QAAL,EAAD,CAAN,CAAwBC,EAAxB,CAA2BC,EAA3B,CAA8BI,YAA9B;AACD,aAXC,CAAF;AAaAV,YAAAA,EAAE,CAAC,aAAD,EAAgB,YAAU;AAC1BN,cAAAA,MAAM,CAACG,MAAM,CAACK,MAAP,CAAc,UAAd,EAA0B,UAA1B,EAAsC;AAACC,gBAAAA,OAAO,EAAE,CAAC,MAAI,GAAL,IAAU;AAApB,eAAtC,EAA+DC,QAA/D,EAAD,CAAN,CACGC,EADH,CACMC,EADN,CACS,IAAIT,MAAJ,CAAW;AAACM,gBAAAA,OAAO,EAAE,CAAC,MAAI,GAAL,IAAU;AAApB,eAAX,EAAoCQ,OAApC,CAA4C,UAA5C,EAAwD,UAAxD,EAAoEP,QAApE,EADT;AAED,aAHC,CAAF;AAID,WAvBO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Hex,\n  EvpKDF,\n  Word32Array,\n} = require(\"../../../test/build\");\n\ndescribe(\"kdf/EvpKDF\", function(){\n  it(\"test vector\", function(){\n    const expectedValue = \"fdbdf3419fff98bdb0241390f62a9db35f4aba29d77566377997314ebfc709f20b5ca7b1081f94b1ac12e3c8ba87d05a\"\n    expect(EvpKDF.getKey(\"password\", \"saltsalt\", {keySize: (256+128)/32}).toString()).to.be(expectedValue);\n  });\n  \n  it(\"test input integrity\", function(){\n    const password = new Word32Array([0x12345678]);\n    const salt = new Word32Array([0x12345678]);\n  \n    const expectedPassword = password.toString();\n    const expectedSalt = salt.toString();\n  \n    EvpKDF.getKey(password, salt);\n    \n    expect(password.toString()).to.be(expectedPassword);\n    expect(salt.toString()).to.be(expectedSalt);\n  });\n  \n  it(\"test helper\", function(){\n    expect(EvpKDF.getKey(\"password\", \"saltsalt\", {keySize: (256+128)/32}).toString())\n      .to.be(new EvpKDF({keySize: (256+128)/32}).compute(\"password\", \"saltsalt\").toString());\n  });\n});\n"]}
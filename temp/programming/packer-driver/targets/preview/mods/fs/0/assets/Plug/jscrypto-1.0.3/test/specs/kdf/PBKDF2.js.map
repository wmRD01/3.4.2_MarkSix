{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/kdf/PBKDF2.js"],"names":["expect","require","Hex","PBKDF2","Word32Array","SHA1","describe","it","expectedValue","getKey","keySize","iterations","Hasher","toString","to","be","parse","password","salt","expectedPassword","expectedSalt","compute"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {\n  Hex,\n  PBKDF2,\n  Word32Array,\n  SHA1,\n} = require(\"../../../test/build\");\n\ndescribe(\"kdf/PBKDF2\", function(){\n  it(\"test key size 128\", function(){\n    const expectedValue = \"cdedb5281bb2f801565a1122b2563515\"\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 128/32, iterations: 1, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256\", function(){\n    const expectedValue = \"cdedb5281bb2f801565a1122b25635150ad1f7a04bb9f3a333ecc0e2e1f70837\"\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 256/32, iterations: 1, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 128 iteration 2\", function(){\n    const expectedValue = \"01dbee7f4a9e243e988b62c73cda935d\"\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 128/32, iterations: 2, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256 iteration 2\", function(){\n    const expectedValue = \"01dbee7f4a9e243e988b62c73cda935da05378b93244ec8f48a99e61ad799d86\"\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 256/32, iterations: 2, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 128 iteration 1200\", function(){\n    const expectedValue = \"5c08eb61fdf71e4e4ec3cf6ba1f5512b\"\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 128/32, iterations: 1200, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256 iteration 1200\", function(){\n    const expectedValue = \"5c08eb61fdf71e4e4ec3cf6ba1f5512ba7e52ddbc5e5142f708a31e2e62b1e13\"\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 256/32, iterations: 1200, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 128 iteration 5\", function(){\n    const expectedValue = \"d1daa78615f287e6a1c8b120d7062a49\"\n    expect(PBKDF2.getKey(\"password\", Hex.parse(\"1234567878563412\"), {keySize: 128/32, iterations: 5, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256 iteration 5\", function(){\n    const expectedValue = \"d1daa78615f287e6a1c8b120d7062a493f98d203e6be49a6adf4fa574b6e64ee\"\n    expect(PBKDF2.getKey(\"password\", Hex.parse(\"1234567878563412\"), {keySize: 256/32, iterations: 5, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 128 iteration 1200 passphrase equal to block size\", function(){\n    const expectedValue = \"139c30c0966bc32ba55fdbf212530ac9\"\n    expect(PBKDF2.getKey(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"pass phrase equals block size\", {keySize: 128/32, iterations: 1200, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256 iteration 1200 passphrase equal to block size\", function(){\n    const expectedValue = \"139c30c0966bc32ba55fdbf212530ac9c5ec59f1a452f5cc9ad940fea0598ed1\"\n    expect(PBKDF2.getKey(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"pass phrase equals block size\", {keySize: 256/32, iterations: 1200, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 128 iteration 1200 passphrase exceeds block size\", function(){\n    const expectedValue = \"9ccad6d468770cd51b10e6a68721be61\"\n    expect(PBKDF2.getKey(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"pass phrase exceeds block size\", {keySize: 128/32, iterations: 1200, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256 iteration 1200 passphrase exceeds block size\", function(){\n    const expectedValue = \"9ccad6d468770cd51b10e6a68721be611a8b4d282601db3b36be9246915ec82a\"\n    expect(PBKDF2.getKey(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"pass phrase exceeds block size\", {keySize: 256/32, iterations: 1200, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 128 iteration 50\", function(){\n    const expectedValue = \"6b9cf26d45455a43a5b8bb276a403b39\"\n    expect(PBKDF2.getKey(Hex.parse(\"f09d849e\"), \"EXAMPLE.COMpianist\", {keySize: 128/32, iterations: 50, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  it(\"test key size 256 iteration 50\", function(){\n    const expectedValue = \"6b9cf26d45455a43a5b8bb276a403b39e7fe37a0c41e02c281ff3069e1e94f52\"\n    expect(PBKDF2.getKey(Hex.parse(\"f09d849e\"), \"EXAMPLE.COMpianist\", {keySize: 256/32, iterations: 50, Hasher: SHA1}).toString()).to.be(expectedValue);\n  });\n  \n  it(\"test input integrity\", function(){\n    const password = new Word32Array([0x12345678]);\n    const salt = new Word32Array([0x12345678]);\n    \n    const expectedPassword = password.toString();\n    const expectedSalt = salt.toString();\n    \n    PBKDF2.getKey(password, salt, {iterations: 1, Hasher: SHA1});\n    \n    expect(password.toString()).to.be(expectedPassword);\n    expect(salt.toString()).to.be(expectedSalt);\n  });\n  \n  it(\"test helper\", function(){\n    expect(PBKDF2.getKey(\"password\", \"ATHENA.MIT.EDUraeburn\", {keySize: 128/32, iterations: 1, Hasher: SHA1}).toString())\n      .to.be(new PBKDF2({keySize: 128/32, iterations: 1, Hasher:SHA1}).compute(\"password\", \"ATHENA.MIT.EDUraeburn\").toString());\n  });\n});\n"]}
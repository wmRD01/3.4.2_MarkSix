{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/mode/CTR.js"],"names":["expect","require","Word32Array","CTR","NoPadding","AES","describe","data","message","key","iv","it","expected","clone","aes","createEncryptor","counter","words","slice","keyStream","encryptBlock","i","actual","encrypt","mode","padding","cipherText","toString","to","be","encrypted","decrypted","decrypt"],"mappings":"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","sourcesContent":["const expect = require(\"expect.js\");\nconst {Word32Array} = require(\"../../../test/build/lib\");\nconst {CTR} = require(\"../../../test/build/mode/CTR\");\nconst {NoPadding} = require(\"../../../test/build/pad/NoPadding\");\nconst {AES} = require(\"../../../test/build/AES\");\n\ndescribe(\"mode/CTR\", function(){\n  const data = {};\n  data.message = new Word32Array([\n    0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f,\n    0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f\n  ]);\n  data.key = new Word32Array([0x20212223, 0x24252627, 0x28292a2b, 0x2c2d2e2f]);\n  data.iv = new Word32Array([0x30313233, 0x34353637, 0x38393a3b, 0x3c3d3e3f]);\n  \n  it(\"test encryptor\", function(){\n    // Compute expected\n    const expected = data.message.clone();\n    const aes = AES.createEncryptor(data.key);\n  \n    // Counter initialized with IV\n    const counter = data.iv.words.slice(0);\n  \n    // First block XORed with encrypted counter\n    let keyStream = counter.slice(0);\n    aes.encryptBlock(keyStream, 0);\n    for (let i=0;i<4;i++) {\n      expected.words[i] ^= keyStream[i];\n    }\n  \n    // Subsequent blocks XORed with encrypted incremented counter\n    counter[3]++;\n    keyStream = counter.slice(0);\n    aes.encryptBlock(keyStream, 0);\n    for (let i=4;i<8;i++) {\n      expected.words[i] ^= keyStream[i % 4];\n    }\n    \n    // Compute actual\n    const actual = AES.encrypt(data.message, data.key, { iv: data.iv, mode: CTR, padding: NoPadding }).cipherText;\n    \n    // Test\n    expect(actual.toString()).to.be(expected.toString());\n  });\n  \n  it(\"test decryptor\", function(){\n    const encrypted = AES.encrypt(data.message, data.key, { iv: data.iv, mode: CTR, padding: NoPadding });\n    const decrypted = AES.decrypt(encrypted, data.key, { iv: data.iv, mode: CTR, padding: NoPadding });\n    \n    expect(decrypted.toString()).to.be(data.message.toString());\n  });\n});\n"]}
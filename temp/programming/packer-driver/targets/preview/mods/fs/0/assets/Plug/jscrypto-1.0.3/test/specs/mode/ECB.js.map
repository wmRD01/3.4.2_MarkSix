{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Plug/jscrypto-1.0.3/test/specs/mode/ECB.js"],"names":["expect","require","Word32Array","ECB","NoPadding","AES","describe","data","message","key","it","expected","clone","aes","createEncryptor","encryptBlock","words","actual","encrypt","iv","mode","padding","cipherText","toString","to","be","encrypted","decrypted","decrypt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,cAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,cAAM;AAACC,YAAAA;AAAD,cAAgBD,OAAO,CAAC,yBAAD,CAA7B;;AACA,cAAM;AAACE,YAAAA;AAAD,cAAQF,OAAO,CAAC,8BAAD,CAArB;;AACA,cAAM;AAACG,YAAAA;AAAD,cAAcH,OAAO,CAAC,mCAAD,CAA3B;;AACA,cAAM;AAACI,YAAAA;AAAD,cAAQJ,OAAO,CAAC,yBAAD,CAArB;;AAEAK,UAAAA,QAAQ,CAAC,UAAD,EAAa,YAAU;AAC7B,gBAAMC,IAAI,GAAG,EAAb;AACAA,YAAAA,IAAI,CAACC,OAAL,GAAe,IAAIN,WAAJ,CAAgB,CAC7B,UAD6B,EACjB,UADiB,EACL,UADK,EACO,UADP,EAE7B,UAF6B,EAEjB,UAFiB,EAEL,UAFK,EAEO,UAFP,CAAhB,CAAf;AAIAK,YAAAA,IAAI,CAACE,GAAL,GAAW,IAAIP,WAAJ,CAAgB,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC,CAAhB,CAAX;AAEAQ,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B;AACA,kBAAMC,QAAQ,GAAGJ,IAAI,CAACC,OAAL,CAAaI,KAAb,EAAjB;AACA,kBAAMC,GAAG,GAAGR,GAAG,CAACS,eAAJ,CAAoBP,IAAI,CAACE,GAAzB,CAAZ;AAEAI,cAAAA,GAAG,CAACE,YAAJ,CAAiBJ,QAAQ,CAACK,KAA1B,EAAiC,CAAjC;AACAH,cAAAA,GAAG,CAACE,YAAJ,CAAiBJ,QAAQ,CAACK,KAA1B,EAAiC,CAAjC,EAN6B,CAQ7B;;AACA,kBAAMC,MAAM,GAAGZ,GAAG,CAACa,OAAJ,CAAYX,IAAI,CAACC,OAAjB,EAA0BD,IAAI,CAACE,GAA/B,EAAoC;AAAEU,gBAAAA,EAAE,EAAEZ,IAAI,CAACY,EAAX;AAAeC,gBAAAA,IAAI,EAAEjB,GAArB;AAA0BkB,gBAAAA,OAAO,EAAEjB;AAAnC,eAApC,EAAoFkB,UAAnG,CAT6B,CAW7B;;AACAtB,cAAAA,MAAM,CAACiB,MAAM,CAACM,QAAP,EAAD,CAAN,CAA0BC,EAA1B,CAA6BC,EAA7B,CAAgCd,QAAQ,CAACY,QAAT,EAAhC;AACD,aAbC,CAAF;AAeAb,YAAAA,EAAE,CAAC,gBAAD,EAAmB,YAAU;AAC7B,kBAAMgB,SAAS,GAAGrB,GAAG,CAACa,OAAJ,CAAYX,IAAI,CAACC,OAAjB,EAA0BD,IAAI,CAACE,GAA/B,EAAoC;AAAEU,gBAAAA,EAAE,EAAEZ,IAAI,CAACY,EAAX;AAAeC,gBAAAA,IAAI,EAAEjB,GAArB;AAA0BkB,gBAAAA,OAAO,EAAEjB;AAAnC,eAApC,CAAlB;AACA,kBAAMuB,SAAS,GAAGtB,GAAG,CAACuB,OAAJ,CAAYF,SAAZ,EAAuBnB,IAAI,CAACE,GAA5B,EAAiC;AAAEU,gBAAAA,EAAE,EAAEZ,IAAI,CAACY,EAAX;AAAeC,gBAAAA,IAAI,EAAEjB,GAArB;AAA0BkB,gBAAAA,OAAO,EAAEjB;AAAnC,eAAjC,CAAlB;AAEAJ,cAAAA,MAAM,CAAC2B,SAAS,CAACJ,QAAV,EAAD,CAAN,CAA6BC,EAA7B,CAAgCC,EAAhC,CAAmClB,IAAI,CAACC,OAAL,CAAae,QAAb,EAAnC;AACD,aALC,CAAF;AAMD,WA7BO,CAAR","sourcesContent":["const expect = require(\"expect.js\");\nconst {Word32Array} = require(\"../../../test/build/lib\");\nconst {ECB} = require(\"../../../test/build/mode/ECB\");\nconst {NoPadding} = require(\"../../../test/build/pad/NoPadding\");\nconst {AES} = require(\"../../../test/build/AES\");\n\ndescribe(\"mode/ECB\", function(){\n  const data = {};\n  data.message = new Word32Array([\n    0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f,\n    0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f\n  ]);\n  data.key = new Word32Array([0x20212223, 0x24252627, 0x28292a2b, 0x2c2d2e2f]);\n  \n  it(\"test encryptor\", function(){\n    // Compute expected\n    const expected = data.message.clone();\n    const aes = AES.createEncryptor(data.key);\n  \n    aes.encryptBlock(expected.words, 0);\n    aes.encryptBlock(expected.words, 4);\n    \n    // Compute actual\n    const actual = AES.encrypt(data.message, data.key, { iv: data.iv, mode: ECB, padding: NoPadding }).cipherText;\n    \n    // Test\n    expect(actual.toString()).to.be(expected.toString());\n  });\n  \n  it(\"test decryptor\", function(){\n    const encrypted = AES.encrypt(data.message, data.key, { iv: data.iv, mode: ECB, padding: NoPadding });\n    const decrypted = AES.decrypt(encrypted, data.key, { iv: data.iv, mode: ECB, padding: NoPadding });\n    \n    expect(decrypted.toString()).to.be(data.message.toString());\n  });\n});\n"]}
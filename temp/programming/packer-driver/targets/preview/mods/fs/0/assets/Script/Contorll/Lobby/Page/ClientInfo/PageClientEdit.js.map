{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/ClientInfo/PageClientEdit.ts"],"names":["Button","Node","Sprite","_decorator","NotificationType","LobbyStateEvent","EventMng","BaseComponent","Player","RequestGPG","MyEditBox","PublicModel","CreateFileSprite","ccclass","property","PageClientEdit","onLoad","getInstance","mapEvnet","get","Panel","on","ActivePanelClientEdit","activePanel","ChangePlayerPicture","onChangePlayerPicture","hide","start","editEmail","string","editNicName","editVerificationCode","onEnable","isChangePicture","gpgInfo","data","email","undefined","activeVerificationCode","bool","show","onTestNickName","body","Body","NeedToken","Nickname","nickname","sign","convertSign","Request","setMethod","Method","POST","setBody","JSON","stringify","setToken","gpgToken","fetchData","APIUrl","playAPI","API","responseSendLoginVerification","bind","responetest","response","console","log","onSelectPhoto","onActivePanel","e","customEventData","emit","ActivePanelClientInfo","spriteBG","node","active","NodeEmail","NodeVerificationCode","btnVerificationCode","btnsFunction","position","to2DConvertOtherNodeSpaceAR","_spriteFrame","spritePlayer","spriteFrame","onValidateContactInfo","error","checkEmailRegular","NotNeedToken","ValidateContactInfo","Email","ids","responseValidateContactInfo","onCertification","CertifiedEmail","verifyCode","Status","Code","sendBody","SendRegisterVerification","_string","strEmail","emailRule","search","onCheckMotify","UpDataPlayer"],"mappings":"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","sourcesContent":["import { Button, EventTouch, Label, Node, Sprite, SpriteFrame, _decorator } from 'cc';\r\nimport { NotificationType } from '../../../../Enum/NotificationType';\r\nimport { LobbyStateEvent } from '../../../../Enum/LobbyStateEvent';\r\nimport EventMng from '../../../../Manager/EventMng';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport Player from '../../../../Model/Player';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport CryptoES from 'crypto-es';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport { MyEditBox } from '../../../../../Plug/MyEditBox';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport CreateFileSprite from '../../../../Model/CreateFileSprite';\r\nimport PublicData from '../../../../Model/PublicData';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PageClientEdit')\r\nexport default class PageClientEdit extends BaseComponent {\r\n    @property(MyEditBox)\r\n    editNicName: MyEditBox;\r\n    @property(MyEditBox)\r\n    editEmail: MyEditBox;\r\n    @property(MyEditBox)\r\n    editVerificationCode: MyEditBox;\r\n    @property(Node)\r\n    NodeEmail: Node\r\n    @property(Node)\r\n    NodeVerificationCode: Node\r\n\r\n    @property(Button)\r\n    btnVerificationCode: Button\r\n\r\n    @property(Node)\r\n    btnsFunction: Node\r\n    @property(Sprite)\r\n    spritePlayer: Sprite\r\n    isChangePicture: boolean = false\r\n\r\n    onLoad() {\r\n        super.onLoad()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).on(LobbyStateEvent.ActivePanelClientEdit, this.activePanel, this)\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).on(LobbyStateEvent.ChangePlayerPicture, this.onChangePlayerPicture, this)\r\n        this.hide()\r\n    }\r\n    start() {\r\n        this.editEmail.string = \"\"\r\n        this.editNicName.string = \"\"\r\n        this.editVerificationCode.string = \"\"\r\n    }\r\n    onEnable() {\r\n        // this.onValidateContactInfo()\r\n        this.isChangePicture = false\r\n        return\r\n        if (Player.getInstance.gpgInfo.data.email != \"\" || Player.getInstance.gpgInfo.data.email != null || Player.getInstance.gpgInfo.data.email != undefined)\r\n            this.activeVerificationCode(false)\r\n        else\r\n            this.activeVerificationCode(true)\r\n\r\n    }\r\n\r\n    activePanel(bool: boolean) {\r\n        bool ? this.show() : this.hide()\r\n    }\r\n    async onTestNickName() {\r\n        const body = new RequestGPG.Body.NeedToken.Nickname()\r\n        body.nickname = \"我修改拉\"\r\n        body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.Nickname)\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .setBody(JSON.stringify(body))\r\n            .setToken(Player.getInstance.gpgToken)\r\n            .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.Nickname}`, this.responseSendLoginVerification.bind(this))\r\n    }\r\n    responetest(response) {\r\n        console.log(response);\r\n\r\n    }\r\n    onSelectPhoto() {\r\n        new CreateFileSprite(this.onChangePlayerPicture.bind(this))\r\n    }\r\n\r\n    onActivePanel(e: EventTouch, customEventData?: string) {\r\n        this.hide()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).emit(LobbyStateEvent.ActivePanelClientInfo, true)\r\n    }\r\n    activeVerificationCode(bool: boolean) {\r\n        this.editVerificationCode.spriteBG.node.active = bool\r\n        this.editEmail.spriteBG.node.active = bool\r\n        this.NodeEmail.active = bool\r\n        this.NodeVerificationCode.active = bool\r\n        this.btnVerificationCode.node.active = bool\r\n        if (!bool)\r\n            this.btnsFunction.position = PublicModel.getInstance.to2DConvertOtherNodeSpaceAR(this.btnsFunction, this.editEmail.spriteBG.node)\r\n    }\r\n    onChangePlayerPicture(_spriteFrame: SpriteFrame) {\r\n        this.spritePlayer.spriteFrame = _spriteFrame\r\n        this.isChangePicture = true;\r\n    }\r\n    /**ClientEdit */\r\n\r\n    /**進行發送驗證碼時，必須先通過確認手機是否被註冊過，確認沒有驗證過就會SendLog */\r\n    async onValidateContactInfo() {\r\n        /**確認是否有需要驗證戲箱 */\r\n        if (this.editEmail.string == \"\") {\r\n            console.error(\"信箱不可空白\");\r\n            return\r\n        }\r\n        if (!this.checkEmailRegular(this.editEmail.string)) {\r\n            console.error(\"信箱格式不正確\");\r\n            return\r\n        }\r\n        /** */\r\n        const body = new RequestGPG.Body.NotNeedToken.ValidateContactInfo()\r\n        body.Email = this.editEmail.string;\r\n\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .setBody(JSON.stringify(body))\r\n            .fetchData(`${RequestGPG.APIUrl.ids}${RequestGPG.API.ValidateContactInfo}`, this.responseValidateContactInfo.bind(this))\r\n\r\n    }\r\n    /**送出前須確認驗證碼的正確性，但前題是他必須得先需要註冊信箱時才會接這個function */\r\n    async onCertification() {\r\n        const body = new RequestGPG.Body.NeedToken.CertifiedEmail()\r\n        body.email = this.editEmail.string\r\n        body.verifyCode = this.editVerificationCode.string\r\n        body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.CertifiedEmail)\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .setToken(Player.getInstance.gpgToken)\r\n            .setBody(JSON.stringify(body))\r\n            .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.ValidateContactInfo}`, this.responseSendLoginVerification.bind(this))\r\n\r\n    }\r\n\r\n\r\n    async responseValidateContactInfo(response: ResponseGPG.ValidateContactInfo.DataClass) {\r\n        console.log(\"ValidateContactInfo\", response)\r\n        /**代表此已經綁定過不可以綁定! */\r\n        if (response.Status.Code == \"0\") {\r\n            console.log(\"已存在請重新換組\");\r\n            return;\r\n\r\n        }\r\n        else {\r\n            console.log(\"恭喜信箱不存在，可繼續註冊\");\r\n            //*要改成手動送驗證碼\r\n            const sendBody = new RequestGPG.Body.NotNeedToken.SendRegisterVerification()\r\n            sendBody.Email = this.editEmail.string\r\n            await new RequestGPG.Request()\r\n                .setMethod(RequestGPG.Method.POST)\r\n                .setBody(JSON.stringify(sendBody))\r\n                .fetchData(`${RequestGPG.APIUrl.ids}${RequestGPG.API.SendRegisterVerification}`, this.responseSendLoginVerification.bind(this))\r\n        }\r\n\r\n    }\r\n\r\n    /**驗證碼發送是否成功 */\r\n    responseSendLoginVerification(response: ResponseGPG.SendRegisterVerification.DataClass) {\r\n        console.log(\"SendRegisterVerification\", response)\r\n        if (response.Status.Code == \"0\") {\r\n            console.log(\"過關惹\");\r\n\r\n        }\r\n    }\r\n    /**確認信箱格式 */\r\n    checkEmailRegular(_string: string) {\r\n        //please input the test email to see is valid\r\n        var strEmail = _string;\r\n\r\n        //Regular expression Testing\r\n        var emailRule = /^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z]+$/;\r\n\r\n        //validate ok or not\r\n        if (strEmail.search(emailRule) != -1) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    onCheckMotify() {\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Panel).emit(LobbyStateEvent.UpDataPlayer)\r\n        this.onActivePanel(null)\r\n        return\r\n        if (this.editNicName.string == Player.getInstance.nickname) {\r\n            console.error(\"會員資料與之前相同\");\r\n            return\r\n        }\r\n\r\n        /**確認是否有需要驗證戲箱 */\r\n        if (this.NodeEmail.active) {\r\n            if (!this.checkEmailRegular(this.editEmail.string)) {\r\n                console.error(\"信箱格式不正確]\");\r\n                return\r\n            }\r\n            this.onValidateContactInfo();\r\n        }\r\n\r\n\r\n        if (this.isChangePicture)\r\n            EventMng.getInstance.mapEvnet.get(NotificationType.Panel).emit(LobbyStateEvent.ChangePlayerPicture, this.spritePlayer.spriteFrame)\r\n    }\r\n\r\n    /**排序物件順序並且queryString */\r\n\r\n}\r\n"]}
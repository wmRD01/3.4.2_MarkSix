{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/ClientInfo/PanelClientInfo.ts"],"names":["assetManager","Button","Label","Sprite","SpriteFrame","_decorator","BaseComponent","Player","RequestGPG","EventMng","NotificationType","LobbyStateEvent","PublicData","PanelLoading","PublicModel","CreateFileSprite","EditMenu","ccclass","property","PanelClientInfo","onLoad","show","getInstance","mapEvnet","get","PanelClient","on","EditUpdate","onEditUpData","labelEmail","string","labelPhone","labelNickName","onEnable","startDelay","body","Body","NeedToken","MyInfo","sign","convertMD5","gpgApi","convert","URLSearchParams","toString","Request","setToken","gpgToken","fetchData","APIUrl","playAPI","API","responseMyInfo","bind","onDisable","resetButton","onEditTarget","e","customEventData","closeButton","Number","Nickname","emit","EditNickname","Phone","EditPhone","Email","EditEmail","str","type","checkStringNull","instance","closeLoading","onSelectPhoto","onUploadAvatar","_spriteFrame","file","fileData","FormData","append","setMethod","Method","POST","deletContentType","setBody","UploadAvatar","response","responseUploadAvatar","console","log","Status","Code","spritePlayer","spriteFrame","gpgInfo","data","photo","headPhoto","loadRemote","err","image","error","message","createWithImage","nickName","getplatform","split","replace","buttonEditPhone","node","active","phoneNumber","buttonEditEmail","email","stopDelay","setTimeout","buttonEditNickname"],"mappings":"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","sourcesContent":["import { absMax, assetManager, Button, EventTouch, ImageAsset, Label, Node, Sprite, SpriteFrame, sys, _decorator } from 'cc';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport Player from '../../../../Model/Player';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport CryptoES from 'crypto-es';\r\nimport EventMng from '../../../../Manager/EventMng';\r\nimport { NotificationType } from '../../../../Enum/NotificationType';\r\nimport { LobbyStateEvent } from '../../../../Enum/LobbyStateEvent';\r\nimport PublicData from '../../../../Model/PublicData';\r\nimport PanelLoading from '../../../NoClearNode/PanelLoading';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport CreateFileSprite from '../../../../Model/CreateFileSprite';\r\nimport { EditMenu } from '../../../../Enum/EditMenu';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PanelClientInfo')\r\nexport default class PanelClientInfo extends BaseComponent {\r\n    //#region  propty\r\n    isNeedUpdate: boolean = true;\r\n    isLoading: boolean = false;\r\n    @property(Sprite)\r\n    spritePlayer: Sprite;\r\n    @property(Label)\r\n    labelPhone: Label\r\n    @property(Label)\r\n    labelNickName: Label\r\n    @property(Label)\r\n    labelEmail: Label\r\n    @property(Button)\r\n    buttonEditNickname: Button;\r\n    @property(Button)\r\n    buttonEditPhone: Button;\r\n    @property(Button)\r\n    buttonEditEmail: Button;\r\n    @property(Button)\r\n    buttonEditPicture: Button;\r\n    labelBetCount: Label;\r\n    labelPointCount: Label;\r\n    labelRank: Label;\r\n\r\n    getplatform: string;\r\n\r\n    //#endregion\r\n    onLoad() {\r\n        super.onLoad()\r\n        this.show()\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).on(LobbyStateEvent.EditUpdate, this.onEditUpData, this)\r\n        this.labelEmail.string = \"\"\r\n        this.labelPhone.string = \"\"\r\n        this.labelNickName.string = \"\"\r\n    }\r\n    async onEnable() {\r\n        this.startDelay()\r\n        const body = new RequestGPG.Body.NeedToken.MyInfo()\r\n        body.sign = PublicModel.getInstance.convertMD5(PublicData.getInstance.gpgApi)\r\n        let convert = new URLSearchParams(body).toString()\r\n        await new RequestGPG.Request()\r\n            .setToken(Player.getInstance.gpgToken)\r\n            .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.MyInfo}?${convert}`, this.responseMyInfo.bind(this))\r\n\r\n    }\r\n    onDisable() {\r\n        this.resetButton()\r\n    }\r\n    onEditTarget(e: EventTouch, customEventData?: string) {\r\n        this.closeButton()\r\n        switch (Number(customEventData)) {\r\n            case EditMenu.Nickname:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditNickname)\r\n                break;\r\n            case EditMenu.Phone:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditPhone)\r\n                break;\r\n            case EditMenu.Email:\r\n                EventMng.getInstance.mapEvnet.get(NotificationType.PanelClient).emit(LobbyStateEvent.EditEmail)\r\n                break;\r\n        }\r\n    }\r\n    onEditUpData(str: string, type: EditMenu) {\r\n        if (!PublicModel.getInstance.checkStringNull(str)) {\r\n            switch (type) {\r\n                case EditMenu.Nickname:\r\n                    this.labelNickName.string = str\r\n                    break;\r\n                case EditMenu.Phone:\r\n                    this.labelPhone.string = str\r\n                    break;\r\n                case EditMenu.Email:\r\n                    this.labelEmail.string = str\r\n                    break;\r\n            }\r\n        }\r\n        this.resetButton()\r\n        PanelLoading.instance.closeLoading()\r\n    }\r\n    onSelectPhoto() {\r\n        new CreateFileSprite(this.onUploadAvatar.bind(this))\r\n    }\r\n    async onUploadAvatar(_spriteFrame: SpriteFrame, file: File) {\r\n        // PublicModel.getInstance.convertByteToBinary(PublicModel.getInstance._base64ToBytes(base64))\r\n        let fileData = new FormData()\r\n        fileData.append('file', file)\r\n        await new RequestGPG.Request()\r\n            .setMethod(RequestGPG.Method.POST)\r\n            .deletContentType()\r\n            .setBody(fileData)\r\n            .setToken(Player.getInstance.gpgToken)\r\n            .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.UploadAvatar}`, (response: ResponseGPG.UploadAvatar.DataClass) => {\r\n                this.responseUploadAvatar(response, _spriteFrame)\r\n            })\r\n    }\r\n    responseUploadAvatar(response: ResponseGPG.UploadAvatar.DataClass, _spriteFrame: SpriteFrame) {\r\n        console.log(\"圖片上傳成功?\", response);\r\n        if (response.Status.Code == \"0\")\r\n            this.spritePlayer.spriteFrame = _spriteFrame\r\n    }\r\n    async responseMyInfo(response: ResponseGPG.MyInfo.DataClass) {\r\n        console.log(\"MyInfo\", response)\r\n        Player.getInstance.gpgInfo = response;\r\n        // response.data.photo\r\n        // console.log(Player.getInstance.gpgInfo);\r\n\r\n        if (!PublicModel.getInstance.checkStringNull(response.data.photo.headPhoto))\r\n            assetManager.loadRemote(response.data.photo.headPhoto, (err, image: ImageAsset) => {\r\n                if (err) {\r\n                    console.error(err.message);\r\n                    return\r\n                }\r\n                this.spritePlayer.spriteFrame = SpriteFrame.createWithImage(image)\r\n\r\n            })\r\n        if (!PublicModel.getInstance.checkStringNull(response.data.nickName)) {\r\n            this.getplatform = response.data.nickName?.split(\"_\")[0]/**因為前面會有註冊會員的文字，要刪除掉 */\r\n            this.labelNickName.string = response.data.nickName.replace(`${this.getplatform}_`, \"\")\r\n        }\r\n        else\r\n            this.labelNickName.string = response.data.nickName\r\n        this.buttonEditPhone.node.active = PublicModel.getInstance.checkStringNull(response.data.phoneNumber);\r\n        this.labelPhone.string = PublicModel.getInstance.checkStringNull(response.data.phoneNumber) ? \"\" : response.data.phoneNumber\r\n        this.buttonEditEmail.node.active = PublicModel.getInstance.checkStringNull(response.data.email);\r\n        this.labelEmail.string = PublicModel.getInstance.checkStringNull(response.data.email) ? \"\" : response.data.email\r\n        if (this.stopDelay() < 1)\r\n            setTimeout(PanelLoading.instance.closeLoading.bind(PanelLoading.instance), 1000);\r\n        else\r\n            PanelLoading.instance.closeLoading()\r\n    }\r\n\r\n    resetButton() {\r\n        this.buttonEditNickname.node.active = true\r\n        // this.buttonEditPicture.node.active = true\r\n        this.buttonEditPhone.node.active = PublicModel.getInstance.checkStringNull(this.labelPhone.string);\r\n        this.buttonEditEmail.node.active = PublicModel.getInstance.checkStringNull(this.labelEmail.string);\r\n    }\r\n    closeButton() {\r\n        // this.buttonEditPicturse.node.active = false\r\n        this.buttonEditNickname.node.active = false\r\n        this.buttonEditPhone.node.active = false\r\n        this.buttonEditEmail.node.active = false\r\n    }\r\n}\r\n"]}
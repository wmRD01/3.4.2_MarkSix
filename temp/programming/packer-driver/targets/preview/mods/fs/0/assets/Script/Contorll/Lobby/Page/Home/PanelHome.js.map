{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/Home/PanelHome.ts"],"names":["Marquee","Timer","Button","Component","Label","UITransform","_decorator","NotificationType","LobbyStateEvent","PageAction","EventMng","BaseComponent","PublicModel","RequestGPG","Player","PublicData","PanelLoading","ccclass","property","PanelHome","onLoad","marquee","labelMarquee","addComponent","timer","labelTime","onEnable","onDrawHistory","lastIssueID","currentIssueID","onDrawUpcoming","instance","closeLoading","start","startMarquee","onDisable","Promise","resolve","reject","body","Body","NeedToken","DrawHistory","top","sign","getInstance","convertSign","convert","URLSearchParams","toString","Request","setToken","gpgToken","fetchData","APIUrl","playAPI","API","responseDrawHistory","bind","DrawUpcoming","convertMD5","gpgApi","responseDrawUpcoming","response","getDate","data","issueID","labelLastDrawIssueID","string","getday","convertDateDay","openDate","split","labelLastDrawDay","index","drawCode","length","labelLastDrawCode","labelCurrentDrawIssueID","setTimeNoTimer","convertDateTime","console","log","onGoPage","e","customEventData","isNaN","Number","error","eventEmit","ChangePointPage","mapEvnet","get","Page","emit","ChangeTo","bindLabel","node","getComponent","rightBorder","parent","width","message","updateRenderData","leftBorder","resetPos","isAction","update","dt","currentPos","getPosition","x","setPosition","speed","y","z","reset","countTime","str","setTime","num","formatSecond"],"mappings":"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","sourcesContent":["import { Button, Component, EventTouch, Label, Node, UITransform, v3, _decorator } from 'cc';\r\nimport { NotificationType } from '../../../../Enum/NotificationType';\r\nimport { LobbyStateEvent } from '../../../../Enum/LobbyStateEvent';\r\nimport { PageAction } from '../../../../Enum/PageAction';\r\nimport EventMng from '../../../../Manager/EventMng';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport PageControll from '../../PageControll';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport Player from '../../../../Model/Player';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport PublicData from '../../../../Model/PublicData';\r\nimport PanelLoading from '../../../NoClearNode/PanelLoading';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PanelHome')\r\nexport default class PanelHome extends BaseComponent {\r\n    @property(Label)\r\n    labelTime: Label;\r\n    @property(Label)\r\n    labelCurrentTitle: Label;\r\n    @property(Label)\r\n    labelCurrentDrawIssueID: Label;\r\n    @property(Label)\r\n    labelLastDrawCode: Label[] = []\r\n    @property(Label)\r\n    labelLastDrawIssueID: Label;\r\n    @property(Label)\r\n    labelLastDrawDay: Label;\r\n    @property(Label)\r\n    labelMarquee: Label;\r\n    @property(Label)\r\n    labelMonth: Label;\r\n    @property(Label)\r\n    labelPointTitle: Label;\r\n    @property(Label)\r\n    labelMyPoint: Label;\r\n    @property(Label)\r\n    labelDetail: Label;\r\n    @property(Label)\r\n    labelGiftTitle1: Label\r\n    @property(Label)\r\n    labelGiftTitle2: Label\r\n    @property(Button)\r\n    btnMoreDraw: Button;\r\n    @property(Button)\r\n    btnPointDetail: Button;\r\n    @property(Button)\r\n    btnGoChooese: Button;\r\n\r\n    marquee: Marquee;\r\n    timer: Timer;\r\n    currentIssueID: number;\r\n    lastIssueID: number;\r\n    onLoad() {\r\n        this.marquee = this.labelMarquee.addComponent(Marquee)\r\n        this.timer = this.labelTime.addComponent(Timer);\r\n    }\r\n    async onEnable() {\r\n        await this.onDrawHistory()\r\n        if (this.lastIssueID != this.currentIssueID) {\r\n            await this.onDrawUpcoming()\r\n            /**代表更新最新一期 */\r\n            this.lastIssueID = this.currentIssueID;\r\n        }\r\n        PanelLoading.instance.closeLoading()\r\n    }\r\n    start() {\r\n        this.marquee.startMarquee(\"HIHIHI\")\r\n        // this.timer.setTime(100)\r\n    }\r\n\r\n    onDisable() {\r\n\r\n    }\r\n\r\n    async onDrawHistory() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.DrawHistory()\r\n            body.top = \"1\"\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.DrawHistory)\r\n            let convert = new URLSearchParams(body).toString()\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.DrawHistory}?${convert}`, this.responseDrawHistory.bind(this))\r\n            resolve();\r\n        })\r\n    }\r\n    async onDrawUpcoming() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.DrawUpcoming()\r\n            body.sign = PublicModel.getInstance.convertMD5(PublicData.getInstance.gpgApi)\r\n            let convert = new URLSearchParams(body).toString()\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.DrawUpcoming}?${convert}`, this.responseDrawUpcoming.bind(this))\r\n            resolve()\r\n        })\r\n    }\r\n    responseDrawHistory(response?: ResponseGPG.DrawHistory.DataClass) {\r\n        let getDate = response.data[0]\r\n        this.currentIssueID = getDate.issueID;\r\n        this.labelLastDrawIssueID.string = `第${getDate.issueID.toString()}期`\r\n\r\n        /**不需要week日 */\r\n        // console.log(PublicModel.getInstance.convertDate(getDate.openDate).split(\"(\")[0]);\r\n\r\n        let getday = PublicModel.getInstance.convertDateDay(getDate.openDate).split(\"(\")[0]\r\n        this.labelLastDrawDay.string = `${getday}開獎結果`\r\n        for (let index = 0; index < getDate.drawCode.length; index++) {\r\n            if (index == 6) return;\r\n            this.labelLastDrawCode[index].string = getDate.drawCode[index];\r\n        }\r\n\r\n    }\r\n    responseDrawUpcoming(response?: ResponseGPG.DrawUpcoming.DataClass) {\r\n        let getDate = response.data[0]\r\n        this.labelCurrentDrawIssueID.string = `第${(getDate.issueID).toString()}期`\r\n        this.timer.setTimeNoTimer(PublicModel.getInstance.convertDateTime(getDate.openDate))\r\n        console.log(response);\r\n\r\n    }\r\n    onGoPage(e: EventTouch, customEventData?: string) {\r\n        let split = customEventData.split('-')\r\n        if (isNaN(Number(split[0])))\r\n            console.error(\"錯誤啦!!!是不是忘記設定\");\r\n        this.eventEmit(LobbyStateEvent.ChangePointPage, null, split[1])\r\n        EventMng.getInstance.mapEvnet.get(NotificationType.Page).emit(PageAction.ChangeTo, Number(split[0]))\r\n    }\r\n\r\n}\r\n\r\nclass Marquee extends Component {\r\n    bindLabel: Label;\r\n    leftBorder: number;\r\n    rightBorder: number;\r\n    isAction: boolean;\r\n    /**基本上100 OK */\r\n    speed: number = 100;\r\n    onLoad() {\r\n        this.bindLabel = this.node.getComponent(Label)\r\n        this.rightBorder = this.bindLabel.node.parent.getComponent(UITransform).width + 10//額外預留\r\n    }\r\n    startMarquee(message: string) {\r\n        this.bindLabel.string = message\r\n        this.bindLabel.updateRenderData(true)\r\n        this.leftBorder = -(this.bindLabel.getComponent(UITransform).width + 10)\r\n        this.resetPos()\r\n        this.isAction = true;\r\n    }\r\n    update(dt: number) {\r\n\r\n        if (this.isAction) {\r\n            let currentPos = this.bindLabel.node.getPosition()\r\n            if (currentPos.x < this.leftBorder) {\r\n                this.resetPos()\r\n                currentPos = this.bindLabel.node.getPosition()\r\n            }\r\n            // console.log(currentPos.x);\r\n\r\n            // console.log(currentPos.x - (dt * this.speed));\r\n            // \r\n            this.bindLabel.node.setPosition(currentPos.x - (dt * this.speed), currentPos.y, currentPos.z)\r\n\r\n        }\r\n    }\r\n    resetPos() {\r\n        let currentPos = this.bindLabel.node.getPosition()\r\n        this.bindLabel.node.setPosition(this.rightBorder, currentPos.y, currentPos.z)\r\n    }\r\n}\r\n\r\nclass Timer extends Component {\r\n    bindLabel: Label;\r\n    countTime: number;\r\n    isAction: boolean\r\n    onLoad() {\r\n        this.bindLabel = this.node.getComponent(Label)\r\n        this.bindLabel.string = \"\"\r\n    }\r\n    reset() {\r\n        this.countTime = 0\r\n        this.isAction = false\r\n    }\r\n    setTimeNoTimer(str: string) {\r\n        this.bindLabel.string = str\r\n    }\r\n    setTime(num: number) {\r\n        this.countTime = num\r\n        this.isAction = true\r\n    }\r\n    update(dt: number) {\r\n        if (this.isAction) {\r\n            this.countTime -= dt\r\n            if (this.countTime < 0) this.reset()\r\n            this.bindLabel.string = PublicModel.getInstance.formatSecond(this.countTime, true)\r\n        }\r\n    }\r\n}"]}
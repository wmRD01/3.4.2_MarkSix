{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Contorll/Lobby/Page/Point/PanelTopRank.ts"],"names":["instantiate","Node","Prefab","_decorator","AssetType","AssetMng","BaseComponent","AutoFollow","RankItmeData","RequestGPG","PublicModel","PublicData","Player","ccclass","property","PanelTopRank","start","waitStateCheck","Sprite","layoutRank","removeAllChildren","requesTopScore","Promise","resolve","reject","body","Body","NeedToken","TopScore","getDate","Date","getInstance","today","sDate","getFullYear","getMonth","eDate","getMonthAllDay","sign","convertSign","convert","URLSearchParams","toString","console","log","Request","setToken","gpgToken","fetchData","APIUrl","playAPI","API","responseTopScore","bind","response","index","data","length","_node","prefabRankItem","_class","getComponent","init","labelName","addComponent","createNewTarget","labelPointCount","spriteBG","setTarget","labelContent","addChild","node","spriteBGContent"],"mappings":"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","sourcesContent":["import { instantiate, Node, Prefab, _decorator } from 'cc';\r\nimport { AssetType } from '../../../../Enum/AssetType';\r\nimport AssetMng from '../../../../Manager/AssetMng';\r\nimport BaseComponent from '../../../../Model/ComponentBase';\r\nimport AutoFollow from '../../../../Model/AutoFollow';\r\nimport RankItmeData from '../../../../Model/RankItmeData';\r\nimport { RequestGPG } from '../../../Api/GPGAPI/RequestGPG';\r\nimport PublicModel from '../../../../Model/PublicModel';\r\nimport PublicData from '../../../../Model/PublicData';\r\nimport { ResponseGPG } from '../../../Api/GPGAPI/ResponseGPG';\r\nimport Player from '../../../../Model/Player';\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('PanelTopRank')\r\nexport default class PanelTopRank extends BaseComponent {\r\n    @property(Prefab)\r\n    prefabRankItem: Prefab\r\n    @property(Node)\r\n    layoutRank: Node\r\n    @property(Node)\r\n    labelContent: Node;\r\n    @property(Node)\r\n    spriteBGContent: Node;\r\n    async start() {\r\n        await AssetMng.waitStateCheck(AssetType.Sprite)\r\n        this.layoutRank.removeAllChildren()\r\n\r\n        await this.requesTopScore()\r\n    }\r\n    async requesTopScore() {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const body = new RequestGPG.Body.NeedToken.TopScore()\r\n            const getDate = new Date(PublicData.getInstance.today)\r\n            body.sDate = `${getDate.getFullYear()}-${getDate.getMonth() + 1}-01`\r\n            body.eDate = `${getDate.getFullYear()}-${getDate.getMonth() + 1}-${PublicModel.getInstance.getMonthAllDay(PublicData.getInstance.today)}`\r\n            body.sign = PublicModel.getInstance.convertSign(body, RequestGPG.Body.NeedToken.TopScore)\r\n            let convert = new URLSearchParams(body).toString()\r\n            console.log(body);\r\n            console.log(convert);\r\n            await new RequestGPG.Request()\r\n                .setToken(Player.getInstance.gpgToken)\r\n                .fetchData(`${RequestGPG.APIUrl.playAPI}${RequestGPG.API.TopScore}?${convert}`, this.responseTopScore.bind(this))\r\n            resolve()\r\n        })\r\n    }\r\n    responseTopScore(response?: ResponseGPG.TopScore.DataClass) {\r\n        console.log(\"排行榜\", response);\r\n        for (let index = 0; index < response.data.length; index++) {\r\n            let _node = instantiate(this.prefabRankItem)\r\n            let _class = _node.getComponent(RankItmeData)\r\n            _class.init(response.data[index])\r\n            _class.labelName.addComponent(AutoFollow).createNewTarget()\r\n            _class.labelPointCount.addComponent(AutoFollow).createNewTarget()\r\n            _class.spriteBG.addComponent(AutoFollow).setTarget(_node)\r\n            this.labelContent.addChild(_class.labelName.node)\r\n            this.labelContent.addChild(_class.labelPointCount.node)\r\n            this.spriteBGContent.addChild(_class.spriteBG.node)\r\n            this.layoutRank.addChild(_node)\r\n        }\r\n    }\r\n\r\n}"]}
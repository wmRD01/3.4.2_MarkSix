{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Manager/EventMng.ts"],"names":["EventTarget","_decorator","BaseSingleton","NotificationType","ccclass","property","EventMng","Map","init","index","Object","keys","length","mapEvnet","set","emit","notiType","emitType","any","get","setEvent","callback","target","on","deletEvent"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,W,OAAAA,W;AASAC,MAAAA,U,OAAAA,U;;AACFC,MAAAA,a;;AACEC,MAAAA,gB,iBAAAA,gB;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;yBAETK,Q,WADpBF,OAAO,CAAC,UAAD,C,yBAAR,MACqBE,QADrB,SACsC;AAAA;AAAA,2CADtC,CACgE;AAAA;AAAA;;AAAA,4CACb,IAAIC,GAAJ,EADa;AAAA;;AAE5DC,QAAAA,IAAI,GAAG;AACH;AACA,eAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGC,MAAM,CAACC,IAAP;AAAA;AAAA,oDAA8BC,MAA9B,GAAuC,CAAnE,EAAsEH,KAAK,EAA3E,EAA+E;AAC3E,iBAAKI,QAAL,CAAcC,GAAd,CAAkBL,KAAlB,EAAyB,IAAIT,WAAJ,EAAzB;AACH;AACJ;;AACDe,QAAAA,IAAI,CAACC,QAAD,EAA6BC,QAA7B,EAAuE;AAAA,4CAAZC,GAAY;AAAZA,YAAAA,GAAY;AAAA;;AACvE,eAAKL,QAAL,CAAcM,GAAd,CAAkBH,QAAlB,EAA4BD,IAA5B,CAAiCE,QAAjC,EAA2C,GAAGC,GAA9C;AACH;;AACDE,QAAAA,QAAQ,CAACJ,QAAD,EAA6BC,QAA7B,EAAwDI,QAAxD,EAAkFC,MAAlF,EAA+F;AACnG,eAAKT,QAAL,CAAcM,GAAd,CAAkBH,QAAlB,EAA4BO,EAA5B,CAA+BN,QAA/B,EAAyCI,QAAzC,EAAmDC,MAAnD;AACH;;AACDE,QAAAA,UAAU,CAACR,QAAD,EAA6BC,QAA7B,EAAwDI,QAAxD,EAAkFC,MAAlF,EAA+F;AACrG,eAAKT,QAAL,CAAcM,GAAd,CAAkBH,QAAlB,EAA4BO,EAA5B,CAA+BN,QAA/B,EAAyCI,QAAzC,EAAmDC,MAAnD;AACH;;AAhB2D,O","sourcesContent":["import { EventTarget } from \"cc\";\r\n// import BaseSingleton from \"../../Patten/Singleton/BaseSingleton\";\r\n\r\n\r\n// export default class EventMng extends BaseSingleton<EventMng>() {\r\n//     eventMng:EventTarget = new EventTarget()\r\n\r\n// }\r\n\r\nimport { _decorator } from 'cc';\r\nimport BaseSingleton from \"../../Patten/Singleton/BaseSingleton\";\r\nimport { NotificationType } from \"../Enum/NotificationType\";\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('EventMng')\r\nexport default class EventMng extends BaseSingleton<EventMng>() {\r\n    mapEvnet: Map<NotificationType, EventTarget> = new Map()\r\n    init() {\r\n        /**因為會包含Valude，所以直接/2就是整個Object的數量 */\r\n        for (let index = 0; index < Object.keys(NotificationType).length / 2; index++) {\r\n            this.mapEvnet.set(index, new EventTarget())\r\n        }\r\n    }\r\n    emit(notiType: NotificationType, emitType: string | number, ...any: any[]) {\r\n        this.mapEvnet.get(notiType).emit(emitType, ...any);\r\n    }\r\n    setEvent(notiType: NotificationType, emitType: string | number, callback: any | Function, target: any) {\r\n        this.mapEvnet.get(notiType).on(emitType, callback, target)\r\n    }\r\n    deletEvent(notiType: NotificationType, emitType: string | number, callback: any | Function, target: any) {\r\n        this.mapEvnet.get(notiType).on(emitType, callback, target)\r\n    }\r\n}\r\n\r\n\r\n"]}
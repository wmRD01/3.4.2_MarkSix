{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Manager/NodePoolMng/NodePoolMng.ts"],"names":["NodePoolManager","warn","BaseSingleton","CCNodePool","SelfPool","Map","init","name","nodeOrPrefab","count","pools","has","set","getPool","key","get","node","nameMap","put","nodePool","delete","clearTarget","clear","clearAll"],"mappings":";;;yEAYaA,e;;;;;;;;;;;;;;;;;;;;;;;AAZUC,MAAAA,I,OAAAA,I;;AAChBC,MAAAA,a;;AACEC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Q,iBAAAA,Q;;;;;;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;iCACaJ,e,GAAN,MAAMA,eAAN,SAA8B;AAAA;AAAA,2CAA9B,CAA+D;AAAA;AAAA;;AAAA,yCAQ3B,IAAIK,GAAJ,EAR2B;;AAAA,2CAe7B,IAAIA,GAAJ,EAf6B;AAAA;;AAiBlE;AACJ;AACA;AACA;AACA;AACA;AACIC,QAAAA,IAAI,CAACC,IAAD,EAAeC,YAAf,EAA4CC,KAA5C,EAA2D;AAC3D,cAAI,CAAC,KAAKC,KAAL,CAAWC,GAAX,CAAeJ,IAAf,CAAL,EAA2B;AACvB,iBAAKG,KAAL,CAAWE,GAAX,CAAeL,IAAf,EAAqB;AAAA;AAAA,sCAAa;AAAA;AAAA,0CAAeA,IAAf,EAAqBC,YAArB,EAAmCC,KAAnC,CAAb,CAArB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACII,QAAAA,OAAO,CAACC,GAAD,EAA0B;AAC7B,iBAAO,KAAKJ,KAAL,CAAWK,GAAX,CAAeD,GAAf,EAAoBD,OAApB,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIE,QAAAA,GAAG,CAACD,GAAD,EAAoB;AACnB,cAAI,KAAKJ,KAAL,CAAWC,GAAX,CAAeG,GAAf,CAAJ,EAAyB;AACrB,gBAAIE,IAAU,GAAG,KAAKN,KAAL,CAAWK,GAAX,CAAeD,GAAf,EAAoBC,GAApB,EAAjB;;AACA,gBAAI,CAAC,KAAKE,OAAL,CAAaN,GAAb,CAAiBK,IAAjB,CAAD,IAA2BA,IAAI,CAACT,IAAL,IAAaO,GAA5C,EAAiD;AAC7C,mBAAKG,OAAL,CAAaL,GAAb,CAAiBI,IAAjB,EAAuBF,GAAvB;AACH;;AACD,mBAAOE,IAAP;AACH;;AACD,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIE,QAAAA,GAAG,CAACF,IAAD,EAAaG,QAAb,EAAsC;AACrC,cAAIL,GAAG,GAAG,KAAKG,OAAL,CAAaF,GAAb,CAAiBC,IAAjB,CAAV;;AACA,cAAI,CAAC,KAAKN,KAAL,CAAWC,GAAX,CAAeG,GAAf,CAAL,EAA0B;AACtBb,YAAAA,IAAI,CAAC,iBAAD,EAAoBa,GAApB,EAAyB,YAAzB,EAAuCE,IAAI,CAACT,IAA5C,CAAJ;AACA;AACH;;AACD,eAAKG,KAAL,CAAWK,GAAX,CAAeD,GAAf,EAAoBI,GAApB,CAAwBF,IAAxB,EAA8BG,QAA9B;AACA,eAAKF,OAAL,CAAaG,MAAb,CAAoBJ,IAApB;AACH;AAED;AACJ;AACA;AACA;;;AACIK,QAAAA,WAAW,CAACd,IAAD,EAAe;AACtB,cAAI,KAAKG,KAAL,CAAWC,GAAX,CAAeJ,IAAf,CAAJ,EAA0B;AACtB,iBAAKG,KAAL,CAAWK,GAAX,CAAeR,IAAf,EAAqBe,KAArB;AACA,iBAAKZ,KAAL,CAAWU,MAAX,CAAkBb,IAAlB;AACH;AACJ;AAED;AACJ;AACA;;;AACIgB,QAAAA,QAAQ,GAAG;AACP,eAAK,IAAMT,GAAX,IAAkB,KAAKJ,KAAvB,EAA8B;AAC1B,iBAAKW,WAAL,CAAiBP,GAAjB;AACH;;AACD,eAAKJ,KAAL,CAAWY,KAAX;AACH;;AAxFiE,O","sourcesContent":["import { Node, Prefab, warn } from \"cc\";\r\nimport BaseSingleton from \"../../../Patten/Singleton/BaseSingleton\";\r\nimport { CCNodePool } from \"./CCNodePool\";\r\nimport { SelfPool } from \"./SelfPool\";\r\n\r\n/**\r\n * @Author 蕭立品\r\n * @Description 緩存池管理器\r\n * @Date 2021-10-29 下午 02:28\r\n * @Version 1.0\r\n * https://github.com/a0979225002/GameFramework/tree/e0a84930d4431433252ca84584c295c833fc6197\r\n */\r\nexport class NodePoolManager extends BaseSingleton<NodePoolManager>() {\r\n\r\n\r\n    /**\r\n     * 對象池表\r\n     * @type {Map<string, SelfPool>}\r\n     * @private\r\n     */\r\n    private pools: Map<string, SelfPool> = new Map<string, SelfPool>();\r\n\r\n    /**\r\n     * 保存node物件name名,使清除物件時,可透過該node物件的name名,查找對應的pool池的key\r\n     * @type {Map<Node, string>}\r\n     * @private\r\n     */\r\n    private nameMap: Map<Node, string> = new Map<Node, string>();\r\n\r\n    /**\r\n     * 初始該物件保存至緩存池中\r\n     * @param {string} name 自訂物件名稱\r\n     * @param {Prefab | Node} nodeOrPrefab - 要建立的物件\r\n     * @param {number} count - 數量\r\n     */\r\n    init(name: string, nodeOrPrefab: Prefab | Node, count: number) {\r\n        if (!this.pools.has(name)) {\r\n            this.pools.set(name, new SelfPool(new CCNodePool(name, nodeOrPrefab, count)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲取該緩存池\r\n     * @param {string} key\r\n     * @return {CCNodePool}\r\n     */\r\n    getPool(key: string): CCNodePool {\r\n        return this.pools.get(key).getPool();\r\n    }\r\n\r\n    /**\r\n     * 獲取緩存池內物件\r\n     * @param {string} key - 當初自訂義名稱\r\n     * @return {Node}\r\n     */\r\n    get(key: string): Node {\r\n        if (this.pools.has(key)) {\r\n            let node: Node = this.pools.get(key).get();\r\n            if (!this.nameMap.has(node) && node.name != key) {\r\n                this.nameMap.set(node, key);\r\n            }\r\n            return node;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 回收進對象池\r\n     * @param {Node} node - 要回收的物件\r\n     * @param {boolean} nodePool - 是否要回收進對象池\r\n     */\r\n    put(node: Node, nodePool: boolean): void {\r\n        let key = this.nameMap.get(node);\r\n        if (!this.pools.has(key)) {\r\n            warn(\" not have name \", key, ' ,go.name ', node.name);\r\n            return;\r\n        }\r\n        this.pools.get(key).put(node, nodePool);\r\n        this.nameMap.delete(node);\r\n    }\r\n\r\n    /**\r\n     * 清除該對象池內所有物件\r\n     * @param {string} name\r\n     */\r\n    clearTarget(name: string) {\r\n        if (this.pools.has(name)) {\r\n            this.pools.get(name).clear();\r\n            this.pools.delete(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除所有緩存池內所有物件\r\n     */\r\n    clearAll() {\r\n        for (const key in this.pools) {\r\n            this.clearTarget(key);\r\n        }\r\n        this.pools.clear();\r\n    }\r\n}\r\n"]}
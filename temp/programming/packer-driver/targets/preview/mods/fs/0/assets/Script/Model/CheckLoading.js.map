{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Model/CheckLoading.ts"],"names":["CheckLoading","BaseSingleton","CheckLoadingType","constructor","Map","value","isNaN","Number","map_CheckList","set","checkAllEnd","Promise","resolve","reject","roop","setInterval","isOK","key","clearInterval","endWork","type","console","log","checkState","resetState","get"],"mappings":";;;+DAGqBA,Y;;;;;;;;;;;;;;;;;;;;;;;;AAHdC,MAAAA,a;;AACEC,MAAAA,gB,iBAAAA,gB;;;;;;;yBAEYF,Y,GAAN,MAAMA,YAAN,SAA2B;AAAA;AAAA,2CAA3B,CAAyD;AAEpEG,QAAAA,WAAW,GAAG;AACV;;AADU,iDADkC,IAAIC,GAAJ,EAClC;;AAEV,eAAK,IAAMC,KAAX;AAAA;AAAA,oDAAsC;AAClC,gBAAIC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAT,EAA0B;AAE1B,iBAAKG,aAAL,CAAmBC,GAAnB,CAAuBF,MAAM,CAACF,KAAD,CAA7B,EAAsC,KAAtC;AACH;AACJ;;AACKK,QAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,mBAAO,IAAIC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,kBAAIC,IAAI,GAAGC,WAAW,CAAC,MAAM;AACzB,oBAAIC,IAAI,GAAG,IAAX;;AACA,qBAAK,IAAM,CAACC,GAAD,EAAMZ,KAAN,CAAX,IAA2B,KAAI,CAACG,aAAhC,EAA+C;AAC3C,sBAAIH,KAAK,IAAI,KAAb,EACIW,IAAI,GAAG,KAAP;AACP;;AACD,oBAAIA,IAAJ,EAAU;AACNE,kBAAAA,aAAa,CAACJ,IAAD,CAAb;AACAF,kBAAAA,OAAO;AACP;AACH,iBAVwB,CAWzB;;AAEH,eAbqB,EAanB,GAbmB,CAAtB;AAcH,aAfM,CAAP;AADgB;AAiBnB;;AACDO,QAAAA,OAAO,CAACC,IAAD,EAAyB;AAC5BC,UAAAA,OAAO,CAACC,GAAR,wBAAkBF,IAAlB,cAA0B,KAAKG,UAAL,CAAgBH,IAAhB,CAA1B;AAEA,eAAKZ,aAAL,CAAmBC,GAAnB,CAAuBW,IAAvB,EAA6B,IAA7B;AACAC,UAAAA,OAAO,CAACC,GAAR,wBAAkBF,IAAlB,cAA0B,KAAKG,UAAL,CAAgBH,IAAhB,CAA1B;AAEH;;AACDI,QAAAA,UAAU,CAACJ,IAAD,EAAyB;AAC/B,eAAKZ,aAAL,CAAmBC,GAAnB,CAAuBW,IAAvB,EAA6B,KAA7B;AACH;;AACDG,QAAAA,UAAU,CAACH,IAAD,EAAyB;AAC/B,iBAAO,KAAKZ,aAAL,CAAmBiB,GAAnB,CAAuBL,IAAvB,CAAP;AACH;;AAxCmE,O","sourcesContent":["import BaseSingleton from \"../../Patten/Singleton/BaseSingleton\";\r\nimport { CheckLoadingType } from \"../Enum/CheckLoadingType\";\r\n\r\nexport default class CheckLoading extends BaseSingleton<CheckLoading>() {\r\n    map_CheckList: Map<CheckLoadingType, boolean> = new Map()\r\n    constructor() {\r\n        super();\r\n        for (const value in CheckLoadingType) {\r\n            if (isNaN(Number(value))) break\r\n\r\n            this.map_CheckList.set(Number(value), false)\r\n        }\r\n    }\r\n    async checkAllEnd() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            let roop = setInterval(() => {\r\n                let isOK = true\r\n                for (const [key, value] of this.map_CheckList) {\r\n                    if (value == false)\r\n                        isOK = false\r\n                }\r\n                if (isOK) {\r\n                    clearInterval(roop)\r\n                    resolve()\r\n                    return\r\n                }\r\n                // console.error(\"資料仔仔仔仔仔仔仔仔入中\");\r\n\r\n            }, 100)\r\n        })\r\n    }\r\n    endWork(type: CheckLoadingType) {\r\n        console.log(`當前直${type}：${this.checkState(type)}`);\r\n\r\n        this.map_CheckList.set(type, true)\r\n        console.log(`當前直${type}：${this.checkState(type)}`);\r\n\r\n    }\r\n    resetState(type: CheckLoadingType) {\r\n        this.map_CheckList.set(type, false)\r\n    }\r\n    checkState(type: CheckLoadingType) {\r\n        return this.map_CheckList.get(type)\r\n    }\r\n}"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/assets/Script/Socket/SocketSetting.ts"],"names":["SocketSetting","LangType","Object","setLang","language","Language","init","_data","_type","data","Game","gameData","serverData","key","prototype","hasOwnProperty","call","isGame","isServer","t","option","checkSetLang","Promise","resolve","reject","checkLoop","setInterval","isbool","clearInterval","checkLanguage","Server"],"mappings":"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","sourcesContent":["import { LangType } from \"../Enum/LangType\";\r\n\r\nclass SocketSetting {\r\n    UserLanguage: string;\r\n    IsMessage: boolean;\r\n    ClientSetObject = {};      // 客端底層所有參數存放位置\r\n    setboolean = false;        // 讓設定值只設定一次\r\n    ServerReturnData = {};     // Server回傳所有參數 \r\n    Language = \"\";\r\n    gameData: Object = new Object();\r\n    serverData: Object = new Object();\r\n    isGame: boolean;\r\n    isServer: boolean\r\n\r\n    setLang(language: string) {\r\n        this.Language = language;\r\n        return this\r\n    }\r\n    init(_data: Object, _type: LangType) {\r\n        // console.log(_type, _data);\r\n\r\n        let data = _type == LangType.Game ? this.gameData : this.serverData\r\n\r\n\r\n        for (const key in _data) {\r\n            if (!Object.prototype.hasOwnProperty.call(data, key)) {\r\n                data[key] = _data[key];\r\n            }\r\n\r\n        }\r\n        _type == LangType.Game ? this.isGame = true : this.isServer = true\r\n\r\n        return this\r\n\r\n        //@ts-ignore\r\n        // this.data = data;\r\n        // console.log(language);\r\n    }\r\n    t(option: string, _type: LangType) {\r\n        let data = _type == LangType.Game ? this.gameData : this.serverData\r\n        // console.log(option);\r\n        // console.log(data);\r\n        if (data == null) {\r\n            return option;\r\n        }\r\n        return data[option] == null ? option : data[option];\r\n    }\r\n    async checkSetLang() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (this.Language != \"\") resolve()\r\n\r\n            let checkLoop = setInterval(() => {\r\n                let isbool = this.Language == \"\" ? true : false\r\n                if (!isbool) {\r\n                    resolve();\r\n                    clearInterval(checkLoop)\r\n                }\r\n            }, 100)\r\n        })\r\n    }\r\n    async checkLanguage(_type: LangType) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (_type == LangType.Game && this.isGame) resolve();\r\n            if (_type == LangType.Server && this.isServer) resolve();\r\n            let checkLoop = setInterval(() => {\r\n                let isbool = _type == LangType.Game ? this.isGame : this.isServer\r\n                if (isbool) {\r\n                    // console.log(SocketSetting.data);\r\n\r\n                    resolve();\r\n                    clearInterval(checkLoop)\r\n                }\r\n            }, 100)\r\n        })\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default new SocketSetting();\r\n\r\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/cipher-core.js"],"names":["Cipher","StreamCipher","BlockCipherMode","CBC","BlockCipher","CipherParams","SerializableCipher","PasswordBasedCipher","xorBlock","words","offset","blockSize","_words","block","iv","_iv","undefined","_prevBlock","i","Base","WordArray","BufferedBlockAlgorithm","Base64","EvpKDFAlgo","constructor","xformMode","key","cfg","Object","assign","_xformMode","_key","reset","createEncryptor","create","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","_createHelper","SubCipher","selectCipherStrategy","encrypt","message","decrypt","ciphertext","call","_doReset","process","dataUpdate","_append","_process","finalize","finalProcessedData","_doFinalize","keySize","ivSize","finalProcessedBlocks","cipher","_cipher","Encryptor","Decryptor","processBlock","encryptBlock","slice","thisBlock","decryptBlock","Pkcs7","pad","data","blockSizeBytes","nPaddingBytes","sigBytes","paddingWord","paddingWords","push","padding","concat","unpad","_data","mode","modeCreator","_minBufferSize","_mode","__creator","_doProcessBlock","cipherParams","mixIn","toString","formatter","stringify","OpenSSLFormatter","wordArray","salt","parse","openSSLStr","ciphertextWords","splice","_cfg","encryptor","cipherCfg","algorithm","format","_ciphertext","_parse","plaintext","OpenSSLKdf","execute","password","hasher","_salt","random","compute","derivedParams","kdf"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n\nimport {\n  Base,\n  WordArray,\n  BufferedBlockAlgorithm,\n} from './core.js';\nimport { Base64 } from './enc-base64.js';\nimport { EvpKDFAlgo } from './evpkdf.js';\n\n/**\n * Abstract base cipher template.\n *\n * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n */\nexport class Cipher extends BufferedBlockAlgorithm {\n  /**\n   * Initializes a newly created cipher.\n   *\n   * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.create(\n   *       CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray }\n   *     );\n   */\n  constructor(xformMode, key, cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {WordArray} iv The IV to use for this operation.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Store transform mode and key\n    this._xformMode = xformMode;\n    this._key = key;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {Cipher} A cipher instance.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  static createEncryptor(key, cfg) {\n    return this.create(this._ENC_XFORM_MODE, key, cfg);\n  }\n\n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {Cipher} A cipher instance.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  static createDecryptor(key, cfg) {\n    return this.create(this._DEC_XFORM_MODE, key, cfg);\n  }\n\n  /**\n   * Creates shortcut functions to a cipher's object interface.\n   *\n   * @param {Cipher} cipher The cipher to create a helper for.\n   *\n   * @return {Object} An object with encrypt and decrypt shortcut functions.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n   */\n  static _createHelper(SubCipher) {\n    const selectCipherStrategy = (key) => {\n      if (typeof key === 'string') {\n        return PasswordBasedCipher;\n      }\n      return SerializableCipher;\n    };\n\n    return {\n      encrypt(message, key, cfg) {\n        return selectCipherStrategy(key).encrypt(SubCipher, message, key, cfg);\n      },\n\n      decrypt(ciphertext, key, cfg) {\n        return selectCipherStrategy(key).decrypt(SubCipher, ciphertext, key, cfg);\n      },\n    };\n  }\n\n  /**\n   * Resets this cipher to its initial state.\n   *\n   * @example\n   *\n   *     cipher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-cipher logic\n    this._doReset();\n  }\n\n  /**\n   * Adds data to be encrypted or decrypted.\n   *\n   * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n   *\n   * @return {WordArray} The data after processing.\n   *\n   * @example\n   *\n   *     const encrypted = cipher.process('data');\n   *     const encrypted = cipher.process(wordArray);\n   */\n  process(dataUpdate) {\n    // Append\n    this._append(dataUpdate);\n\n    // Process available blocks\n    return this._process();\n  }\n\n  /**\n   * Finalizes the encryption or decryption process.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n   *\n   * @return {WordArray} The data after final processing.\n   *\n   * @example\n   *\n   *     const encrypted = cipher.finalize();\n   *     const encrypted = cipher.finalize('data');\n   *     const encrypted = cipher.finalize(wordArray);\n   */\n  finalize(dataUpdate) {\n    // Final data update\n    if (dataUpdate) {\n      this._append(dataUpdate);\n    }\n\n    // Perform concrete-cipher logic\n    const finalProcessedData = this._doFinalize();\n\n    return finalProcessedData;\n  }\n}\nCipher._ENC_XFORM_MODE = 1;\nCipher._DEC_XFORM_MODE = 2;\nCipher.keySize = 128 / 32;\nCipher.ivSize = 128 / 32;\n\n/**\n * Abstract base stream cipher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n */\nexport class StreamCipher extends Cipher {\n  constructor(...args) {\n    super(...args);\n\n    this.blockSize = 1;\n  }\n\n  _doFinalize() {\n    // Process partial blocks\n    const finalProcessedBlocks = this._process(!!'flush');\n\n    return finalProcessedBlocks;\n  }\n}\n\n/**\n * Abstract base block cipher mode template.\n */\nexport class BlockCipherMode extends Base {\n  /**\n   * Initializes a newly created mode.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n   */\n  constructor(cipher, iv) {\n    super();\n\n    this._cipher = cipher;\n    this._iv = iv;\n  }\n\n  /**\n   * Creates this mode for encryption.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n   */\n  static createEncryptor(cipher, iv) {\n    return this.Encryptor.create(cipher, iv);\n  }\n\n  /**\n   * Creates this mode for decryption.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n   */\n  static createDecryptor(cipher, iv) {\n    return this.Decryptor.create(cipher, iv);\n  }\n}\n\nfunction xorBlock(words, offset, blockSize) {\n  const _words = words;\n  let block;\n\n  // Shortcut\n  const iv = this._iv;\n\n  // Choose mixing block\n  if (iv) {\n    block = iv;\n\n    // Remove IV for subsequent blocks\n    this._iv = undefined;\n  } else {\n    block = this._prevBlock;\n  }\n\n  // XOR blocks\n  for (let i = 0; i < blockSize; i += 1) {\n    _words[offset + i] ^= block[i];\n  }\n}\n\n/**\n * Cipher Block Chaining mode.\n */\n\n/**\n * Abstract base CBC mode.\n */\nexport class CBC extends BlockCipherMode {\n}\n/**\n * CBC encryptor.\n */\nCBC.Encryptor = class extends CBC {\n  /**\n   * Processes the data block at offset.\n   *\n   * @param {Array} words The data words to operate on.\n   * @param {number} offset The offset where the block starts.\n   *\n   * @example\n   *\n   *     mode.processBlock(data.words, offset);\n   */\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n\n    // XOR and encrypt\n    xorBlock.call(this, words, offset, blockSize);\n    cipher.encryptBlock(words, offset);\n\n    // Remember this block to use with next block\n    this._prevBlock = words.slice(offset, offset + blockSize);\n  }\n};\n/**\n * CBC decryptor.\n */\nCBC.Decryptor = class extends CBC {\n  /**\n   * Processes the data block at offset.\n   *\n   * @param {Array} words The data words to operate on.\n   * @param {number} offset The offset where the block starts.\n   *\n   * @example\n   *\n   *     mode.processBlock(data.words, offset);\n   */\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n\n    // Remember this block to use with next block\n    const thisBlock = words.slice(offset, offset + blockSize);\n\n    // Decrypt and XOR\n    cipher.decryptBlock(words, offset);\n    xorBlock.call(this, words, offset, blockSize);\n\n    // This block becomes the previous block\n    this._prevBlock = thisBlock;\n  }\n};\n\n/**\n * PKCS #5/7 padding strategy.\n */\nexport const Pkcs7 = {\n  /**\n   * Pads data using the algorithm defined in PKCS #5/7.\n   *\n   * @param {WordArray} data The data to pad.\n   * @param {number} blockSize The multiple that the data should be padded to.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n   */\n  pad(data, blockSize) {\n    // Shortcut\n    const blockSizeBytes = blockSize * 4;\n\n    // Count padding bytes\n    const nPaddingBytes = blockSizeBytes - (data.sigBytes % blockSizeBytes);\n\n    // Create padding word\n    const paddingWord = (nPaddingBytes << 24)\n      | (nPaddingBytes << 16)\n      | (nPaddingBytes << 8)\n      | nPaddingBytes;\n\n    // Create padding\n    const paddingWords = [];\n    for (let i = 0; i < nPaddingBytes; i += 4) {\n      paddingWords.push(paddingWord);\n    }\n    const padding = WordArray.create(paddingWords, nPaddingBytes);\n\n    // Add padding\n    data.concat(padding);\n  },\n\n  /**\n   * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n   *\n   * @param {WordArray} data The data to unpad.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n   */\n  unpad(data) {\n    const _data = data;\n\n    // Get number of padding bytes from last byte\n    const nPaddingBytes = _data.words[(_data.sigBytes - 1) >>> 2] & 0xff;\n\n    // Remove padding\n    _data.sigBytes -= nPaddingBytes;\n  },\n};\n\n/**\n * Abstract base block cipher template.\n *\n * @property {number} blockSize\n *\n *    The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n */\nexport class BlockCipher extends Cipher {\n  constructor(xformMode, key, cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {Mode} mode The block mode to use. Default: CBC\n     * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n     */\n    super(xformMode, key, Object.assign(\n      {\n        mode: CBC,\n        padding: Pkcs7,\n      },\n      cfg,\n    ));\n\n    this.blockSize = 128 / 32;\n  }\n\n  reset() {\n    let modeCreator;\n\n    // Reset cipher\n    super.reset.call(this);\n\n    // Shortcuts\n    const { cfg } = this;\n    const { iv, mode } = cfg;\n\n    // Reset block mode\n    if (this._xformMode === this.constructor._ENC_XFORM_MODE) {\n      modeCreator = mode.createEncryptor;\n    } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n      modeCreator = mode.createDecryptor;\n      // Keep at least one block in the buffer for unpadding\n      this._minBufferSize = 1;\n    }\n\n    this._mode = modeCreator.call(mode, this, iv && iv.words);\n    this._mode.__creator = modeCreator;\n  }\n\n  _doProcessBlock(words, offset) {\n    this._mode.processBlock(words, offset);\n  }\n\n  _doFinalize() {\n    let finalProcessedBlocks;\n\n    // Shortcut\n    const { padding } = this.cfg;\n\n    // Finalize\n    if (this._xformMode === this.constructor._ENC_XFORM_MODE) {\n      // Pad data\n      padding.pad(this._data, this.blockSize);\n\n      // Process final blocks\n      finalProcessedBlocks = this._process(!!'flush');\n    } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n      // Process final blocks\n      finalProcessedBlocks = this._process(!!'flush');\n\n      // Unpad data\n      padding.unpad(finalProcessedBlocks);\n    }\n\n    return finalProcessedBlocks;\n  }\n}\n\n/**\n * A collection of cipher parameters.\n *\n * @property {WordArray} ciphertext The raw ciphertext.\n * @property {WordArray} key The key to this ciphertext.\n * @property {WordArray} iv The IV used in the ciphering operation.\n * @property {WordArray} salt The salt used with a key derivation function.\n * @property {Cipher} algorithm The cipher algorithm.\n * @property {Mode} mode The block mode used in the ciphering operation.\n * @property {Padding} padding The padding scheme used in the ciphering operation.\n * @property {number} blockSize The block size of the cipher.\n * @property {Format} formatter\n *    The default formatting strategy to convert this cipher params object to a string.\n */\nexport class CipherParams extends Base {\n  /**\n   * Initializes a newly created cipher params object.\n   *\n   * @param {Object} cipherParams An object with any of the possible cipher parameters.\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.lib.CipherParams.create({\n   *         ciphertext: ciphertextWordArray,\n   *         key: keyWordArray,\n   *         iv: ivWordArray,\n   *         salt: saltWordArray,\n   *         algorithm: CryptoJS.algo.AES,\n   *         mode: CryptoJS.mode.CBC,\n   *         padding: CryptoJS.pad.PKCS7,\n   *         blockSize: 4,\n   *         formatter: CryptoJS.format.OpenSSL\n   *     });\n   */\n  constructor(cipherParams) {\n    super();\n\n    this.mixIn(cipherParams);\n  }\n\n  /**\n   * Converts this cipher params object to a string.\n   *\n   * @param {Format} formatter (Optional) The formatting strategy to use.\n   *\n   * @return {string} The stringified cipher params.\n   *\n   * @throws Error If neither the formatter nor the default formatter is set.\n   *\n   * @example\n   *\n   *     var string = cipherParams + '';\n   *     var string = cipherParams.toString();\n   *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n   */\n  toString(formatter) {\n    return (formatter || this.formatter).stringify(this);\n  }\n}\n\n/**\n * OpenSSL formatting strategy.\n */\nexport const OpenSSLFormatter = {\n  /**\n   * Converts a cipher params object to an OpenSSL-compatible string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The OpenSSL-compatible string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    let wordArray;\n\n    // Shortcuts\n    const { ciphertext, salt } = cipherParams;\n\n    // Format\n    if (salt) {\n      wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n    } else {\n      wordArray = ciphertext;\n    }\n\n    return wordArray.toString(Base64);\n  },\n\n  /**\n   * Converts an OpenSSL-compatible string to a cipher params object.\n   *\n   * @param {string} openSSLStr The OpenSSL-compatible string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n   */\n  parse(openSSLStr) {\n    let salt;\n\n    // Parse base64\n    const ciphertext = Base64.parse(openSSLStr);\n\n    // Shortcut\n    const ciphertextWords = ciphertext.words;\n\n    // Test for salt\n    if (ciphertextWords[0] === 0x53616c74 && ciphertextWords[1] === 0x65645f5f) {\n      // Extract salt\n      salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n      // Remove salt from ciphertext\n      ciphertextWords.splice(0, 4);\n      ciphertext.sigBytes -= 16;\n    }\n\n    return CipherParams.create({ ciphertext, salt });\n  },\n};\n\n/**\n * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n */\nexport class SerializableCipher extends Base {\n  /**\n   * Encrypts a message.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {WordArray|string} message The message to encrypt.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {CipherParams} A cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key);\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n   */\n  static encrypt(cipher, message, key, cfg) {\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Encrypt\n    const encryptor = cipher.createEncryptor(key, _cfg);\n    const ciphertext = encryptor.finalize(message);\n\n    // Shortcut\n    const cipherCfg = encryptor.cfg;\n\n    // Create and return serializable cipher params\n    return CipherParams.create({\n      ciphertext,\n      key,\n      iv: cipherCfg.iv,\n      algorithm: cipher,\n      mode: cipherCfg.mode,\n      padding: cipherCfg.padding,\n      blockSize: encryptor.blockSize,\n      formatter: _cfg.format,\n    });\n  }\n\n  /**\n   * Decrypts serialized ciphertext.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {WordArray} The plaintext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var plaintext = CryptoJS.lib.SerializableCipher\n   *       .decrypt(CryptoJS.algo.AES, formattedCiphertext, key,\n   *         { iv: iv, format: CryptoJS.format.OpenSSL });\n   *     var plaintext = CryptoJS.lib.SerializableCipher\n   *       .decrypt(CryptoJS.algo.AES, ciphertextParams, key,\n   *         { iv: iv, format: CryptoJS.format.OpenSSL });\n   */\n  static decrypt(cipher, ciphertext, key, cfg) {\n    let _ciphertext = ciphertext;\n\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Convert string to CipherParams\n    _ciphertext = this._parse(_ciphertext, _cfg.format);\n\n    // Decrypt\n    const plaintext = cipher.createDecryptor(key, _cfg).finalize(_ciphertext.ciphertext);\n\n    return plaintext;\n  }\n\n  /**\n   * Converts serialized ciphertext to CipherParams,\n   * else assumed CipherParams already and returns ciphertext unchanged.\n   *\n   * @param {CipherParams|string} ciphertext The ciphertext.\n   * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n   *\n   * @return {CipherParams} The unserialized ciphertext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       ._parse(ciphertextStringOrParams, format);\n   */\n  static _parse(ciphertext, format) {\n    if (typeof ciphertext === 'string') {\n      return format.parse(ciphertext, this);\n    }\n    return ciphertext;\n  }\n}\n/**\n * Configuration options.\n *\n * @property {Formatter} format\n *\n *    The formatting strategy to convert cipher param objects to and from a string.\n *    Default: OpenSSL\n */\nSerializableCipher.cfg = Object.assign(\n  new Base(),\n  { format: OpenSSLFormatter },\n);\n\n/**\n * OpenSSL key derivation function.\n */\nexport const OpenSSLKdf = {\n  /**\n   * Derives a key and IV from a password.\n   *\n   * @param {string} password The password to derive from.\n   * @param {number} keySize The size in words of the key to generate.\n   * @param {number} ivSize The size in words of the IV to generate.\n   * @param {WordArray|string} salt\n   *     (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n   *\n   * @return {CipherParams} A cipher params object with the key, IV, and salt.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n   *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n   */\n  execute(password, keySize, ivSize, salt, hasher) {\n    let _salt = salt;\n\n    // Generate random salt\n    if (!_salt) {\n      _salt = WordArray.random(64 / 8);\n    }\n\n    // Derive key and IV\n    let key;\n    if (!hasher) {\n      key = EvpKDFAlgo.create({ keySize: keySize + ivSize }).compute(password, _salt);\n    } else {\n      key = EvpKDFAlgo.create({ keySize: keySize + ivSize, hasher }).compute(password, _salt);\n    }\n\n    // Separate key and IV\n    const iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n    key.sigBytes = keySize * 4;\n\n    // Return params\n    return CipherParams.create({ key, iv, salt: _salt });\n  },\n};\n\n/**\n * A serializable cipher wrapper that derives the key from a password,\n * and returns ciphertext as a serializable cipher params object.\n */\nexport class PasswordBasedCipher extends SerializableCipher {\n  /**\n   * Encrypts a message using a password.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {WordArray|string} message The message to encrypt.\n   * @param {string} password The password.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {CipherParams} A cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher\n   *       .encrypt(CryptoJS.algo.AES, message, 'password');\n   *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher\n   *       .encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n   */\n  static encrypt(cipher, message, password, cfg) {\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Derive key and other params\n    const derivedParams = _cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, _cfg.salt, _cfg.hasher);\n\n    // Add IV to config\n    _cfg.iv = derivedParams.iv;\n\n    // Encrypt\n    const ciphertext = SerializableCipher.encrypt\n      .call(this, cipher, message, derivedParams.key, _cfg);\n\n    // Mix in derived params\n    ciphertext.mixIn(derivedParams);\n\n    return ciphertext;\n  }\n\n  /**\n   * Decrypts serialized ciphertext using a password.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n   * @param {string} password The password.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {WordArray} The plaintext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var plaintext = CryptoJS.lib.PasswordBasedCipher\n   *       .decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password',\n   *         { format: CryptoJS.format.OpenSSL });\n   *     var plaintext = CryptoJS.lib.PasswordBasedCipher\n   *       .decrypt(CryptoJS.algo.AES, ciphertextParams, 'password',\n   *         { format: CryptoJS.format.OpenSSL });\n   */\n  static decrypt(cipher, ciphertext, password, cfg) {\n    let _ciphertext = ciphertext;\n\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Convert string to CipherParams\n    _ciphertext = this._parse(_ciphertext, _cfg.format);\n\n    // Derive key and other params\n    const derivedParams = _cfg.kdf\n      .execute(password, cipher.keySize, cipher.ivSize, _ciphertext.salt, _cfg.hasher);\n\n    // Add IV to config\n    _cfg.iv = derivedParams.iv;\n\n    // Decrypt\n    const plaintext = SerializableCipher.decrypt\n      .call(this, cipher, _ciphertext, derivedParams.key, _cfg);\n\n    return plaintext;\n  }\n}\n/**\n * Configuration options.\n *\n * @property {KDF} kdf\n *     The key derivation function to use to generate a key and IV from a password.\n *     Default: OpenSSL\n */\nPasswordBasedCipher.cfg = Object.assign(SerializableCipher.cfg, { kdf: OpenSSLKdf });\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/mode-ctr-gladman.js"],"names":["CTRGladman","BlockCipherMode","incWord","word","_word","b1","b2","b3","incCounter","counter","_counter","Encryptor","processBlock","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":"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","sourcesContent":["import {\n  BlockCipherMode,\n} from './cipher-core.js';\n\nconst incWord = (word) => {\n  let _word = word;\n\n  if (((word >> 24) & 0xff) === 0xff) { // overflow\n    let b1 = (word >> 16) & 0xff;\n    let b2 = (word >> 8) & 0xff;\n    let b3 = word & 0xff;\n\n    if (b1 === 0xff) { // overflow b1\n      b1 = 0;\n      if (b2 === 0xff) {\n        b2 = 0;\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n\n    _word = 0;\n    _word += (b1 << 16);\n    _word += (b2 << 8);\n    _word += b3;\n  } else {\n    _word += (0x01 << 24);\n  }\n  return _word;\n};\n\nconst incCounter = (counter) => {\n  const _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n  return _counter;\n};\n\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\nexport class CTRGladman extends BlockCipherMode {\n}\nCTRGladman.Encryptor = class extends CTRGladman {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n\n    incCounter(counter);\n\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTRGladman.Decryptor = CTRGladman.Encryptor;\n"]}
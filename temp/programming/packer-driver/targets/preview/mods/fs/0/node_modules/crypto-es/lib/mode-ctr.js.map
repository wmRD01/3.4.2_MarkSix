{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/mode-ctr.js"],"names":["CTR","BlockCipherMode","Encryptor","processBlock","words","offset","_words","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":";;;uBAOaA,G;;;;;;AANXC,MAAAA,e,gBAAAA,e;;;AAGF;AACA;AACA;qBACaD,G,GAAN,MAAMA,GAAN,SAAkBC,eAAlB,CAAkC,E;;AAEzCD,MAAAA,GAAG,CAACE,SAAJ,GAAgB,cAAcF,GAAd,CAAkB;AAChCG,QAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1B,cAAMC,MAAM,GAAGF,KAAf,CAD0B,CAG1B;;AACA,cAAMG,MAAM,GAAG,KAAKC,OAApB;AACA,cAAM;AAAEC,YAAAA;AAAF,cAAgBF,MAAtB;AACA,cAAMG,EAAE,GAAG,KAAKC,GAAhB;AACA,cAAIC,OAAO,GAAG,KAAKC,QAAnB,CAP0B,CAS1B;;AACA,cAAIH,EAAJ,EAAQ;AACN,iBAAKG,QAAL,GAAgBH,EAAE,CAACI,KAAH,CAAS,CAAT,CAAhB;AACAF,YAAAA,OAAO,GAAG,KAAKC,QAAf,CAFM,CAIN;;AACA,iBAAKF,GAAL,GAAWI,SAAX;AACD;;AACD,cAAMC,SAAS,GAAGJ,OAAO,CAACE,KAAR,CAAc,CAAd,CAAlB;AACAP,UAAAA,MAAM,CAACU,YAAP,CAAoBD,SAApB,EAA+B,CAA/B,EAlB0B,CAoB1B;;AACAJ,UAAAA,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAA0BG,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAAyB,CAA1B,GAA+B,CAAxD,CArB0B,CAuB1B;;AACA,eAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,IAAI,CAApC,EAAuC;AACrCZ,YAAAA,MAAM,CAACD,MAAM,GAAGa,CAAV,CAAN,IAAsBF,SAAS,CAACE,CAAD,CAA/B;AACD;AACF;;AA5B+B,OAAlC;AA8BAlB,MAAAA,GAAG,CAACmB,SAAJ,GAAgBnB,GAAG,CAACE,SAApB","sourcesContent":["import {\n  BlockCipherMode,\n} from './cipher-core.js';\n\n/**\n * Counter block mode.\n */\nexport class CTR extends BlockCipherMode {\n}\nCTR.Encryptor = class extends CTR {\n  processBlock(words, offset) {\n    const _words = words;\n\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n    const iv = this._iv;\n    let counter = this._counter;\n\n    // Generate keystream\n    if (iv) {\n      this._counter = iv.slice(0);\n      counter = this._counter;\n\n      // Remove IV for subsequent blocks\n      this._iv = undefined;\n    }\n    const keystream = counter.slice(0);\n    cipher.encryptBlock(keystream, 0);\n\n    // Increment counter\n    counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;\n\n    // Encrypt\n    for (let i = 0; i < blockSize; i += 1) {\n      _words[offset + i] ^= keystream[i];\n    }\n  }\n};\nCTR.Decryptor = CTR.Encryptor;\n"]}
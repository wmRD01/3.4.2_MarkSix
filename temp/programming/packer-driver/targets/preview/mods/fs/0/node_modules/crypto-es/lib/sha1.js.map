{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/sha1.js"],"names":["SHA1Algo","WordArray","Hasher","W","_doReset","_hash","_doProcessBlock","M","offset","H","words","a","b","c","d","e","i","n","t","_doFinalize","data","_data","dataWords","nBitsTotal","_nDataBytes","nBitsLeft","sigBytes","Math","floor","length","_process","clone","call","SHA1","_createHelper","HmacSHA1","_createHmacHelper"],"mappings":"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","sourcesContent":["import {\n  WordArray,\n  Hasher,\n} from './core.js';\n\n// Reusable object\nconst W = [];\n\n/**\n * SHA-1 hash algorithm.\n */\nexport class SHA1Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray([\n      0x67452301,\n      0xefcdab89,\n      0x98badcfe,\n      0x10325476,\n      0xc3d2e1f0,\n    ]);\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcut\n    const H = this._hash.words;\n\n    // Working variables\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    // Computation\n    for (let i = 0; i < 80; i += 1) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n        W[i] = (n << 1) | (n >>> 31);\n      }\n\n      let t = ((a << 5) | (a >>> 27)) + e + W[i];\n      if (i < 20) {\n        t += ((b & c) | (~b & d)) + 0x5a827999;\n      } else if (i < 40) {\n        t += (b ^ c ^ d) + 0x6ed9eba1;\n      } else if (i < 60) {\n        t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n      } else /* if (i < 80) */ {\n        t += (b ^ c ^ d) - 0x359d3e2a;\n      }\n\n      e = d;\n      d = c;\n      c = (b << 30) | (b >>> 2);\n      b = a;\n      a = t;\n    }\n\n    // Intermediate hash value\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n    H[4] = (H[4] + e) | 0;\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n    data.sigBytes = dataWords.length * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Return final computed hash\n    return this._hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA1('message');\n *     var hash = CryptoJS.SHA1(wordArray);\n */\nexport const SHA1 = Hasher._createHelper(SHA1Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA1(message, key);\n */\nexport const HmacSHA1 = Hasher._createHmacHelper(SHA1Algo);\n"]}
{"version":3,"sources":["file:///C:/CocosProject/3.4.2_MarkSix/node_modules/crypto-es/lib/x64-core.js"],"names":["X64Word","X64WordArray","Base","WordArray","X32WordArray","constructor","high","low","words","sigBytes","length","toX32","x64Words","x64WordsLength","x32Words","i","x64Word","push","create","clone","call","slice","wordsLength"],"mappings":";;;uBAUaA,O,EAyBAC,Y;;;;;;;;;AAlCXC,MAAAA,I,gBAAAA,I;AACAC,MAAAA,S,gBAAAA,S;;;AAGIC,MAAAA,Y,GAAeD,S;AAErB;AACA;AACA;;yBACaH,O,GAAN,MAAMA,OAAN,SAAsBE,IAAtB,CAA2B;AAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,QAAAA,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAY;AACrB;AAEA,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKC,GAAL,GAAWA,GAAX;AACD;;AAhB+B,O;AAmBlC;AACA;AACA;AACA;AACA;AACA;;;8BACaN,Y,GAAN,MAAMA,YAAN,SAA2BC,IAA3B,CAAgC;AACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,QAAAA,WAAW,CAACG,KAAD,EAAaC,QAAb,EAA0C;AAAA,cAAzCD,KAAyC;AAAzCA,YAAAA,KAAyC,GAAjC,EAAiC;AAAA;;AAAA,cAA7BC,QAA6B;AAA7BA,YAAAA,QAA6B,GAAlBD,KAAK,CAACE,MAAN,GAAe,CAAG;AAAA;;AACnD;AAEA,eAAKF,KAAL,GAAaA,KAAb;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,QAAAA,KAAK,GAAG;AACN;AACA,cAAMC,QAAQ,GAAG,KAAKJ,KAAtB;AACA,cAAMK,cAAc,GAAGD,QAAQ,CAACF,MAAhC,CAHM,CAKN;;AACA,cAAMI,QAAQ,GAAG,EAAjB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,IAAI,CAAzC,EAA4C;AAC1C,gBAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAxB;AACAD,YAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACV,IAAtB;AACAQ,YAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACT,GAAtB;AACD;;AAED,iBAAOH,YAAY,CAACc,MAAb,CAAoBJ,QAApB,EAA8B,KAAKL,QAAnC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEU,QAAAA,KAAK,GAAG;AACN,cAAMA,KAAK,GAAG,MAAMA,KAAN,CAAYC,IAAZ,CAAiB,IAAjB,CAAd,CADM,CAGN;;AACAD,UAAAA,KAAK,CAACX,KAAN,GAAc,KAAKA,KAAL,CAAWa,KAAX,CAAiB,CAAjB,CAAd;AACA,cAAM;AAAEb,YAAAA;AAAF,cAAYW,KAAlB,CALM,CAON;;AACA,cAAMG,WAAW,GAAGd,KAAK,CAACE,MAA1B;;AACA,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,WAApB,EAAiCP,CAAC,IAAI,CAAtC,EAAyC;AACvCP,YAAAA,KAAK,CAACO,CAAD,CAAL,GAAWP,KAAK,CAACO,CAAD,CAAL,CAASI,KAAT,EAAX;AACD;;AAED,iBAAOA,KAAP;AACD;;AA5EoC,O","sourcesContent":["import {\n  Base,\n  WordArray,\n} from './core.js';\n\nconst X32WordArray = WordArray;\n\n/**\n * A 64-bit word.\n */\nexport class X64Word extends Base {\n  /**\n   * Initializes a newly created 64-bit word.\n   *\n   * @param {number} high The high 32 bits.\n   * @param {number} low The low 32 bits.\n   *\n   * @example\n   *\n   *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n   */\n  constructor(high, low) {\n    super();\n\n    this.high = high;\n    this.low = low;\n  }\n}\n\n/**\n * An array of 64-bit words.\n *\n * @property {Array} words The array of CryptoJS.x64.Word objects.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class X64WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create();\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ]);\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ], 10);\n   */\n  constructor(words = [], sigBytes = words.length * 8) {\n    super();\n\n    this.words = words;\n    this.sigBytes = sigBytes;\n  }\n\n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n  toX32() {\n    // Shortcuts\n    const x64Words = this.words;\n    const x64WordsLength = x64Words.length;\n\n    // Convert\n    const x32Words = [];\n    for (let i = 0; i < x64WordsLength; i += 1) {\n      const x64Word = x64Words[i];\n      x32Words.push(x64Word.high);\n      x32Words.push(x64Word.low);\n    }\n\n    return X32WordArray.create(x32Words, this.sigBytes);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {X64WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = x64WordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n\n    // Clone \"words\" array\n    clone.words = this.words.slice(0);\n    const { words } = clone;\n\n    // Clone each X64Word object\n    const wordsLength = words.length;\n    for (let i = 0; i < wordsLength; i += 1) {\n      words[i] = words[i].clone();\n    }\n\n    return clone;\n  }\n}\n"]}